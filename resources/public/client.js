if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2814";
cljs.core._STAR_unchecked_if_STAR_ = false;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__5547__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__5546 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__5546) : cljs.core.into_array.call(null, G__5546);
      }());
    };
    var G__5547 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__5548__i = 0, G__5548__a = new Array(arguments.length - 0);
        while (G__5548__i < G__5548__a.length) {
          G__5548__a[G__5548__i] = arguments[G__5548__i + 0];
          ++G__5548__i;
        }
        args = new cljs.core.IndexedSeq(G__5548__a, 0);
      }
      return G__5547__delegate.call(this, args);
    };
    G__5547.cljs$lang$maxFixedArity = 0;
    G__5547.cljs$lang$applyTo = function(arglist__5549) {
      var args = cljs.core.seq(arglist__5549);
      return G__5547__delegate(args);
    };
    G__5547.cljs$core$IFn$_invoke$arity$variadic = G__5547__delegate;
    return G__5547;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  var G__5551 = x;
  return goog.isString(G__5551);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__5553 = x__$1;
    return goog.typeOf(G__5553);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3785__auto__ = ty;
    if (cljs.core.truth_(and__3785__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3785__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__5555 = obj;
    return goog.typeOf(G__5555);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.importScript_(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__5557 = Symbol;
  return goog.typeOf(G__5557);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4684__auto___5559 = len;
  var i_5560 = 0;
  while (true) {
    if (i_5560 < n__4684__auto___5559) {
      new_arr[i_5560] = arr[i_5560];
      var G__5561 = i_5560 + 1;
      i_5560 = G__5561;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__5562 = i + 1;
      i = G__5562;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__5571__delegate = function(array, i, idxs) {
      var G__5568 = aget;
      var G__5569 = aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__5570 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__5568, G__5569, G__5570) : cljs.core.apply.call(null, G__5568, G__5569, G__5570);
    };
    var G__5571 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__5572__i = 0, G__5572__a = new Array(arguments.length - 2);
        while (G__5572__i < G__5572__a.length) {
          G__5572__a[G__5572__i] = arguments[G__5572__i + 2];
          ++G__5572__i;
        }
        idxs = new cljs.core.IndexedSeq(G__5572__a, 0);
      }
      return G__5571__delegate.call(this, array, i, idxs);
    };
    G__5571.cljs$lang$maxFixedArity = 2;
    G__5571.cljs$lang$applyTo = function(arglist__5573) {
      var array = cljs.core.first(arglist__5573);
      arglist__5573 = cljs.core.next(arglist__5573);
      var i = cljs.core.first(arglist__5573);
      var idxs = cljs.core.rest(arglist__5573);
      return G__5571__delegate(array, i, idxs);
    };
    G__5571.cljs$core$IFn$_invoke$arity$variadic = G__5571__delegate;
    return G__5571;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        var G__5574 = null;
        if (arguments.length > 2) {
          var G__5575__i = 0, G__5575__a = new Array(arguments.length - 2);
          while (G__5575__i < G__5575__a.length) {
            G__5575__a[G__5575__i] = arguments[G__5575__i + 2];
            ++G__5575__i;
          }
          G__5574 = new cljs.core.IndexedSeq(G__5575__a, 0);
        }
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__5574);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__5584__delegate = function(array, idx, idx2, idxv) {
      var G__5580 = aset;
      var G__5581 = array[idx];
      var G__5582 = idx2;
      var G__5583 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__5580, G__5581, G__5582, G__5583) : cljs.core.apply.call(null, G__5580, G__5581, G__5582, G__5583);
    };
    var G__5584 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__5585__i = 0, G__5585__a = new Array(arguments.length - 3);
        while (G__5585__i < G__5585__a.length) {
          G__5585__a[G__5585__i] = arguments[G__5585__i + 3];
          ++G__5585__i;
        }
        idxv = new cljs.core.IndexedSeq(G__5585__a, 0);
      }
      return G__5584__delegate.call(this, array, idx, idx2, idxv);
    };
    G__5584.cljs$lang$maxFixedArity = 3;
    G__5584.cljs$lang$applyTo = function(arglist__5586) {
      var array = cljs.core.first(arglist__5586);
      arglist__5586 = cljs.core.next(arglist__5586);
      var idx = cljs.core.first(arglist__5586);
      arglist__5586 = cljs.core.next(arglist__5586);
      var idx2 = cljs.core.first(arglist__5586);
      var idxv = cljs.core.rest(arglist__5586);
      return G__5584__delegate(array, idx, idx2, idxv);
    };
    G__5584.cljs$core$IFn$_invoke$arity$variadic = G__5584__delegate;
    return G__5584;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        var G__5587 = null;
        if (arguments.length > 3) {
          var G__5588__i = 0, G__5588__a = new Array(arguments.length - 3);
          while (G__5588__i < G__5588__a.length) {
            G__5588__a[G__5588__i] = arguments[G__5588__i + 3];
            ++G__5588__i;
          }
          G__5587 = new cljs.core.IndexedSeq(G__5588__a, 0);
        }
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__5587);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    var G__5594 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__5595 = [];
    var G__5596 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__5594, G__5595, G__5596) : cljs.core.reduce.call(null, G__5594, G__5595, G__5596);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.js_invoke = function() {
  var js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__5597__i = 0, G__5597__a = new Array(arguments.length - 2);
      while (G__5597__i < G__5597__a.length) {
        G__5597__a[G__5597__i] = arguments[G__5597__i + 2];
        ++G__5597__i;
      }
      args = new cljs.core.IndexedSeq(G__5597__a, 0);
    }
    return js_invoke__delegate.call(this, obj, s, args);
  };
  js_invoke.cljs$lang$maxFixedArity = 2;
  js_invoke.cljs$lang$applyTo = function(arglist__5598) {
    var obj = cljs.core.first(arglist__5598);
    arglist__5598 = cljs.core.next(arglist__5598);
    var s = cljs.core.first(arglist__5598);
    var args = cljs.core.rest(arglist__5598);
    return js_invoke__delegate(obj, s, args);
  };
  js_invoke.cljs$core$IFn$_invoke$arity$variadic = js_invoke__delegate;
  return js_invoke;
}();
cljs.core.Fn = function() {
  var obj5600 = {};
  return obj5600;
}();
cljs.core.IFn = function() {
  var obj5602 = {};
  return obj5602;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5648 = x__4441__auto__;
          return goog.typeOf(G__5648);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5650 = x__4441__auto__;
          return goog.typeOf(G__5650);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5652 = x__4441__auto__;
          return goog.typeOf(G__5652);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5654 = x__4441__auto__;
          return goog.typeOf(G__5654);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5656 = x__4441__auto__;
          return goog.typeOf(G__5656);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5658 = x__4441__auto__;
          return goog.typeOf(G__5658);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5660 = x__4441__auto__;
          return goog.typeOf(G__5660);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5662 = x__4441__auto__;
          return goog.typeOf(G__5662);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5664 = x__4441__auto__;
          return goog.typeOf(G__5664);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5666 = x__4441__auto__;
          return goog.typeOf(G__5666);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5668 = x__4441__auto__;
          return goog.typeOf(G__5668);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5670 = x__4441__auto__;
          return goog.typeOf(G__5670);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5672 = x__4441__auto__;
          return goog.typeOf(G__5672);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5674 = x__4441__auto__;
          return goog.typeOf(G__5674);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5676 = x__4441__auto__;
          return goog.typeOf(G__5676);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5678 = x__4441__auto__;
          return goog.typeOf(G__5678);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5680 = x__4441__auto__;
          return goog.typeOf(G__5680);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5682 = x__4441__auto__;
          return goog.typeOf(G__5682);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5684 = x__4441__auto__;
          return goog.typeOf(G__5684);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5686 = x__4441__auto__;
          return goog.typeOf(G__5686);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5688 = x__4441__auto__;
          return goog.typeOf(G__5688);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = cljs.core._invoke[function() {
          var G__5690 = x__4441__auto__;
          return goog.typeOf(G__5690);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._invoke["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj5692 = {};
  return obj5692;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3785__auto__ = value;
    if (and__3785__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4441__auto__ = value == null ? null : value;
    return function() {
      var or__3797__auto__ = cljs.core._clone[function() {
        var G__5696 = x__4441__auto__;
        return goog.typeOf(G__5696);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._clone["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj5698 = {};
  return obj5698;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._count[function() {
        var G__5702 = x__4441__auto__;
        return goog.typeOf(G__5702);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._count["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj5704 = {};
  return obj5704;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._empty[function() {
        var G__5708 = x__4441__auto__;
        return goog.typeOf(G__5708);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._empty["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj5710 = {};
  return obj5710;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._conj[function() {
        var G__5714 = x__4441__auto__;
        return goog.typeOf(G__5714);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._conj["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj5716 = {};
  return obj5716;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3785__auto__ = coll;
      if (and__3785__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4441__auto__ = coll == null ? null : coll;
      return function() {
        var or__3797__auto__ = cljs.core._nth[function() {
          var G__5722 = x__4441__auto__;
          return goog.typeOf(G__5722);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._nth["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3785__auto__ = coll;
      if (and__3785__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4441__auto__ = coll == null ? null : coll;
      return function() {
        var or__3797__auto__ = cljs.core._nth[function() {
          var G__5724 = x__4441__auto__;
          return goog.typeOf(G__5724);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._nth["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj5726 = {};
  return obj5726;
}();
cljs.core.ISeq = function() {
  var obj5728 = {};
  return obj5728;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._first[function() {
        var G__5732 = x__4441__auto__;
        return goog.typeOf(G__5732);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._first["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._rest[function() {
        var G__5736 = x__4441__auto__;
        return goog.typeOf(G__5736);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._rest["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj5738 = {};
  return obj5738;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._next[function() {
        var G__5742 = x__4441__auto__;
        return goog.typeOf(G__5742);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._next["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj5744 = {};
  return obj5744;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3785__auto__ = o;
      if (and__3785__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4441__auto__ = o == null ? null : o;
      return function() {
        var or__3797__auto__ = cljs.core._lookup[function() {
          var G__5750 = x__4441__auto__;
          return goog.typeOf(G__5750);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._lookup["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3785__auto__ = o;
      if (and__3785__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4441__auto__ = o == null ? null : o;
      return function() {
        var or__3797__auto__ = cljs.core._lookup[function() {
          var G__5752 = x__4441__auto__;
          return goog.typeOf(G__5752);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._lookup["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj5754 = {};
  return obj5754;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__5758 = x__4441__auto__;
        return goog.typeOf(G__5758);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._assoc[function() {
        var G__5762 = x__4441__auto__;
        return goog.typeOf(G__5762);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._assoc["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj5764 = {};
  return obj5764;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._dissoc[function() {
        var G__5768 = x__4441__auto__;
        return goog.typeOf(G__5768);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._dissoc["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj5770 = {};
  return obj5770;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._key[function() {
        var G__5774 = x__4441__auto__;
        return goog.typeOf(G__5774);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._key["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._val[function() {
        var G__5778 = x__4441__auto__;
        return goog.typeOf(G__5778);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._val["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj5780 = {};
  return obj5780;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._disjoin[function() {
        var G__5784 = x__4441__auto__;
        return goog.typeOf(G__5784);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._disjoin["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj5786 = {};
  return obj5786;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._peek[function() {
        var G__5790 = x__4441__auto__;
        return goog.typeOf(G__5790);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._peek["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._pop[function() {
        var G__5794 = x__4441__auto__;
        return goog.typeOf(G__5794);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._pop["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj5796 = {};
  return obj5796;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._assoc_n[function() {
        var G__5800 = x__4441__auto__;
        return goog.typeOf(G__5800);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj5802 = {};
  return obj5802;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._deref[function() {
        var G__5806 = x__4441__auto__;
        return goog.typeOf(G__5806);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._deref["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj5808 = {};
  return obj5808;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._deref_with_timeout[function() {
        var G__5812 = x__4441__auto__;
        return goog.typeOf(G__5812);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj5814 = {};
  return obj5814;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._meta[function() {
        var G__5818 = x__4441__auto__;
        return goog.typeOf(G__5818);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._meta["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj5820 = {};
  return obj5820;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._with_meta[function() {
        var G__5824 = x__4441__auto__;
        return goog.typeOf(G__5824);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._with_meta["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj5826 = {};
  return obj5826;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3785__auto__ = coll;
      if (and__3785__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4441__auto__ = coll == null ? null : coll;
      return function() {
        var or__3797__auto__ = cljs.core._reduce[function() {
          var G__5832 = x__4441__auto__;
          return goog.typeOf(G__5832);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._reduce["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3785__auto__ = coll;
      if (and__3785__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4441__auto__ = coll == null ? null : coll;
      return function() {
        var or__3797__auto__ = cljs.core._reduce[function() {
          var G__5834 = x__4441__auto__;
          return goog.typeOf(G__5834);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._reduce["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj5836 = {};
  return obj5836;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._kv_reduce[function() {
        var G__5840 = x__4441__auto__;
        return goog.typeOf(G__5840);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj5842 = {};
  return obj5842;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._equiv[function() {
        var G__5846 = x__4441__auto__;
        return goog.typeOf(G__5846);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._equiv["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj5848 = {};
  return obj5848;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._hash[function() {
        var G__5852 = x__4441__auto__;
        return goog.typeOf(G__5852);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._hash["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj5854 = {};
  return obj5854;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._seq[function() {
        var G__5858 = x__4441__auto__;
        return goog.typeOf(G__5858);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._seq["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj5860 = {};
  return obj5860;
}();
cljs.core.IList = function() {
  var obj5862 = {};
  return obj5862;
}();
cljs.core.IRecord = function() {
  var obj5864 = {};
  return obj5864;
}();
cljs.core.IReversible = function() {
  var obj5866 = {};
  return obj5866;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._rseq[function() {
        var G__5870 = x__4441__auto__;
        return goog.typeOf(G__5870);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._rseq["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj5872 = {};
  return obj5872;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._sorted_seq[function() {
        var G__5876 = x__4441__auto__;
        return goog.typeOf(G__5876);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._sorted_seq_from[function() {
        var G__5880 = x__4441__auto__;
        return goog.typeOf(G__5880);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._entry_key[function() {
        var G__5884 = x__4441__auto__;
        return goog.typeOf(G__5884);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._entry_key["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._comparator[function() {
        var G__5888 = x__4441__auto__;
        return goog.typeOf(G__5888);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._comparator["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj5890 = {};
  return obj5890;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3785__auto__ = writer;
    if (and__3785__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4441__auto__ = writer == null ? null : writer;
    return function() {
      var or__3797__auto__ = cljs.core._write[function() {
        var G__5894 = x__4441__auto__;
        return goog.typeOf(G__5894);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._write["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3785__auto__ = writer;
    if (and__3785__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4441__auto__ = writer == null ? null : writer;
    return function() {
      var or__3797__auto__ = cljs.core._flush[function() {
        var G__5898 = x__4441__auto__;
        return goog.typeOf(G__5898);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._flush["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj5900 = {};
  return obj5900;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._pr_writer[function() {
        var G__5904 = x__4441__auto__;
        return goog.typeOf(G__5904);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj5906 = {};
  return obj5906;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3785__auto__ = d;
    if (and__3785__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4441__auto__ = d == null ? null : d;
    return function() {
      var or__3797__auto__ = cljs.core._realized_QMARK_[function() {
        var G__5910 = x__4441__auto__;
        return goog.typeOf(G__5910);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj5912 = {};
  return obj5912;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = cljs.core._notify_watches[function() {
        var G__5916 = x__4441__auto__;
        return goog.typeOf(G__5916);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = cljs.core._add_watch[function() {
        var G__5920 = x__4441__auto__;
        return goog.typeOf(G__5920);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._add_watch["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = cljs.core._remove_watch[function() {
        var G__5924 = x__4441__auto__;
        return goog.typeOf(G__5924);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj5926 = {};
  return obj5926;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._as_transient[function() {
        var G__5930 = x__4441__auto__;
        return goog.typeOf(G__5930);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._as_transient["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj5932 = {};
  return obj5932;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3785__auto__ = tcoll;
    if (and__3785__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4441__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3797__auto__ = cljs.core._conj_BANG_[function() {
        var G__5936 = x__4441__auto__;
        return goog.typeOf(G__5936);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3785__auto__ = tcoll;
    if (and__3785__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4441__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3797__auto__ = cljs.core._persistent_BANG_[function() {
        var G__5940 = x__4441__auto__;
        return goog.typeOf(G__5940);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj5942 = {};
  return obj5942;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3785__auto__ = tcoll;
    if (and__3785__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4441__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3797__auto__ = cljs.core._assoc_BANG_[function() {
        var G__5946 = x__4441__auto__;
        return goog.typeOf(G__5946);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj5948 = {};
  return obj5948;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3785__auto__ = tcoll;
    if (and__3785__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4441__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3797__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__5952 = x__4441__auto__;
        return goog.typeOf(G__5952);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj5954 = {};
  return obj5954;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3785__auto__ = tcoll;
    if (and__3785__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4441__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3797__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__5958 = x__4441__auto__;
        return goog.typeOf(G__5958);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3785__auto__ = tcoll;
    if (and__3785__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4441__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3797__auto__ = cljs.core._pop_BANG_[function() {
        var G__5962 = x__4441__auto__;
        return goog.typeOf(G__5962);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj5964 = {};
  return obj5964;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3785__auto__ = tcoll;
    if (and__3785__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4441__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3797__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__5968 = x__4441__auto__;
        return goog.typeOf(G__5968);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj5970 = {};
  return obj5970;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = cljs.core._compare[function() {
        var G__5974 = x__4441__auto__;
        return goog.typeOf(G__5974);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._compare["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj5976 = {};
  return obj5976;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._drop_first[function() {
        var G__5980 = x__4441__auto__;
        return goog.typeOf(G__5980);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._drop_first["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj5982 = {};
  return obj5982;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._chunked_first[function() {
        var G__5986 = x__4441__auto__;
        return goog.typeOf(G__5986);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._chunked_rest[function() {
        var G__5990 = x__4441__auto__;
        return goog.typeOf(G__5990);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj5992 = {};
  return obj5992;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._chunked_next[function() {
        var G__5996 = x__4441__auto__;
        return goog.typeOf(G__5996);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj5998 = {};
  return obj5998;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = cljs.core._name[function() {
        var G__6002 = x__4441__auto__;
        return goog.typeOf(G__6002);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._name["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = cljs.core._namespace[function() {
        var G__6006 = x__4441__auto__;
        return goog.typeOf(G__6006);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._namespace["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj6008 = {};
  return obj6008;
}();
cljs.core.IReset = function() {
  var obj6010 = {};
  return obj6010;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._reset_BANG_[function() {
        var G__6014 = x__4441__auto__;
        return goog.typeOf(G__6014);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj6016 = {};
  return obj6016;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3785__auto__ = o;
      if (and__3785__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4441__auto__ = o == null ? null : o;
      return function() {
        var or__3797__auto__ = cljs.core._swap_BANG_[function() {
          var G__6026 = x__4441__auto__;
          return goog.typeOf(G__6026);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3785__auto__ = o;
      if (and__3785__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4441__auto__ = o == null ? null : o;
      return function() {
        var or__3797__auto__ = cljs.core._swap_BANG_[function() {
          var G__6028 = x__4441__auto__;
          return goog.typeOf(G__6028);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3785__auto__ = o;
      if (and__3785__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4441__auto__ = o == null ? null : o;
      return function() {
        var or__3797__auto__ = cljs.core._swap_BANG_[function() {
          var G__6030 = x__4441__auto__;
          return goog.typeOf(G__6030);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3785__auto__ = o;
      if (and__3785__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4441__auto__ = o == null ? null : o;
      return function() {
        var or__3797__auto__ = cljs.core._swap_BANG_[function() {
          var G__6032 = x__4441__auto__;
          return goog.typeOf(G__6032);
        }()];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj6034 = {};
  return obj6034;
}();
cljs.core._vreset_BANG_ = function _vreset_BANG_(o, new_value) {
  if (function() {
    var and__3785__auto__ = o;
    if (and__3785__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4441__auto__ = o == null ? null : o;
    return function() {
      var or__3797__auto__ = cljs.core._vreset_BANG_[function() {
        var G__6038 = x__4441__auto__;
        return goog.typeOf(G__6038);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj6040 = {};
  return obj6040;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3785__auto__ = coll;
    if (and__3785__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4441__auto__ = coll == null ? null : coll;
    return function() {
      var or__3797__auto__ = cljs.core._iterator[function() {
        var G__6044 = x__4441__auto__;
        return goog.typeOf(G__6044);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._iterator["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__6047 = 4294967295;
  var G__6048 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__6047, G__6048) : Math.imul.call(null, G__6047, G__6048);
}() === 0)) {
  cljs.core.imul = function imul(a, b) {
    var G__6051 = a;
    var G__6052 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__6051, G__6052) : Math.imul.call(null, G__6051, G__6052);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__6053 = i + 2;
        var G__6054 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__6053;
        h1 = G__6054;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj6056 = {};
  return obj6056;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__6057 = i + 1;
          var G__6058 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__6057;
          hash = G__6058;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj6062 = {};
      return obj6062;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__6065 = o;
    if (G__6065) {
      var bit__4471__auto__ = G__6065.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4471__auto__ || G__6065.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__6066 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__6066) : Math.floor.call(null, G__6066);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = cljs.core.not(a.ns);
      if (and__3785__auto__) {
        return b.ns;
      } else {
        return and__3785__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__6073 = a.ns;
            var G__6074 = b.ns;
            return goog.array.defaultCompare(G__6073, G__6074);
          }();
          if (0 === nsc) {
            var G__6075 = a.name;
            var G__6076 = b.name;
            return goog.array.defaultCompare(G__6075, G__6076);
          } else {
            return nsc;
          }
        }
      } else {
        var G__6077 = a.name;
        var G__6078 = b.name;
        return goog.array.defaultCompare(G__6077, G__6078);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4218__auto__ = self__._hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__6080 = null;
  var G__6080__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__6080__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__6080 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6080__2.call(this, self__, coll);
      case 3:
        return G__6080__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6080.cljs$core$IFn$_invoke$arity$2 = G__6080__2;
  G__6080.cljs$core$IFn$_invoke$arity$3 = G__6080__3;
  return G__6080;
}();
cljs.core.Symbol.prototype.apply = function(self__, args6079) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6079)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__6128 = null;
  var G__6128__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__6128__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__6128__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__6128__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__6128__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__6128__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__6128__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__6128__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__6128__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__6128__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6128__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6128__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6128__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6128__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6128__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6128__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6128__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6128__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6128__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6128__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6128__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6128__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6084 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__6085 = a;
    var G__6086 = b;
    var G__6087 = c;
    var G__6088 = d;
    var G__6089 = e;
    var G__6090 = f;
    var G__6091 = g;
    var G__6092 = h;
    var G__6093 = i;
    var G__6094 = j;
    var G__6095 = k;
    var G__6096 = l;
    var G__6097 = m;
    var G__6098 = n;
    var G__6099 = o;
    var G__6100 = p;
    var G__6101 = q;
    var G__6102 = r;
    var G__6103 = s;
    var G__6104 = t;
    var G__6105 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6084, G__6085, G__6086, G__6087, G__6088, G__6089, G__6090, G__6091, G__6092, G__6093, G__6094, G__6095, G__6096, G__6097, G__6098, G__6099, G__6100, G__6101, G__6102, G__6103, G__6104, G__6105) : cljs.core.apply.call(null, G__6084, G__6085, G__6086, G__6087, G__6088, G__6089, G__6090, G__6091, G__6092, G__6093, G__6094, G__6095, G__6096, G__6097, G__6098, G__6099, G__6100, G__6101, G__6102, 
    G__6103, G__6104, G__6105);
  };
  G__6128 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6128__1.call(this, self__);
      case 2:
        return G__6128__2.call(this, self__, a);
      case 3:
        return G__6128__3.call(this, self__, a, b);
      case 4:
        return G__6128__4.call(this, self__, a, b, c);
      case 5:
        return G__6128__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6128__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6128__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6128__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6128__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6128__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6128__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6128__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6128__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6128__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6128__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6128__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6128__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6128__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6128__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6128__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6128__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6128__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6128.cljs$core$IFn$_invoke$arity$1 = G__6128__1;
  G__6128.cljs$core$IFn$_invoke$arity$2 = G__6128__2;
  G__6128.cljs$core$IFn$_invoke$arity$3 = G__6128__3;
  G__6128.cljs$core$IFn$_invoke$arity$4 = G__6128__4;
  G__6128.cljs$core$IFn$_invoke$arity$5 = G__6128__5;
  G__6128.cljs$core$IFn$_invoke$arity$6 = G__6128__6;
  G__6128.cljs$core$IFn$_invoke$arity$7 = G__6128__7;
  G__6128.cljs$core$IFn$_invoke$arity$8 = G__6128__8;
  G__6128.cljs$core$IFn$_invoke$arity$9 = G__6128__9;
  G__6128.cljs$core$IFn$_invoke$arity$10 = G__6128__10;
  G__6128.cljs$core$IFn$_invoke$arity$11 = G__6128__11;
  G__6128.cljs$core$IFn$_invoke$arity$12 = G__6128__12;
  G__6128.cljs$core$IFn$_invoke$arity$13 = G__6128__13;
  G__6128.cljs$core$IFn$_invoke$arity$14 = G__6128__14;
  G__6128.cljs$core$IFn$_invoke$arity$15 = G__6128__15;
  G__6128.cljs$core$IFn$_invoke$arity$16 = G__6128__16;
  G__6128.cljs$core$IFn$_invoke$arity$17 = G__6128__17;
  G__6128.cljs$core$IFn$_invoke$arity$18 = G__6128__18;
  G__6128.cljs$core$IFn$_invoke$arity$19 = G__6128__19;
  G__6128.cljs$core$IFn$_invoke$arity$20 = G__6128__20;
  G__6128.cljs$core$IFn$_invoke$arity$21 = G__6128__21;
  G__6128.cljs$core$IFn$_invoke$arity$22 = G__6128__22;
  return G__6128;
}();
cljs.core.Var.prototype.apply = function(self__, args6083) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6083)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__6106 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__6107 = a;
  var G__6108 = b;
  var G__6109 = c;
  var G__6110 = d;
  var G__6111 = e;
  var G__6112 = f;
  var G__6113 = g;
  var G__6114 = h;
  var G__6115 = i;
  var G__6116 = j;
  var G__6117 = k;
  var G__6118 = l;
  var G__6119 = m;
  var G__6120 = n;
  var G__6121 = o;
  var G__6122 = p;
  var G__6123 = q;
  var G__6124 = r;
  var G__6125 = s;
  var G__6126 = t;
  var G__6127 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6106, G__6107, G__6108, G__6109, G__6110, G__6111, G__6112, G__6113, G__6114, G__6115, G__6116, G__6117, G__6118, G__6119, G__6120, G__6121, G__6122, G__6123, G__6124, G__6125, G__6126, G__6127) : cljs.core.apply.call(null, G__6106, G__6107, G__6108, G__6109, G__6110, G__6111, G__6112, G__6113, G__6114, G__6115, G__6116, G__6117, G__6118, G__6119, G__6120, G__6121, G__6122, G__6123, G__6124, 
  G__6125, G__6126, G__6127);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function __GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__6130 = x;
  if (G__6130) {
    var bit__4478__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3797__auto__ = bit__4478__auto__;
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return G__6130.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__6130.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6130);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6130);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__6132 = value;
  if (G__6132) {
    var bit__4478__auto__ = G__6132.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4478__auto__ || G__6132.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__6132.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6132);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6132);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6134 = coll;
      if (G__6134) {
        var bit__4471__auto__ = G__6134.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4471__auto__ || G__6134.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6136 = coll;
      if (G__6136) {
        var bit__4471__auto__ = G__6136.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4471__auto__ || G__6136.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6138 = coll;
      if (G__6138) {
        var bit__4471__auto__ = G__6138.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4471__auto__ || G__6138.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6140 = coll;
      if (G__6140) {
        var bit__4471__auto__ = G__6140.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4471__auto__ || G__6140.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var _EQ___3 = function() {
    var G__6145__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__6146 = y;
            var G__6147 = cljs.core.first(more);
            var G__6148 = cljs.core.next(more);
            x = G__6146;
            y = G__6147;
            more = G__6148;
            continue;
          } else {
            return _EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6145 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6149__i = 0, G__6149__a = new Array(arguments.length - 2);
        while (G__6149__i < G__6149__a.length) {
          G__6149__a[G__6149__i] = arguments[G__6149__i + 2];
          ++G__6149__i;
        }
        more = new cljs.core.IndexedSeq(G__6149__a, 0);
      }
      return G__6145__delegate.call(this, x, y, more);
    };
    G__6145.cljs$lang$maxFixedArity = 2;
    G__6145.cljs$lang$applyTo = function(arglist__6150) {
      var x = cljs.core.first(arglist__6150);
      arglist__6150 = cljs.core.next(arglist__6150);
      var y = cljs.core.first(arglist__6150);
      var more = cljs.core.rest(arglist__6150);
      return G__6145__delegate(x, y, more);
    };
    G__6145.cljs$core$IFn$_invoke$arity$variadic = G__6145__delegate;
    return G__6145;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        var G__6151 = null;
        if (arguments.length > 2) {
          var G__6152__i = 0, G__6152__a = new Array(arguments.length - 2);
          while (G__6152__i < G__6152__a.length) {
            G__6152__a[G__6152__i] = arguments[G__6152__i + 2];
            ++G__6152__i;
          }
          G__6151 = new cljs.core.IndexedSeq(G__6152__a, 0);
        }
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6151);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__6153 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__6153) : cljs.core.es6_iterator_seq.call(null, G__6153);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function __GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6154 = n + 1;
      var G__6155 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6156 = cljs.core.next(coll__$1);
      n = G__6154;
      hash_code = G__6155;
      coll__$1 = G__6156;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6157 = n + 1;
      var G__6158 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6159 = cljs.core.next(coll__$1);
      n = G__6157;
      hash_code = G__6158;
      coll__$1 = G__6159;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__6160 = o;
  return goog.getUid(G__6160);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__6162 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__6162) : cljs.core.deref.call(null, G__6162);
  } else {
    return x;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__6169 = val;
            var G__6170 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6169, G__6170) : f.call(null, G__6169, G__6170);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__6175 = nval;
            var G__6176 = n + 1;
            val = G__6175;
            n = G__6176;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6171 = val__$1;
          var G__6172 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6171, G__6172) : f.call(null, G__6171, G__6172);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6177 = nval;
          var G__6178 = n + 1;
          val__$1 = G__6177;
          n = G__6178;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6173 = val__$1;
          var G__6174 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6173, G__6174) : f.call(null, G__6173, G__6174);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6179 = nval;
          var G__6180 = n + 1;
          val__$1 = G__6179;
          n = G__6180;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__6187 = val;
            var G__6188 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6187, G__6188) : f.call(null, G__6187, G__6188);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__6193 = nval;
            var G__6194 = n + 1;
            val = G__6193;
            n = G__6194;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6189 = val__$1;
          var G__6190 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6189, G__6190) : f.call(null, G__6189, G__6190);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6195 = nval;
          var G__6196 = n + 1;
          val__$1 = G__6195;
          n = G__6196;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6191 = val__$1;
          var G__6192 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6191, G__6192) : f.call(null, G__6191, G__6192);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6197 = nval;
          var G__6198 = n + 1;
          val__$1 = G__6197;
          n = G__6198;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__6200 = x;
  if (G__6200) {
    var bit__4478__auto__ = G__6200.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4478__auto__ || G__6200.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__6200.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6200);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6200);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__6202 = x;
  if (G__6202) {
    var bit__4478__auto__ = G__6202.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4478__auto__ || G__6202.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__6202.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6202);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6202);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6203 = coll__$1;
  var G__6204 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6203, G__6204) : cljs.core.equiv_sequential.call(null, G__6203, G__6204);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6205 = o;
  var G__6206 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6205, G__6206) : cljs.core.cons.call(null, G__6205, G__6206);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6209 = coll__$1;
  var G__6210 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6209, G__6210) : cljs.core.equiv_sequential.call(null, G__6209, G__6210);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__6211 = cljs.core.List.EMPTY;
  var G__6212 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__6211, G__6212) : cljs.core.with_meta.call(null, G__6211, G__6212);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__6213 = f;
  var G__6214 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__6213, G__6214) : cljs.core.seq_reduce.call(null, G__6213, G__6214);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__6215 = f;
  var G__6216 = start;
  var G__6217 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__6215, G__6216, G__6217) : cljs.core.seq_reduce.call(null, G__6215, G__6216, G__6217);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6218 = o;
  var G__6219 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6218, G__6219) : cljs.core.cons.call(null, G__6218, G__6219);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.second = function second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__6220 = sn;
      s = G__6220;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__6225__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__6226 = conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__6227 = cljs.core.first(xs);
          var G__6228 = cljs.core.next(xs);
          coll = G__6226;
          x = G__6227;
          xs = G__6228;
          continue;
        } else {
          return conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__6225 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__6229__i = 0, G__6229__a = new Array(arguments.length - 2);
        while (G__6229__i < G__6229__a.length) {
          G__6229__a[G__6229__i] = arguments[G__6229__i + 2];
          ++G__6229__i;
        }
        xs = new cljs.core.IndexedSeq(G__6229__a, 0);
      }
      return G__6225__delegate.call(this, coll, x, xs);
    };
    G__6225.cljs$lang$maxFixedArity = 2;
    G__6225.cljs$lang$applyTo = function(arglist__6230) {
      var coll = cljs.core.first(arglist__6230);
      arglist__6230 = cljs.core.next(arglist__6230);
      var x = cljs.core.first(arglist__6230);
      var xs = cljs.core.rest(arglist__6230);
      return G__6225__delegate(coll, x, xs);
    };
    G__6225.cljs$core$IFn$_invoke$arity$variadic = G__6225__delegate;
    return G__6225;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        var G__6231 = null;
        if (arguments.length > 2) {
          var G__6232__i = 0, G__6232__a = new Array(arguments.length - 2);
          while (G__6232__i < G__6232__a.length) {
            G__6232__a[G__6232__i] = arguments[G__6232__i + 2];
            ++G__6232__i;
          }
          G__6231 = new cljs.core.IndexedSeq(G__6232__a, 0);
        }
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__6231);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__6233 = cljs.core.next(s);
      var G__6234 = acc + 1;
      s = G__6233;
      acc = G__6234;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6236 = coll;
      if (G__6236) {
        var bit__4471__auto__ = G__6236.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4471__auto__ || G__6236.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__6237 = cljs.core.next(coll);
              var G__6238 = n - 1;
              coll = G__6237;
              n = G__6238;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__6239 = cljs.core.next(coll);
              var G__6240 = n - 1;
              var G__6241 = not_found;
              coll = G__6239;
              n = G__6240;
              not_found = G__6241;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__6246 = coll;
          if (G__6246) {
            var bit__4471__auto__ = G__6246.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4471__auto__ || G__6246.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__6247 = coll;
                  if (G__6247) {
                    var bit__4478__auto__ = G__6247.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4478__auto__ || G__6247.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6247.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6247);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6247);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__6248 = coll;
          if (G__6248) {
            var bit__4471__auto__ = G__6248.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4471__auto__ || G__6248.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__6249 = coll;
                  if (G__6249) {
                    var bit__4478__auto__ = G__6249.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4478__auto__ || G__6249.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6249.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6249);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6249);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.nthrest = function nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__6250 = n__$1 - 1;
      var G__6251 = cljs.core.rest(xs);
      n__$1 = G__6250;
      xs = G__6251;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__6254 = o;
        if (G__6254) {
          var bit__4471__auto__ = G__6254.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4471__auto__ || G__6254.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__6255 = o;
        if (G__6255) {
          var bit__4471__auto__ = G__6255.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4471__auto__ || G__6255.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__6259__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__6260 = ret;
          var G__6261 = cljs.core.first(kvs);
          var G__6262 = cljs.core.second(kvs);
          var G__6263 = cljs.core.nnext(kvs);
          coll = G__6260;
          k = G__6261;
          v = G__6262;
          kvs = G__6263;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__6259 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__6264__i = 0, G__6264__a = new Array(arguments.length - 3);
        while (G__6264__i < G__6264__a.length) {
          G__6264__a[G__6264__i] = arguments[G__6264__i + 3];
          ++G__6264__i;
        }
        kvs = new cljs.core.IndexedSeq(G__6264__a, 0);
      }
      return G__6259__delegate.call(this, coll, k, v, kvs);
    };
    G__6259.cljs$lang$maxFixedArity = 3;
    G__6259.cljs$lang$applyTo = function(arglist__6265) {
      var coll = cljs.core.first(arglist__6265);
      arglist__6265 = cljs.core.next(arglist__6265);
      var k = cljs.core.first(arglist__6265);
      arglist__6265 = cljs.core.next(arglist__6265);
      var v = cljs.core.first(arglist__6265);
      var kvs = cljs.core.rest(arglist__6265);
      return G__6259__delegate(coll, k, v, kvs);
    };
    G__6259.cljs$core$IFn$_invoke$arity$variadic = G__6259__delegate;
    return G__6259;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        var G__6266 = null;
        if (arguments.length > 3) {
          var G__6267__i = 0, G__6267__a = new Array(arguments.length - 3);
          while (G__6267__i < G__6267__a.length) {
            G__6267__a[G__6267__i] = arguments[G__6267__i + 3];
            ++G__6267__i;
          }
          G__6266 = new cljs.core.IndexedSeq(G__6267__a, 0);
        }
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__6266);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__6270__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6271 = ret;
            var G__6272 = cljs.core.first(ks);
            var G__6273 = cljs.core.next(ks);
            coll = G__6271;
            k = G__6272;
            ks = G__6273;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6270 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__6274__i = 0, G__6274__a = new Array(arguments.length - 2);
        while (G__6274__i < G__6274__a.length) {
          G__6274__a[G__6274__i] = arguments[G__6274__i + 2];
          ++G__6274__i;
        }
        ks = new cljs.core.IndexedSeq(G__6274__a, 0);
      }
      return G__6270__delegate.call(this, coll, k, ks);
    };
    G__6270.cljs$lang$maxFixedArity = 2;
    G__6270.cljs$lang$applyTo = function(arglist__6275) {
      var coll = cljs.core.first(arglist__6275);
      arglist__6275 = cljs.core.next(arglist__6275);
      var k = cljs.core.first(arglist__6275);
      var ks = cljs.core.rest(arglist__6275);
      return G__6270__delegate(coll, k, ks);
    };
    G__6270.cljs$core$IFn$_invoke$arity$variadic = G__6270__delegate;
    return G__6270;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        var G__6276 = null;
        if (arguments.length > 2) {
          var G__6277__i = 0, G__6277__a = new Array(arguments.length - 2);
          while (G__6277__i < G__6277__a.length) {
            G__6277__a[G__6277__i] = arguments[G__6277__i + 2];
            ++G__6277__i;
          }
          G__6276 = new cljs.core.IndexedSeq(G__6277__a, 0);
        }
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__6276);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3797__auto__ = function() {
    var G__6282 = f;
    return goog.isFunction(G__6282);
  }();
  if (cljs.core.truth_(or__3797__auto__)) {
    return or__3797__auto__;
  } else {
    var G__6283 = f;
    if (G__6283) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto____$1 = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto____$1)) {
          return or__3797__auto____$1;
        } else {
          return G__6283.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__6283.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__6283);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__6283);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__6749 = null;
  var G__6749__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__6749__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6285 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__6285) : self__.afn.call(null, G__6285);
  };
  var G__6749__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6286 = a;
    var G__6287 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__6286, G__6287) : self__.afn.call(null, G__6286, G__6287);
  };
  var G__6749__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6288 = a;
    var G__6289 = b;
    var G__6290 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__6288, G__6289, G__6290) : self__.afn.call(null, G__6288, G__6289, G__6290);
  };
  var G__6749__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6291 = a;
    var G__6292 = b;
    var G__6293 = c;
    var G__6294 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__6291, G__6292, G__6293, G__6294) : self__.afn.call(null, G__6291, G__6292, G__6293, G__6294);
  };
  var G__6749__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6295 = a;
    var G__6296 = b;
    var G__6297 = c;
    var G__6298 = d;
    var G__6299 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__6295, G__6296, G__6297, G__6298, G__6299) : self__.afn.call(null, G__6295, G__6296, G__6297, G__6298, G__6299);
  };
  var G__6749__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6300 = a;
    var G__6301 = b;
    var G__6302 = c;
    var G__6303 = d;
    var G__6304 = e;
    var G__6305 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__6300, G__6301, G__6302, G__6303, G__6304, G__6305) : self__.afn.call(null, G__6300, G__6301, G__6302, G__6303, G__6304, G__6305);
  };
  var G__6749__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6306 = a;
    var G__6307 = b;
    var G__6308 = c;
    var G__6309 = d;
    var G__6310 = e;
    var G__6311 = f;
    var G__6312 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__6306, G__6307, G__6308, G__6309, G__6310, G__6311, G__6312) : self__.afn.call(null, G__6306, G__6307, G__6308, G__6309, G__6310, G__6311, G__6312);
  };
  var G__6749__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6313 = a;
    var G__6314 = b;
    var G__6315 = c;
    var G__6316 = d;
    var G__6317 = e;
    var G__6318 = f;
    var G__6319 = g;
    var G__6320 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__6313, G__6314, G__6315, G__6316, G__6317, G__6318, G__6319, G__6320) : self__.afn.call(null, G__6313, G__6314, G__6315, G__6316, G__6317, G__6318, G__6319, G__6320);
  };
  var G__6749__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6321 = a;
    var G__6322 = b;
    var G__6323 = c;
    var G__6324 = d;
    var G__6325 = e;
    var G__6326 = f;
    var G__6327 = g;
    var G__6328 = h;
    var G__6329 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__6321, G__6322, G__6323, G__6324, G__6325, G__6326, G__6327, G__6328, G__6329) : self__.afn.call(null, G__6321, G__6322, G__6323, G__6324, G__6325, G__6326, G__6327, G__6328, G__6329);
  };
  var G__6749__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6330 = a;
    var G__6331 = b;
    var G__6332 = c;
    var G__6333 = d;
    var G__6334 = e;
    var G__6335 = f;
    var G__6336 = g;
    var G__6337 = h;
    var G__6338 = i;
    var G__6339 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__6330, G__6331, G__6332, G__6333, G__6334, G__6335, G__6336, G__6337, G__6338, G__6339) : self__.afn.call(null, G__6330, G__6331, G__6332, G__6333, G__6334, G__6335, G__6336, G__6337, G__6338, G__6339);
  };
  var G__6749__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6340 = a;
    var G__6341 = b;
    var G__6342 = c;
    var G__6343 = d;
    var G__6344 = e;
    var G__6345 = f;
    var G__6346 = g;
    var G__6347 = h;
    var G__6348 = i;
    var G__6349 = j;
    var G__6350 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__6340, G__6341, G__6342, G__6343, G__6344, G__6345, G__6346, G__6347, G__6348, G__6349, G__6350) : self__.afn.call(null, G__6340, G__6341, G__6342, G__6343, G__6344, G__6345, G__6346, G__6347, G__6348, G__6349, G__6350);
  };
  var G__6749__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6351 = a;
    var G__6352 = b;
    var G__6353 = c;
    var G__6354 = d;
    var G__6355 = e;
    var G__6356 = f;
    var G__6357 = g;
    var G__6358 = h;
    var G__6359 = i;
    var G__6360 = j;
    var G__6361 = k;
    var G__6362 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__6351, G__6352, G__6353, G__6354, G__6355, G__6356, G__6357, G__6358, G__6359, G__6360, G__6361, G__6362) : self__.afn.call(null, G__6351, G__6352, G__6353, G__6354, G__6355, G__6356, G__6357, G__6358, G__6359, G__6360, G__6361, G__6362);
  };
  var G__6749__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6363 = a;
    var G__6364 = b;
    var G__6365 = c;
    var G__6366 = d;
    var G__6367 = e;
    var G__6368 = f;
    var G__6369 = g;
    var G__6370 = h;
    var G__6371 = i;
    var G__6372 = j;
    var G__6373 = k;
    var G__6374 = l;
    var G__6375 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__6363, G__6364, G__6365, G__6366, G__6367, G__6368, G__6369, G__6370, G__6371, G__6372, G__6373, G__6374, G__6375) : self__.afn.call(null, G__6363, G__6364, G__6365, G__6366, G__6367, G__6368, G__6369, G__6370, G__6371, G__6372, G__6373, G__6374, G__6375);
  };
  var G__6749__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6376 = a;
    var G__6377 = b;
    var G__6378 = c;
    var G__6379 = d;
    var G__6380 = e;
    var G__6381 = f;
    var G__6382 = g;
    var G__6383 = h;
    var G__6384 = i;
    var G__6385 = j;
    var G__6386 = k;
    var G__6387 = l;
    var G__6388 = m;
    var G__6389 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__6376, G__6377, G__6378, G__6379, G__6380, G__6381, G__6382, G__6383, G__6384, G__6385, G__6386, G__6387, G__6388, G__6389) : self__.afn.call(null, G__6376, G__6377, G__6378, G__6379, G__6380, G__6381, G__6382, G__6383, G__6384, G__6385, G__6386, G__6387, G__6388, G__6389);
  };
  var G__6749__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6390 = a;
    var G__6391 = b;
    var G__6392 = c;
    var G__6393 = d;
    var G__6394 = e;
    var G__6395 = f;
    var G__6396 = g;
    var G__6397 = h;
    var G__6398 = i;
    var G__6399 = j;
    var G__6400 = k;
    var G__6401 = l;
    var G__6402 = m;
    var G__6403 = n;
    var G__6404 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__6390, G__6391, G__6392, G__6393, G__6394, G__6395, G__6396, G__6397, G__6398, G__6399, G__6400, G__6401, G__6402, G__6403, G__6404) : self__.afn.call(null, G__6390, G__6391, G__6392, G__6393, G__6394, G__6395, G__6396, G__6397, G__6398, G__6399, G__6400, G__6401, G__6402, G__6403, G__6404);
  };
  var G__6749__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6405 = a;
    var G__6406 = b;
    var G__6407 = c;
    var G__6408 = d;
    var G__6409 = e;
    var G__6410 = f;
    var G__6411 = g;
    var G__6412 = h;
    var G__6413 = i;
    var G__6414 = j;
    var G__6415 = k;
    var G__6416 = l;
    var G__6417 = m;
    var G__6418 = n;
    var G__6419 = o;
    var G__6420 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__6405, G__6406, G__6407, G__6408, G__6409, G__6410, G__6411, G__6412, G__6413, G__6414, G__6415, G__6416, G__6417, G__6418, G__6419, G__6420) : self__.afn.call(null, G__6405, G__6406, G__6407, G__6408, G__6409, G__6410, G__6411, G__6412, G__6413, G__6414, G__6415, G__6416, G__6417, G__6418, G__6419, G__6420);
  };
  var G__6749__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6421 = a;
    var G__6422 = b;
    var G__6423 = c;
    var G__6424 = d;
    var G__6425 = e;
    var G__6426 = f;
    var G__6427 = g;
    var G__6428 = h;
    var G__6429 = i;
    var G__6430 = j;
    var G__6431 = k;
    var G__6432 = l;
    var G__6433 = m;
    var G__6434 = n;
    var G__6435 = o;
    var G__6436 = p;
    var G__6437 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__6421, G__6422, G__6423, G__6424, G__6425, G__6426, G__6427, G__6428, G__6429, G__6430, G__6431, G__6432, G__6433, G__6434, G__6435, G__6436, G__6437) : self__.afn.call(null, G__6421, G__6422, G__6423, G__6424, G__6425, G__6426, G__6427, G__6428, G__6429, G__6430, G__6431, G__6432, G__6433, G__6434, G__6435, G__6436, G__6437);
  };
  var G__6749__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6438 = a;
    var G__6439 = b;
    var G__6440 = c;
    var G__6441 = d;
    var G__6442 = e;
    var G__6443 = f;
    var G__6444 = g;
    var G__6445 = h;
    var G__6446 = i;
    var G__6447 = j;
    var G__6448 = k;
    var G__6449 = l;
    var G__6450 = m;
    var G__6451 = n;
    var G__6452 = o;
    var G__6453 = p;
    var G__6454 = q;
    var G__6455 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__6438, G__6439, G__6440, G__6441, G__6442, G__6443, G__6444, G__6445, G__6446, G__6447, G__6448, G__6449, G__6450, G__6451, G__6452, G__6453, G__6454, G__6455) : self__.afn.call(null, G__6438, G__6439, G__6440, G__6441, G__6442, G__6443, G__6444, G__6445, G__6446, G__6447, G__6448, G__6449, G__6450, G__6451, G__6452, G__6453, G__6454, G__6455);
  };
  var G__6749__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6456 = a;
    var G__6457 = b;
    var G__6458 = c;
    var G__6459 = d;
    var G__6460 = e;
    var G__6461 = f;
    var G__6462 = g;
    var G__6463 = h;
    var G__6464 = i;
    var G__6465 = j;
    var G__6466 = k;
    var G__6467 = l;
    var G__6468 = m;
    var G__6469 = n;
    var G__6470 = o;
    var G__6471 = p;
    var G__6472 = q;
    var G__6473 = r;
    var G__6474 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__6456, G__6457, G__6458, G__6459, G__6460, G__6461, G__6462, G__6463, G__6464, G__6465, G__6466, G__6467, G__6468, G__6469, G__6470, G__6471, G__6472, G__6473, G__6474) : self__.afn.call(null, G__6456, G__6457, G__6458, G__6459, G__6460, G__6461, G__6462, G__6463, G__6464, G__6465, G__6466, G__6467, G__6468, G__6469, G__6470, G__6471, G__6472, G__6473, G__6474);
  };
  var G__6749__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6475 = a;
    var G__6476 = b;
    var G__6477 = c;
    var G__6478 = d;
    var G__6479 = e;
    var G__6480 = f;
    var G__6481 = g;
    var G__6482 = h;
    var G__6483 = i;
    var G__6484 = j;
    var G__6485 = k;
    var G__6486 = l;
    var G__6487 = m;
    var G__6488 = n;
    var G__6489 = o;
    var G__6490 = p;
    var G__6491 = q;
    var G__6492 = r;
    var G__6493 = s;
    var G__6494 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__6475, G__6476, G__6477, G__6478, G__6479, G__6480, G__6481, G__6482, G__6483, G__6484, G__6485, G__6486, G__6487, G__6488, G__6489, G__6490, G__6491, G__6492, G__6493, G__6494) : self__.afn.call(null, G__6475, G__6476, G__6477, G__6478, G__6479, G__6480, G__6481, G__6482, G__6483, G__6484, G__6485, G__6486, G__6487, G__6488, G__6489, G__6490, G__6491, G__6492, G__6493, G__6494);
  };
  var G__6749__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6495 = self__.afn;
    var G__6496 = a;
    var G__6497 = b;
    var G__6498 = c;
    var G__6499 = d;
    var G__6500 = e;
    var G__6501 = f;
    var G__6502 = g;
    var G__6503 = h;
    var G__6504 = i;
    var G__6505 = j;
    var G__6506 = k;
    var G__6507 = l;
    var G__6508 = m;
    var G__6509 = n;
    var G__6510 = o;
    var G__6511 = p;
    var G__6512 = q;
    var G__6513 = r;
    var G__6514 = s;
    var G__6515 = t;
    var G__6516 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6495, G__6496, G__6497, G__6498, G__6499, G__6500, G__6501, G__6502, G__6503, G__6504, G__6505, G__6506, G__6507, G__6508, G__6509, G__6510, G__6511, G__6512, G__6513, G__6514, G__6515, G__6516) : cljs.core.apply.call(null, G__6495, G__6496, G__6497, G__6498, G__6499, G__6500, G__6501, G__6502, G__6503, G__6504, G__6505, G__6506, G__6507, G__6508, G__6509, G__6510, G__6511, G__6512, G__6513, 
    G__6514, G__6515, G__6516);
  };
  G__6749 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6749__1.call(this, self__);
      case 2:
        return G__6749__2.call(this, self__, a);
      case 3:
        return G__6749__3.call(this, self__, a, b);
      case 4:
        return G__6749__4.call(this, self__, a, b, c);
      case 5:
        return G__6749__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6749__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6749__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6749__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6749__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6749__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6749__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6749__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6749__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6749__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6749__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6749__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6749__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6749__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6749__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6749__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6749__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6749__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6749.cljs$core$IFn$_invoke$arity$1 = G__6749__1;
  G__6749.cljs$core$IFn$_invoke$arity$2 = G__6749__2;
  G__6749.cljs$core$IFn$_invoke$arity$3 = G__6749__3;
  G__6749.cljs$core$IFn$_invoke$arity$4 = G__6749__4;
  G__6749.cljs$core$IFn$_invoke$arity$5 = G__6749__5;
  G__6749.cljs$core$IFn$_invoke$arity$6 = G__6749__6;
  G__6749.cljs$core$IFn$_invoke$arity$7 = G__6749__7;
  G__6749.cljs$core$IFn$_invoke$arity$8 = G__6749__8;
  G__6749.cljs$core$IFn$_invoke$arity$9 = G__6749__9;
  G__6749.cljs$core$IFn$_invoke$arity$10 = G__6749__10;
  G__6749.cljs$core$IFn$_invoke$arity$11 = G__6749__11;
  G__6749.cljs$core$IFn$_invoke$arity$12 = G__6749__12;
  G__6749.cljs$core$IFn$_invoke$arity$13 = G__6749__13;
  G__6749.cljs$core$IFn$_invoke$arity$14 = G__6749__14;
  G__6749.cljs$core$IFn$_invoke$arity$15 = G__6749__15;
  G__6749.cljs$core$IFn$_invoke$arity$16 = G__6749__16;
  G__6749.cljs$core$IFn$_invoke$arity$17 = G__6749__17;
  G__6749.cljs$core$IFn$_invoke$arity$18 = G__6749__18;
  G__6749.cljs$core$IFn$_invoke$arity$19 = G__6749__19;
  G__6749.cljs$core$IFn$_invoke$arity$20 = G__6749__20;
  G__6749.cljs$core$IFn$_invoke$arity$21 = G__6749__21;
  G__6749.cljs$core$IFn$_invoke$arity$22 = G__6749__22;
  return G__6749;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args6284) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6284)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__6517 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__6517) : self__.afn.call(null, G__6517);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__6518 = a;
  var G__6519 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__6518, G__6519) : self__.afn.call(null, G__6518, G__6519);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__6520 = a;
  var G__6521 = b;
  var G__6522 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__6520, G__6521, G__6522) : self__.afn.call(null, G__6520, G__6521, G__6522);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__6523 = a;
  var G__6524 = b;
  var G__6525 = c;
  var G__6526 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__6523, G__6524, G__6525, G__6526) : self__.afn.call(null, G__6523, G__6524, G__6525, G__6526);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__6527 = a;
  var G__6528 = b;
  var G__6529 = c;
  var G__6530 = d;
  var G__6531 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__6527, G__6528, G__6529, G__6530, G__6531) : self__.afn.call(null, G__6527, G__6528, G__6529, G__6530, G__6531);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__6532 = a;
  var G__6533 = b;
  var G__6534 = c;
  var G__6535 = d;
  var G__6536 = e;
  var G__6537 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__6532, G__6533, G__6534, G__6535, G__6536, G__6537) : self__.afn.call(null, G__6532, G__6533, G__6534, G__6535, G__6536, G__6537);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__6538 = a;
  var G__6539 = b;
  var G__6540 = c;
  var G__6541 = d;
  var G__6542 = e;
  var G__6543 = f;
  var G__6544 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__6538, G__6539, G__6540, G__6541, G__6542, G__6543, G__6544) : self__.afn.call(null, G__6538, G__6539, G__6540, G__6541, G__6542, G__6543, G__6544);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__6545 = a;
  var G__6546 = b;
  var G__6547 = c;
  var G__6548 = d;
  var G__6549 = e;
  var G__6550 = f;
  var G__6551 = g;
  var G__6552 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__6545, G__6546, G__6547, G__6548, G__6549, G__6550, G__6551, G__6552) : self__.afn.call(null, G__6545, G__6546, G__6547, G__6548, G__6549, G__6550, G__6551, G__6552);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__6553 = a;
  var G__6554 = b;
  var G__6555 = c;
  var G__6556 = d;
  var G__6557 = e;
  var G__6558 = f;
  var G__6559 = g;
  var G__6560 = h;
  var G__6561 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__6553, G__6554, G__6555, G__6556, G__6557, G__6558, G__6559, G__6560, G__6561) : self__.afn.call(null, G__6553, G__6554, G__6555, G__6556, G__6557, G__6558, G__6559, G__6560, G__6561);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__6562 = a;
  var G__6563 = b;
  var G__6564 = c;
  var G__6565 = d;
  var G__6566 = e;
  var G__6567 = f;
  var G__6568 = g;
  var G__6569 = h;
  var G__6570 = i;
  var G__6571 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__6562, G__6563, G__6564, G__6565, G__6566, G__6567, G__6568, G__6569, G__6570, G__6571) : self__.afn.call(null, G__6562, G__6563, G__6564, G__6565, G__6566, G__6567, G__6568, G__6569, G__6570, G__6571);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__6572 = a;
  var G__6573 = b;
  var G__6574 = c;
  var G__6575 = d;
  var G__6576 = e;
  var G__6577 = f;
  var G__6578 = g;
  var G__6579 = h;
  var G__6580 = i;
  var G__6581 = j;
  var G__6582 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__6572, G__6573, G__6574, G__6575, G__6576, G__6577, G__6578, G__6579, G__6580, G__6581, G__6582) : self__.afn.call(null, G__6572, G__6573, G__6574, G__6575, G__6576, G__6577, G__6578, G__6579, G__6580, G__6581, G__6582);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__6583 = a;
  var G__6584 = b;
  var G__6585 = c;
  var G__6586 = d;
  var G__6587 = e;
  var G__6588 = f;
  var G__6589 = g;
  var G__6590 = h;
  var G__6591 = i;
  var G__6592 = j;
  var G__6593 = k;
  var G__6594 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__6583, G__6584, G__6585, G__6586, G__6587, G__6588, G__6589, G__6590, G__6591, G__6592, G__6593, G__6594) : self__.afn.call(null, G__6583, G__6584, G__6585, G__6586, G__6587, G__6588, G__6589, G__6590, G__6591, G__6592, G__6593, G__6594);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__6595 = a;
  var G__6596 = b;
  var G__6597 = c;
  var G__6598 = d;
  var G__6599 = e;
  var G__6600 = f;
  var G__6601 = g;
  var G__6602 = h;
  var G__6603 = i;
  var G__6604 = j;
  var G__6605 = k;
  var G__6606 = l;
  var G__6607 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__6595, G__6596, G__6597, G__6598, G__6599, G__6600, G__6601, G__6602, G__6603, G__6604, G__6605, G__6606, G__6607) : self__.afn.call(null, G__6595, G__6596, G__6597, G__6598, G__6599, G__6600, G__6601, G__6602, G__6603, G__6604, G__6605, G__6606, G__6607);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__6608 = a;
  var G__6609 = b;
  var G__6610 = c;
  var G__6611 = d;
  var G__6612 = e;
  var G__6613 = f;
  var G__6614 = g;
  var G__6615 = h;
  var G__6616 = i;
  var G__6617 = j;
  var G__6618 = k;
  var G__6619 = l;
  var G__6620 = m;
  var G__6621 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__6608, G__6609, G__6610, G__6611, G__6612, G__6613, G__6614, G__6615, G__6616, G__6617, G__6618, G__6619, G__6620, G__6621) : self__.afn.call(null, G__6608, G__6609, G__6610, G__6611, G__6612, G__6613, G__6614, G__6615, G__6616, G__6617, G__6618, G__6619, G__6620, G__6621);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__6622 = a;
  var G__6623 = b;
  var G__6624 = c;
  var G__6625 = d;
  var G__6626 = e;
  var G__6627 = f;
  var G__6628 = g;
  var G__6629 = h;
  var G__6630 = i;
  var G__6631 = j;
  var G__6632 = k;
  var G__6633 = l;
  var G__6634 = m;
  var G__6635 = n;
  var G__6636 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__6622, G__6623, G__6624, G__6625, G__6626, G__6627, G__6628, G__6629, G__6630, G__6631, G__6632, G__6633, G__6634, G__6635, G__6636) : self__.afn.call(null, G__6622, G__6623, G__6624, G__6625, G__6626, G__6627, G__6628, G__6629, G__6630, G__6631, G__6632, G__6633, G__6634, G__6635, G__6636);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__6637 = a;
  var G__6638 = b;
  var G__6639 = c;
  var G__6640 = d;
  var G__6641 = e;
  var G__6642 = f;
  var G__6643 = g;
  var G__6644 = h;
  var G__6645 = i;
  var G__6646 = j;
  var G__6647 = k;
  var G__6648 = l;
  var G__6649 = m;
  var G__6650 = n;
  var G__6651 = o;
  var G__6652 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__6637, G__6638, G__6639, G__6640, G__6641, G__6642, G__6643, G__6644, G__6645, G__6646, G__6647, G__6648, G__6649, G__6650, G__6651, G__6652) : self__.afn.call(null, G__6637, G__6638, G__6639, G__6640, G__6641, G__6642, G__6643, G__6644, G__6645, G__6646, G__6647, G__6648, G__6649, G__6650, G__6651, G__6652);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__6653 = a;
  var G__6654 = b;
  var G__6655 = c;
  var G__6656 = d;
  var G__6657 = e;
  var G__6658 = f;
  var G__6659 = g;
  var G__6660 = h;
  var G__6661 = i;
  var G__6662 = j;
  var G__6663 = k;
  var G__6664 = l;
  var G__6665 = m;
  var G__6666 = n;
  var G__6667 = o;
  var G__6668 = p;
  var G__6669 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__6653, G__6654, G__6655, G__6656, G__6657, G__6658, G__6659, G__6660, G__6661, G__6662, G__6663, G__6664, G__6665, G__6666, G__6667, G__6668, G__6669) : self__.afn.call(null, G__6653, G__6654, G__6655, G__6656, G__6657, G__6658, G__6659, G__6660, G__6661, G__6662, G__6663, G__6664, G__6665, G__6666, G__6667, G__6668, G__6669);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__6670 = a;
  var G__6671 = b;
  var G__6672 = c;
  var G__6673 = d;
  var G__6674 = e;
  var G__6675 = f;
  var G__6676 = g;
  var G__6677 = h;
  var G__6678 = i;
  var G__6679 = j;
  var G__6680 = k;
  var G__6681 = l;
  var G__6682 = m;
  var G__6683 = n;
  var G__6684 = o;
  var G__6685 = p;
  var G__6686 = q;
  var G__6687 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__6670, G__6671, G__6672, G__6673, G__6674, G__6675, G__6676, G__6677, G__6678, G__6679, G__6680, G__6681, G__6682, G__6683, G__6684, G__6685, G__6686, G__6687) : self__.afn.call(null, G__6670, G__6671, G__6672, G__6673, G__6674, G__6675, G__6676, G__6677, G__6678, G__6679, G__6680, G__6681, G__6682, G__6683, G__6684, G__6685, G__6686, G__6687);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__6688 = a;
  var G__6689 = b;
  var G__6690 = c;
  var G__6691 = d;
  var G__6692 = e;
  var G__6693 = f;
  var G__6694 = g;
  var G__6695 = h;
  var G__6696 = i;
  var G__6697 = j;
  var G__6698 = k;
  var G__6699 = l;
  var G__6700 = m;
  var G__6701 = n;
  var G__6702 = o;
  var G__6703 = p;
  var G__6704 = q;
  var G__6705 = r;
  var G__6706 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__6688, G__6689, G__6690, G__6691, G__6692, G__6693, G__6694, G__6695, G__6696, G__6697, G__6698, G__6699, G__6700, G__6701, G__6702, G__6703, G__6704, G__6705, G__6706) : self__.afn.call(null, G__6688, G__6689, G__6690, G__6691, G__6692, G__6693, G__6694, G__6695, G__6696, G__6697, G__6698, G__6699, G__6700, G__6701, G__6702, G__6703, G__6704, G__6705, G__6706);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__6707 = a;
  var G__6708 = b;
  var G__6709 = c;
  var G__6710 = d;
  var G__6711 = e;
  var G__6712 = f;
  var G__6713 = g;
  var G__6714 = h;
  var G__6715 = i;
  var G__6716 = j;
  var G__6717 = k;
  var G__6718 = l;
  var G__6719 = m;
  var G__6720 = n;
  var G__6721 = o;
  var G__6722 = p;
  var G__6723 = q;
  var G__6724 = r;
  var G__6725 = s;
  var G__6726 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__6707, G__6708, G__6709, G__6710, G__6711, G__6712, G__6713, G__6714, G__6715, G__6716, G__6717, G__6718, G__6719, G__6720, G__6721, G__6722, G__6723, G__6724, G__6725, G__6726) : self__.afn.call(null, G__6707, G__6708, G__6709, G__6710, G__6711, G__6712, G__6713, G__6714, G__6715, G__6716, G__6717, G__6718, G__6719, G__6720, G__6721, G__6722, G__6723, G__6724, G__6725, G__6726);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__6727 = self__.afn;
  var G__6728 = a;
  var G__6729 = b;
  var G__6730 = c;
  var G__6731 = d;
  var G__6732 = e;
  var G__6733 = f;
  var G__6734 = g;
  var G__6735 = h;
  var G__6736 = i;
  var G__6737 = j;
  var G__6738 = k;
  var G__6739 = l;
  var G__6740 = m;
  var G__6741 = n;
  var G__6742 = o;
  var G__6743 = p;
  var G__6744 = q;
  var G__6745 = r;
  var G__6746 = s;
  var G__6747 = t;
  var G__6748 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6727, G__6728, G__6729, G__6730, G__6731, G__6732, G__6733, G__6734, G__6735, G__6736, G__6737, G__6738, G__6739, G__6740, G__6741, G__6742, G__6743, G__6744, G__6745, G__6746, G__6747, G__6748) : cljs.core.apply.call(null, G__6727, G__6728, G__6729, G__6730, G__6731, G__6732, G__6733, G__6734, G__6735, G__6736, G__6737, G__6738, G__6739, G__6740, G__6741, G__6742, G__6743, G__6744, G__6745, 
  G__6746, G__6747, G__6748);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__6753 = o;
    if (G__6753) {
      var bit__4478__auto__ = G__6753.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4478__auto__ || G__6753.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__6753.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__6753);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__6753);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3785__auto__ = !(o == null);
    if (and__3785__auto__) {
      var G__6757 = o;
      if (G__6757) {
        var bit__4478__auto__ = G__6757.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4478__auto__ || G__6757.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__6757.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__6757);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__6757);
      }
    } else {
      return and__3785__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var disj__3 = function() {
    var G__6760__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6761 = ret;
            var G__6762 = cljs.core.first(ks);
            var G__6763 = cljs.core.next(ks);
            coll = G__6761;
            k = G__6762;
            ks = G__6763;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6760 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__6764__i = 0, G__6764__a = new Array(arguments.length - 2);
        while (G__6764__i < G__6764__a.length) {
          G__6764__a[G__6764__i] = arguments[G__6764__i + 2];
          ++G__6764__i;
        }
        ks = new cljs.core.IndexedSeq(G__6764__a, 0);
      }
      return G__6760__delegate.call(this, coll, k, ks);
    };
    G__6760.cljs$lang$maxFixedArity = 2;
    G__6760.cljs$lang$applyTo = function(arglist__6765) {
      var coll = cljs.core.first(arglist__6765);
      arglist__6765 = cljs.core.next(arglist__6765);
      var k = cljs.core.first(arglist__6765);
      var ks = cljs.core.rest(arglist__6765);
      return G__6760__delegate(coll, k, ks);
    };
    G__6760.cljs$core$IFn$_invoke$arity$variadic = G__6760__delegate;
    return G__6760;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        var G__6766 = null;
        if (arguments.length > 2) {
          var G__6767__i = 0, G__6767__a = new Array(arguments.length - 2);
          while (G__6767__i < G__6767__a.length) {
            G__6767__a[G__6767__i] = arguments[G__6767__i + 2];
            ++G__6767__i;
          }
          G__6766 = new cljs.core.IndexedSeq(G__6767__a, 0);
        }
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__6766);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6769 = x;
    if (G__6769) {
      var bit__4478__auto__ = G__6769.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4478__auto__ || G__6769.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__6769.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__6769);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__6769);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6771 = x;
    if (G__6771) {
      var bit__4478__auto__ = G__6771.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4478__auto__ || G__6771.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__6771.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__6771);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__6771);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__6773 = x;
  if (G__6773) {
    var bit__4478__auto__ = G__6773.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4478__auto__ || G__6773.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__6773.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__6773);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__6773);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__6775 = x;
  if (G__6775) {
    var bit__4478__auto__ = G__6775.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4478__auto__ || G__6775.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__6775.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__6775);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__6775);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__6777 = x;
  if (G__6777) {
    var bit__4478__auto__ = G__6777.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4478__auto__ || G__6777.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__6777.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__6777);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__6777);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__6779 = x;
  if (G__6779) {
    var bit__4478__auto__ = G__6779.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4478__auto__ || G__6779.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__6779.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__6779);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__6779);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6781 = x;
    if (G__6781) {
      var bit__4478__auto__ = G__6781.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4478__auto__ || G__6781.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__6781.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__6781);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__6781);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__6783 = x;
  if (G__6783) {
    var bit__4478__auto__ = G__6783.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4478__auto__ || G__6783.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__6783.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__6783);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__6783);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__6785 = x;
  if (G__6785) {
    var bit__4471__auto__ = G__6785.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4471__auto__ || G__6785.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj6791 = {};
    return obj6791;
  };
  var js_obj__1 = function() {
    var G__6794__delegate = function(keyvals) {
      var G__6792 = goog.object.create;
      var G__6793 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__6792, G__6793) : cljs.core.apply.call(null, G__6792, G__6793);
    };
    var G__6794 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__6795__i = 0, G__6795__a = new Array(arguments.length - 0);
        while (G__6795__i < G__6795__a.length) {
          G__6795__a[G__6795__i] = arguments[G__6795__i + 0];
          ++G__6795__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__6795__a, 0);
      }
      return G__6794__delegate.call(this, keyvals);
    };
    G__6794.cljs$lang$maxFixedArity = 0;
    G__6794.cljs$lang$applyTo = function(arglist__6796) {
      var keyvals = cljs.core.seq(arglist__6796);
      return G__6794__delegate(keyvals);
    };
    G__6794.cljs$core$IFn$_invoke$arity$variadic = G__6794__delegate;
    return G__6794;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        var G__6797 = null;
        if (arguments.length > 0) {
          var G__6798__i = 0, G__6798__a = new Array(arguments.length - 0);
          while (G__6798__i < G__6798__a.length) {
            G__6798__a[G__6798__i] = arguments[G__6798__i + 0];
            ++G__6798__i;
          }
          G__6797 = new cljs.core.IndexedSeq(G__6798__a, 0);
        }
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__6797);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  var G__6801_6803 = obj;
  var G__6802_6804 = function(G__6801_6803, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__6801_6803, keys);
  goog.object.forEach(G__6801_6803, G__6802_6804);
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6805 = i__$1 + 1;
      var G__6806 = j__$1 + 1;
      var G__6807 = len__$1 - 1;
      i__$1 = G__6805;
      j__$1 = G__6806;
      len__$1 = G__6807;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6808 = i__$1 - 1;
      var G__6809 = j__$1 - 1;
      var G__6810 = len__$1 - 1;
      i__$1 = G__6808;
      j__$1 = G__6809;
      len__$1 = G__6810;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj6812 = {};
  return obj6812;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__6814 = s;
    if (G__6814) {
      var bit__4478__auto__ = G__6814.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4478__auto__ || G__6814.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__6814.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6814);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6814);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__6816 = s;
  if (G__6816) {
    var bit__4478__auto__ = G__6816.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4478__auto__ || G__6816.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__6816.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__6816);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__6816);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3797__auto__ = cljs.core.fn_QMARK_(f);
  if (or__3797__auto__) {
    return or__3797__auto__;
  } else {
    var G__6820 = f;
    if (G__6820) {
      var bit__4478__auto__ = G__6820.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4478__auto__ || G__6820.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__6820.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__6820);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__6820);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__6833 = n;
    return isNaN(G__6833);
  }()) && !(n === Infinity) && function() {
    var G__6834 = n;
    return parseFloat(G__6834);
  }() === function() {
    var G__6835 = n;
    var G__6836 = 10;
    return parseInt(G__6835, G__6836);
  }();
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__6837__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__6838 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__6839 = etc;
              s = G__6838;
              xs = G__6839;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__6837 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6840__i = 0, G__6840__a = new Array(arguments.length - 2);
        while (G__6840__i < G__6840__a.length) {
          G__6840__a[G__6840__i] = arguments[G__6840__i + 2];
          ++G__6840__i;
        }
        more = new cljs.core.IndexedSeq(G__6840__a, 0);
      }
      return G__6837__delegate.call(this, x, y, more);
    };
    G__6837.cljs$lang$maxFixedArity = 2;
    G__6837.cljs$lang$applyTo = function(arglist__6841) {
      var x = cljs.core.first(arglist__6841);
      arglist__6841 = cljs.core.next(arglist__6841);
      var y = cljs.core.first(arglist__6841);
      var more = cljs.core.rest(arglist__6841);
      return G__6837__delegate(x, y, more);
    };
    G__6837.cljs$core$IFn$_invoke$arity$variadic = G__6837__delegate;
    return G__6837;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        var G__6842 = null;
        if (arguments.length > 2) {
          var G__6843__i = 0, G__6843__a = new Array(arguments.length - 2);
          while (G__6843__i < G__6843__a.length) {
            G__6843__a[G__6843__i] = arguments[G__6843__i + 2];
            ++G__6843__i;
          }
          G__6842 = new cljs.core.IndexedSeq(G__6843__a, 0);
        }
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6842);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__6847 = x;
            if (G__6847) {
              var bit__4471__auto__ = G__6847.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4471__auto__ || G__6847.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__6848 = x;
            var G__6849 = y;
            return goog.array.defaultCompare(G__6848, G__6849);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__6854 = xs;
        var G__6855 = ys;
        var G__6856 = len;
        var G__6857 = n + 1;
        xs = G__6854;
        ys = G__6855;
        len = G__6856;
        n = G__6857;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__6862 = x;
        var G__6863 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6862, G__6863) : f.call(null, G__6862, G__6863);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__6864 = y;
            var G__6865 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6864, G__6865) : f.call(null, G__6864, G__6865);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__6871 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__6871) : cljs.core.to_array.call(null, G__6871);
      }();
      var G__6872_6874 = a;
      var G__6873_6875 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__6872_6874, G__6873_6875);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__6881 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__6881) : keyfn.call(null, G__6881);
      }(), function() {
        var G__6882 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__6882) : keyfn.call(null, G__6882);
      }());
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__6888 = f;
      var G__6889 = cljs.core.first(s);
      var G__6890 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__6888, G__6889, G__6890) : cljs.core.reduce.call(null, G__6888, G__6889, G__6890);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__6891 = val__$1;
          var G__6892 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6891, G__6892) : f.call(null, G__6891, G__6892);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6893 = nval;
          var G__6894 = cljs.core.next(coll__$1);
          val__$1 = G__6893;
          coll__$1 = G__6894;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = function() {
    var G__6898 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__6898) : cljs.core.to_array.call(null, G__6898);
  }();
  var G__6899_6901 = a;
  goog.array.shuffle(G__6899_6901);
  var G__6900 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__6900) : cljs.core.vec.call(null, G__6900);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__6904 = coll;
      if (G__6904) {
        var bit__4471__auto__ = G__6904.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4471__auto__ || G__6904.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__6905 = coll;
      if (G__6905) {
        var bit__4471__auto__ = G__6905.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4471__auto__ || G__6905.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__6914 = null;
      var G__6914__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__6914__1 = function(x) {
        var G__6911 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__6911) : cf.call(null, G__6911);
      };
      var G__6914__2 = function(x, y) {
        var G__6912 = x;
        var G__6913 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6912, G__6913) : f.call(null, G__6912, G__6913);
      };
      G__6914 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__6914__0.call(this);
          case 1:
            return G__6914__1.call(this, x);
          case 2:
            return G__6914__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6914.cljs$core$IFn$_invoke$arity$0 = G__6914__0;
      G__6914.cljs$core$IFn$_invoke$arity$1 = G__6914__1;
      G__6914.cljs$core$IFn$_invoke$arity$2 = G__6914__2;
      return G__6914;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__6921 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__6921) : xform.call(null, G__6921);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__6922 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__6922) : f__$1.call(null, G__6922);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__6923__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_PLUS_, x + y, more);
    };
    var G__6923 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6924__i = 0, G__6924__a = new Array(arguments.length - 2);
        while (G__6924__i < G__6924__a.length) {
          G__6924__a[G__6924__i] = arguments[G__6924__i + 2];
          ++G__6924__i;
        }
        more = new cljs.core.IndexedSeq(G__6924__a, 0);
      }
      return G__6923__delegate.call(this, x, y, more);
    };
    G__6923.cljs$lang$maxFixedArity = 2;
    G__6923.cljs$lang$applyTo = function(arglist__6925) {
      var x = cljs.core.first(arglist__6925);
      arglist__6925 = cljs.core.next(arglist__6925);
      var y = cljs.core.first(arglist__6925);
      var more = cljs.core.rest(arglist__6925);
      return G__6923__delegate(x, y, more);
    };
    G__6923.cljs$core$IFn$_invoke$arity$variadic = G__6923__delegate;
    return G__6923;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        var G__6926 = null;
        if (arguments.length > 2) {
          var G__6927__i = 0, G__6927__a = new Array(arguments.length - 2);
          while (G__6927__i < G__6927__a.length) {
            G__6927__a[G__6927__i] = arguments[G__6927__i + 2];
            ++G__6927__i;
          }
          G__6926 = new cljs.core.IndexedSeq(G__6927__a, 0);
        }
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6926);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__6928__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_, x - y, more);
    };
    var G__6928 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6929__i = 0, G__6929__a = new Array(arguments.length - 2);
        while (G__6929__i < G__6929__a.length) {
          G__6929__a[G__6929__i] = arguments[G__6929__i + 2];
          ++G__6929__i;
        }
        more = new cljs.core.IndexedSeq(G__6929__a, 0);
      }
      return G__6928__delegate.call(this, x, y, more);
    };
    G__6928.cljs$lang$maxFixedArity = 2;
    G__6928.cljs$lang$applyTo = function(arglist__6930) {
      var x = cljs.core.first(arglist__6930);
      arglist__6930 = cljs.core.next(arglist__6930);
      var y = cljs.core.first(arglist__6930);
      var more = cljs.core.rest(arglist__6930);
      return G__6928__delegate(x, y, more);
    };
    G__6928.cljs$core$IFn$_invoke$arity$variadic = G__6928__delegate;
    return G__6928;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        var G__6931 = null;
        if (arguments.length > 2) {
          var G__6932__i = 0, G__6932__a = new Array(arguments.length - 2);
          while (G__6932__i < G__6932__a.length) {
            G__6932__a[G__6932__i] = arguments[G__6932__i + 2];
            ++G__6932__i;
          }
          G__6931 = new cljs.core.IndexedSeq(G__6932__a, 0);
        }
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6931);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__6933__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_STAR_, x * y, more);
    };
    var G__6933 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6934__i = 0, G__6934__a = new Array(arguments.length - 2);
        while (G__6934__i < G__6934__a.length) {
          G__6934__a[G__6934__i] = arguments[G__6934__i + 2];
          ++G__6934__i;
        }
        more = new cljs.core.IndexedSeq(G__6934__a, 0);
      }
      return G__6933__delegate.call(this, x, y, more);
    };
    G__6933.cljs$lang$maxFixedArity = 2;
    G__6933.cljs$lang$applyTo = function(arglist__6935) {
      var x = cljs.core.first(arglist__6935);
      arglist__6935 = cljs.core.next(arglist__6935);
      var y = cljs.core.first(arglist__6935);
      var more = cljs.core.rest(arglist__6935);
      return G__6933__delegate(x, y, more);
    };
    G__6933.cljs$core$IFn$_invoke$arity$variadic = G__6933__delegate;
    return G__6933;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        var G__6936 = null;
        if (arguments.length > 2) {
          var G__6937__i = 0, G__6937__a = new Array(arguments.length - 2);
          while (G__6937__i < G__6937__a.length) {
            G__6937__a[G__6937__i] = arguments[G__6937__i + 2];
            ++G__6937__i;
          }
          G__6936 = new cljs.core.IndexedSeq(G__6937__a, 0);
        }
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6936);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__6942__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_SLASH_, _SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__6942 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6943__i = 0, G__6943__a = new Array(arguments.length - 2);
        while (G__6943__i < G__6943__a.length) {
          G__6943__a[G__6943__i] = arguments[G__6943__i + 2];
          ++G__6943__i;
        }
        more = new cljs.core.IndexedSeq(G__6943__a, 0);
      }
      return G__6942__delegate.call(this, x, y, more);
    };
    G__6942.cljs$lang$maxFixedArity = 2;
    G__6942.cljs$lang$applyTo = function(arglist__6944) {
      var x = cljs.core.first(arglist__6944);
      arglist__6944 = cljs.core.next(arglist__6944);
      var y = cljs.core.first(arglist__6944);
      var more = cljs.core.rest(arglist__6944);
      return G__6942__delegate(x, y, more);
    };
    G__6942.cljs$core$IFn$_invoke$arity$variadic = G__6942__delegate;
    return G__6942;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        var G__6945 = null;
        if (arguments.length > 2) {
          var G__6946__i = 0, G__6946__a = new Array(arguments.length - 2);
          while (G__6946__i < G__6946__a.length) {
            G__6946__a[G__6946__i] = arguments[G__6946__i + 2];
            ++G__6946__i;
          }
          G__6945 = new cljs.core.IndexedSeq(G__6946__a, 0);
        }
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6945);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__6947__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__6948 = y;
            var G__6949 = cljs.core.first(more);
            var G__6950 = cljs.core.next(more);
            x = G__6948;
            y = G__6949;
            more = G__6950;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6947 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6951__i = 0, G__6951__a = new Array(arguments.length - 2);
        while (G__6951__i < G__6951__a.length) {
          G__6951__a[G__6951__i] = arguments[G__6951__i + 2];
          ++G__6951__i;
        }
        more = new cljs.core.IndexedSeq(G__6951__a, 0);
      }
      return G__6947__delegate.call(this, x, y, more);
    };
    G__6947.cljs$lang$maxFixedArity = 2;
    G__6947.cljs$lang$applyTo = function(arglist__6952) {
      var x = cljs.core.first(arglist__6952);
      arglist__6952 = cljs.core.next(arglist__6952);
      var y = cljs.core.first(arglist__6952);
      var more = cljs.core.rest(arglist__6952);
      return G__6947__delegate(x, y, more);
    };
    G__6947.cljs$core$IFn$_invoke$arity$variadic = G__6947__delegate;
    return G__6947;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        var G__6953 = null;
        if (arguments.length > 2) {
          var G__6954__i = 0, G__6954__a = new Array(arguments.length - 2);
          while (G__6954__i < G__6954__a.length) {
            G__6954__a[G__6954__i] = arguments[G__6954__i + 2];
            ++G__6954__i;
          }
          G__6953 = new cljs.core.IndexedSeq(G__6954__a, 0);
        }
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6953);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__6955__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__6956 = y;
            var G__6957 = cljs.core.first(more);
            var G__6958 = cljs.core.next(more);
            x = G__6956;
            y = G__6957;
            more = G__6958;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6955 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6959__i = 0, G__6959__a = new Array(arguments.length - 2);
        while (G__6959__i < G__6959__a.length) {
          G__6959__a[G__6959__i] = arguments[G__6959__i + 2];
          ++G__6959__i;
        }
        more = new cljs.core.IndexedSeq(G__6959__a, 0);
      }
      return G__6955__delegate.call(this, x, y, more);
    };
    G__6955.cljs$lang$maxFixedArity = 2;
    G__6955.cljs$lang$applyTo = function(arglist__6960) {
      var x = cljs.core.first(arglist__6960);
      arglist__6960 = cljs.core.next(arglist__6960);
      var y = cljs.core.first(arglist__6960);
      var more = cljs.core.rest(arglist__6960);
      return G__6955__delegate(x, y, more);
    };
    G__6955.cljs$core$IFn$_invoke$arity$variadic = G__6955__delegate;
    return G__6955;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        var G__6961 = null;
        if (arguments.length > 2) {
          var G__6962__i = 0, G__6962__a = new Array(arguments.length - 2);
          while (G__6962__i < G__6962__a.length) {
            G__6962__a[G__6962__i] = arguments[G__6962__i + 2];
            ++G__6962__i;
          }
          G__6961 = new cljs.core.IndexedSeq(G__6962__a, 0);
        }
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6961);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__6963__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__6964 = y;
            var G__6965 = cljs.core.first(more);
            var G__6966 = cljs.core.next(more);
            x = G__6964;
            y = G__6965;
            more = G__6966;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6963 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6967__i = 0, G__6967__a = new Array(arguments.length - 2);
        while (G__6967__i < G__6967__a.length) {
          G__6967__a[G__6967__i] = arguments[G__6967__i + 2];
          ++G__6967__i;
        }
        more = new cljs.core.IndexedSeq(G__6967__a, 0);
      }
      return G__6963__delegate.call(this, x, y, more);
    };
    G__6963.cljs$lang$maxFixedArity = 2;
    G__6963.cljs$lang$applyTo = function(arglist__6968) {
      var x = cljs.core.first(arglist__6968);
      arglist__6968 = cljs.core.next(arglist__6968);
      var y = cljs.core.first(arglist__6968);
      var more = cljs.core.rest(arglist__6968);
      return G__6963__delegate(x, y, more);
    };
    G__6963.cljs$core$IFn$_invoke$arity$variadic = G__6963__delegate;
    return G__6963;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        var G__6969 = null;
        if (arguments.length > 2) {
          var G__6970__i = 0, G__6970__a = new Array(arguments.length - 2);
          while (G__6970__i < G__6970__a.length) {
            G__6970__a[G__6970__i] = arguments[G__6970__i + 2];
            ++G__6970__i;
          }
          G__6969 = new cljs.core.IndexedSeq(G__6970__a, 0);
        }
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6969);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__6971__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__6972 = y;
            var G__6973 = cljs.core.first(more);
            var G__6974 = cljs.core.next(more);
            x = G__6972;
            y = G__6973;
            more = G__6974;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6971 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6975__i = 0, G__6975__a = new Array(arguments.length - 2);
        while (G__6975__i < G__6975__a.length) {
          G__6975__a[G__6975__i] = arguments[G__6975__i + 2];
          ++G__6975__i;
        }
        more = new cljs.core.IndexedSeq(G__6975__a, 0);
      }
      return G__6971__delegate.call(this, x, y, more);
    };
    G__6971.cljs$lang$maxFixedArity = 2;
    G__6971.cljs$lang$applyTo = function(arglist__6976) {
      var x = cljs.core.first(arglist__6976);
      arglist__6976 = cljs.core.next(arglist__6976);
      var y = cljs.core.first(arglist__6976);
      var more = cljs.core.rest(arglist__6976);
      return G__6971__delegate(x, y, more);
    };
    G__6971.cljs$core$IFn$_invoke$arity$variadic = G__6971__delegate;
    return G__6971;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        var G__6977 = null;
        if (arguments.length > 2) {
          var G__6978__i = 0, G__6978__a = new Array(arguments.length - 2);
          while (G__6978__i < G__6978__a.length) {
            G__6978__a[G__6978__i] = arguments[G__6978__i + 2];
            ++G__6978__i;
          }
          G__6977 = new cljs.core.IndexedSeq(G__6978__a, 0);
        }
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6977);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__4114__auto__ = x;
    var y__4115__auto__ = y;
    return x__4114__auto__ > y__4115__auto__ ? x__4114__auto__ : y__4115__auto__;
  };
  var max__3 = function() {
    var G__6979__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(max, function() {
        var x__4114__auto__ = x;
        var y__4115__auto__ = y;
        return x__4114__auto__ > y__4115__auto__ ? x__4114__auto__ : y__4115__auto__;
      }(), more);
    };
    var G__6979 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6980__i = 0, G__6980__a = new Array(arguments.length - 2);
        while (G__6980__i < G__6980__a.length) {
          G__6980__a[G__6980__i] = arguments[G__6980__i + 2];
          ++G__6980__i;
        }
        more = new cljs.core.IndexedSeq(G__6980__a, 0);
      }
      return G__6979__delegate.call(this, x, y, more);
    };
    G__6979.cljs$lang$maxFixedArity = 2;
    G__6979.cljs$lang$applyTo = function(arglist__6981) {
      var x = cljs.core.first(arglist__6981);
      arglist__6981 = cljs.core.next(arglist__6981);
      var y = cljs.core.first(arglist__6981);
      var more = cljs.core.rest(arglist__6981);
      return G__6979__delegate(x, y, more);
    };
    G__6979.cljs$core$IFn$_invoke$arity$variadic = G__6979__delegate;
    return G__6979;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        var G__6982 = null;
        if (arguments.length > 2) {
          var G__6983__i = 0, G__6983__a = new Array(arguments.length - 2);
          while (G__6983__i < G__6983__a.length) {
            G__6983__a[G__6983__i] = arguments[G__6983__i + 2];
            ++G__6983__i;
          }
          G__6982 = new cljs.core.IndexedSeq(G__6983__a, 0);
        }
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6982);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__4121__auto__ = x;
    var y__4122__auto__ = y;
    return x__4121__auto__ < y__4122__auto__ ? x__4121__auto__ : y__4122__auto__;
  };
  var min__3 = function() {
    var G__6984__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(min, function() {
        var x__4121__auto__ = x;
        var y__4122__auto__ = y;
        return x__4121__auto__ < y__4122__auto__ ? x__4121__auto__ : y__4122__auto__;
      }(), more);
    };
    var G__6984 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6985__i = 0, G__6985__a = new Array(arguments.length - 2);
        while (G__6985__i < G__6985__a.length) {
          G__6985__a[G__6985__i] = arguments[G__6985__i + 2];
          ++G__6985__i;
        }
        more = new cljs.core.IndexedSeq(G__6985__a, 0);
      }
      return G__6984__delegate.call(this, x, y, more);
    };
    G__6984.cljs$lang$maxFixedArity = 2;
    G__6984.cljs$lang$applyTo = function(arglist__6986) {
      var x = cljs.core.first(arglist__6986);
      arglist__6986 = cljs.core.next(arglist__6986);
      var y = cljs.core.first(arglist__6986);
      var more = cljs.core.rest(arglist__6986);
      return G__6984__delegate(x, y, more);
    };
    G__6984.cljs$core$IFn$_invoke$arity$variadic = G__6984__delegate;
    return G__6984;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        var G__6987 = null;
        if (arguments.length > 2) {
          var G__6988__i = 0, G__6988__a = new Array(arguments.length - 2);
          while (G__6988__i < G__6988__a.length) {
            G__6988__a[G__6988__i] = arguments[G__6988__i + 2];
            ++G__6988__i;
          }
          G__6987 = new cljs.core.IndexedSeq(G__6988__a, 0);
        }
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6987);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__6989__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add, x + y, more);
    };
    var G__6989 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6990__i = 0, G__6990__a = new Array(arguments.length - 2);
        while (G__6990__i < G__6990__a.length) {
          G__6990__a[G__6990__i] = arguments[G__6990__i + 2];
          ++G__6990__i;
        }
        more = new cljs.core.IndexedSeq(G__6990__a, 0);
      }
      return G__6989__delegate.call(this, x, y, more);
    };
    G__6989.cljs$lang$maxFixedArity = 2;
    G__6989.cljs$lang$applyTo = function(arglist__6991) {
      var x = cljs.core.first(arglist__6991);
      arglist__6991 = cljs.core.next(arglist__6991);
      var y = cljs.core.first(arglist__6991);
      var more = cljs.core.rest(arglist__6991);
      return G__6989__delegate(x, y, more);
    };
    G__6989.cljs$core$IFn$_invoke$arity$variadic = G__6989__delegate;
    return G__6989;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        var G__6992 = null;
        if (arguments.length > 2) {
          var G__6993__i = 0, G__6993__a = new Array(arguments.length - 2);
          while (G__6993__i < G__6993__a.length) {
            G__6993__a[G__6993__i] = arguments[G__6993__i + 2];
            ++G__6993__i;
          }
          G__6992 = new cljs.core.IndexedSeq(G__6993__a, 0);
        }
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6992);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__6994__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add_int, x + y, more);
    };
    var G__6994 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6995__i = 0, G__6995__a = new Array(arguments.length - 2);
        while (G__6995__i < G__6995__a.length) {
          G__6995__a[G__6995__i] = arguments[G__6995__i + 2];
          ++G__6995__i;
        }
        more = new cljs.core.IndexedSeq(G__6995__a, 0);
      }
      return G__6994__delegate.call(this, x, y, more);
    };
    G__6994.cljs$lang$maxFixedArity = 2;
    G__6994.cljs$lang$applyTo = function(arglist__6996) {
      var x = cljs.core.first(arglist__6996);
      arglist__6996 = cljs.core.next(arglist__6996);
      var y = cljs.core.first(arglist__6996);
      var more = cljs.core.rest(arglist__6996);
      return G__6994__delegate(x, y, more);
    };
    G__6994.cljs$core$IFn$_invoke$arity$variadic = G__6994__delegate;
    return G__6994;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        var G__6997 = null;
        if (arguments.length > 2) {
          var G__6998__i = 0, G__6998__a = new Array(arguments.length - 2);
          while (G__6998__i < G__6998__a.length) {
            G__6998__a[G__6998__i] = arguments[G__6998__i + 2];
            ++G__6998__i;
          }
          G__6997 = new cljs.core.IndexedSeq(G__6998__a, 0);
        }
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6997);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__7003__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_divide_int, unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__7003 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7004__i = 0, G__7004__a = new Array(arguments.length - 2);
        while (G__7004__i < G__7004__a.length) {
          G__7004__a[G__7004__i] = arguments[G__7004__i + 2];
          ++G__7004__i;
        }
        more = new cljs.core.IndexedSeq(G__7004__a, 0);
      }
      return G__7003__delegate.call(this, x, y, more);
    };
    G__7003.cljs$lang$maxFixedArity = 2;
    G__7003.cljs$lang$applyTo = function(arglist__7005) {
      var x = cljs.core.first(arglist__7005);
      arglist__7005 = cljs.core.next(arglist__7005);
      var y = cljs.core.first(arglist__7005);
      var more = cljs.core.rest(arglist__7005);
      return G__7003__delegate(x, y, more);
    };
    G__7003.cljs$core$IFn$_invoke$arity$variadic = G__7003__delegate;
    return G__7003;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        var G__7006 = null;
        if (arguments.length > 2) {
          var G__7007__i = 0, G__7007__a = new Array(arguments.length - 2);
          while (G__7007__i < G__7007__a.length) {
            G__7007__a[G__7007__i] = arguments[G__7007__i + 2];
            ++G__7007__i;
          }
          G__7006 = new cljs.core.IndexedSeq(G__7007__a, 0);
        }
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7006);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__7008__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply, x * y, more);
    };
    var G__7008 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7009__i = 0, G__7009__a = new Array(arguments.length - 2);
        while (G__7009__i < G__7009__a.length) {
          G__7009__a[G__7009__i] = arguments[G__7009__i + 2];
          ++G__7009__i;
        }
        more = new cljs.core.IndexedSeq(G__7009__a, 0);
      }
      return G__7008__delegate.call(this, x, y, more);
    };
    G__7008.cljs$lang$maxFixedArity = 2;
    G__7008.cljs$lang$applyTo = function(arglist__7010) {
      var x = cljs.core.first(arglist__7010);
      arglist__7010 = cljs.core.next(arglist__7010);
      var y = cljs.core.first(arglist__7010);
      var more = cljs.core.rest(arglist__7010);
      return G__7008__delegate(x, y, more);
    };
    G__7008.cljs$core$IFn$_invoke$arity$variadic = G__7008__delegate;
    return G__7008;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        var G__7011 = null;
        if (arguments.length > 2) {
          var G__7012__i = 0, G__7012__a = new Array(arguments.length - 2);
          while (G__7012__i < G__7012__a.length) {
            G__7012__a[G__7012__i] = arguments[G__7012__i + 2];
            ++G__7012__i;
          }
          G__7011 = new cljs.core.IndexedSeq(G__7012__a, 0);
        }
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7011);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__7013__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply_int, x * y, more);
    };
    var G__7013 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7014__i = 0, G__7014__a = new Array(arguments.length - 2);
        while (G__7014__i < G__7014__a.length) {
          G__7014__a[G__7014__i] = arguments[G__7014__i + 2];
          ++G__7014__i;
        }
        more = new cljs.core.IndexedSeq(G__7014__a, 0);
      }
      return G__7013__delegate.call(this, x, y, more);
    };
    G__7013.cljs$lang$maxFixedArity = 2;
    G__7013.cljs$lang$applyTo = function(arglist__7015) {
      var x = cljs.core.first(arglist__7015);
      arglist__7015 = cljs.core.next(arglist__7015);
      var y = cljs.core.first(arglist__7015);
      var more = cljs.core.rest(arglist__7015);
      return G__7013__delegate(x, y, more);
    };
    G__7013.cljs$core$IFn$_invoke$arity$variadic = G__7013__delegate;
    return G__7013;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__7016 = null;
        if (arguments.length > 2) {
          var G__7017__i = 0, G__7017__a = new Array(arguments.length - 2);
          while (G__7017__i < G__7017__a.length) {
            G__7017__a[G__7017__i] = arguments[G__7017__i + 2];
            ++G__7017__i;
          }
          G__7016 = new cljs.core.IndexedSeq(G__7017__a, 0);
        }
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7016);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  var G__7020 = x;
  var G__7021 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__7020, G__7021) : cljs.core.mod.call(null, G__7020, G__7021);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__7022__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract, x - y, more);
    };
    var G__7022 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7023__i = 0, G__7023__a = new Array(arguments.length - 2);
        while (G__7023__i < G__7023__a.length) {
          G__7023__a[G__7023__i] = arguments[G__7023__i + 2];
          ++G__7023__i;
        }
        more = new cljs.core.IndexedSeq(G__7023__a, 0);
      }
      return G__7022__delegate.call(this, x, y, more);
    };
    G__7022.cljs$lang$maxFixedArity = 2;
    G__7022.cljs$lang$applyTo = function(arglist__7024) {
      var x = cljs.core.first(arglist__7024);
      arglist__7024 = cljs.core.next(arglist__7024);
      var y = cljs.core.first(arglist__7024);
      var more = cljs.core.rest(arglist__7024);
      return G__7022__delegate(x, y, more);
    };
    G__7022.cljs$core$IFn$_invoke$arity$variadic = G__7022__delegate;
    return G__7022;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        var G__7025 = null;
        if (arguments.length > 2) {
          var G__7026__i = 0, G__7026__a = new Array(arguments.length - 2);
          while (G__7026__i < G__7026__a.length) {
            G__7026__a[G__7026__i] = arguments[G__7026__i + 2];
            ++G__7026__i;
          }
          G__7025 = new cljs.core.IndexedSeq(G__7026__a, 0);
        }
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7025);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__7027__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract_int, x - y, more);
    };
    var G__7027 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7028__i = 0, G__7028__a = new Array(arguments.length - 2);
        while (G__7028__i < G__7028__a.length) {
          G__7028__a[G__7028__i] = arguments[G__7028__i + 2];
          ++G__7028__i;
        }
        more = new cljs.core.IndexedSeq(G__7028__a, 0);
      }
      return G__7027__delegate.call(this, x, y, more);
    };
    G__7027.cljs$lang$maxFixedArity = 2;
    G__7027.cljs$lang$applyTo = function(arglist__7029) {
      var x = cljs.core.first(arglist__7029);
      arglist__7029 = cljs.core.next(arglist__7029);
      var y = cljs.core.first(arglist__7029);
      var more = cljs.core.rest(arglist__7029);
      return G__7027__delegate(x, y, more);
    };
    G__7027.cljs$core$IFn$_invoke$arity$variadic = G__7027__delegate;
    return G__7027;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__7030 = null;
        if (arguments.length > 2) {
          var G__7031__i = 0, G__7031__a = new Array(arguments.length - 2);
          while (G__7031__i < G__7031__a.length) {
            G__7031__a[G__7031__i] = arguments[G__7031__i + 2];
            ++G__7031__i;
          }
          G__7030 = new cljs.core.IndexedSeq(G__7031__a, 0);
        }
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7030);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    var G__7034 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__7034) : Math.floor.call(null, G__7034);
  } else {
    var G__7035 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__7035) : Math.ceil.call(null, G__7035);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var bit_xor = null;
  var bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var bit_xor__3 = function() {
    var G__7036__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_xor, x ^ y, more);
    };
    var G__7036 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7037__i = 0, G__7037__a = new Array(arguments.length - 2);
        while (G__7037__i < G__7037__a.length) {
          G__7037__a[G__7037__i] = arguments[G__7037__i + 2];
          ++G__7037__i;
        }
        more = new cljs.core.IndexedSeq(G__7037__a, 0);
      }
      return G__7036__delegate.call(this, x, y, more);
    };
    G__7036.cljs$lang$maxFixedArity = 2;
    G__7036.cljs$lang$applyTo = function(arglist__7038) {
      var x = cljs.core.first(arglist__7038);
      arglist__7038 = cljs.core.next(arglist__7038);
      var y = cljs.core.first(arglist__7038);
      var more = cljs.core.rest(arglist__7038);
      return G__7036__delegate(x, y, more);
    };
    G__7036.cljs$core$IFn$_invoke$arity$variadic = G__7036__delegate;
    return G__7036;
  }();
  bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_xor__2.call(this, x, y);
      default:
        var G__7039 = null;
        if (arguments.length > 2) {
          var G__7040__i = 0, G__7040__a = new Array(arguments.length - 2);
          while (G__7040__i < G__7040__a.length) {
            G__7040__a[G__7040__i] = arguments[G__7040__i + 2];
            ++G__7040__i;
          }
          G__7039 = new cljs.core.IndexedSeq(G__7040__a, 0);
        }
        return bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7039);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_xor.cljs$lang$maxFixedArity = 2;
  bit_xor.cljs$lang$applyTo = bit_xor__3.cljs$lang$applyTo;
  bit_xor.cljs$core$IFn$_invoke$arity$2 = bit_xor__2;
  bit_xor.cljs$core$IFn$_invoke$arity$variadic = bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_xor;
}();
cljs.core.bit_and = function() {
  var bit_and = null;
  var bit_and__2 = function(x, y) {
    return x & y;
  };
  var bit_and__3 = function() {
    var G__7041__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and, x & y, more);
    };
    var G__7041 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7042__i = 0, G__7042__a = new Array(arguments.length - 2);
        while (G__7042__i < G__7042__a.length) {
          G__7042__a[G__7042__i] = arguments[G__7042__i + 2];
          ++G__7042__i;
        }
        more = new cljs.core.IndexedSeq(G__7042__a, 0);
      }
      return G__7041__delegate.call(this, x, y, more);
    };
    G__7041.cljs$lang$maxFixedArity = 2;
    G__7041.cljs$lang$applyTo = function(arglist__7043) {
      var x = cljs.core.first(arglist__7043);
      arglist__7043 = cljs.core.next(arglist__7043);
      var y = cljs.core.first(arglist__7043);
      var more = cljs.core.rest(arglist__7043);
      return G__7041__delegate(x, y, more);
    };
    G__7041.cljs$core$IFn$_invoke$arity$variadic = G__7041__delegate;
    return G__7041;
  }();
  bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and__2.call(this, x, y);
      default:
        var G__7044 = null;
        if (arguments.length > 2) {
          var G__7045__i = 0, G__7045__a = new Array(arguments.length - 2);
          while (G__7045__i < G__7045__a.length) {
            G__7045__a[G__7045__i] = arguments[G__7045__i + 2];
            ++G__7045__i;
          }
          G__7044 = new cljs.core.IndexedSeq(G__7045__a, 0);
        }
        return bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7044);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and.cljs$lang$maxFixedArity = 2;
  bit_and.cljs$lang$applyTo = bit_and__3.cljs$lang$applyTo;
  bit_and.cljs$core$IFn$_invoke$arity$2 = bit_and__2;
  bit_and.cljs$core$IFn$_invoke$arity$variadic = bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and;
}();
cljs.core.bit_or = function() {
  var bit_or = null;
  var bit_or__2 = function(x, y) {
    return x | y;
  };
  var bit_or__3 = function() {
    var G__7046__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_or, x | y, more);
    };
    var G__7046 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7047__i = 0, G__7047__a = new Array(arguments.length - 2);
        while (G__7047__i < G__7047__a.length) {
          G__7047__a[G__7047__i] = arguments[G__7047__i + 2];
          ++G__7047__i;
        }
        more = new cljs.core.IndexedSeq(G__7047__a, 0);
      }
      return G__7046__delegate.call(this, x, y, more);
    };
    G__7046.cljs$lang$maxFixedArity = 2;
    G__7046.cljs$lang$applyTo = function(arglist__7048) {
      var x = cljs.core.first(arglist__7048);
      arglist__7048 = cljs.core.next(arglist__7048);
      var y = cljs.core.first(arglist__7048);
      var more = cljs.core.rest(arglist__7048);
      return G__7046__delegate(x, y, more);
    };
    G__7046.cljs$core$IFn$_invoke$arity$variadic = G__7046__delegate;
    return G__7046;
  }();
  bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_or__2.call(this, x, y);
      default:
        var G__7049 = null;
        if (arguments.length > 2) {
          var G__7050__i = 0, G__7050__a = new Array(arguments.length - 2);
          while (G__7050__i < G__7050__a.length) {
            G__7050__a[G__7050__i] = arguments[G__7050__i + 2];
            ++G__7050__i;
          }
          G__7049 = new cljs.core.IndexedSeq(G__7050__a, 0);
        }
        return bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7049);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_or.cljs$lang$maxFixedArity = 2;
  bit_or.cljs$lang$applyTo = bit_or__3.cljs$lang$applyTo;
  bit_or.cljs$core$IFn$_invoke$arity$2 = bit_or__2;
  bit_or.cljs$core$IFn$_invoke$arity$variadic = bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_or;
}();
cljs.core.bit_and_not = function() {
  var bit_and_not = null;
  var bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var bit_and_not__3 = function() {
    var G__7051__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and_not, x & ~y, more);
    };
    var G__7051 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7052__i = 0, G__7052__a = new Array(arguments.length - 2);
        while (G__7052__i < G__7052__a.length) {
          G__7052__a[G__7052__i] = arguments[G__7052__i + 2];
          ++G__7052__i;
        }
        more = new cljs.core.IndexedSeq(G__7052__a, 0);
      }
      return G__7051__delegate.call(this, x, y, more);
    };
    G__7051.cljs$lang$maxFixedArity = 2;
    G__7051.cljs$lang$applyTo = function(arglist__7053) {
      var x = cljs.core.first(arglist__7053);
      arglist__7053 = cljs.core.next(arglist__7053);
      var y = cljs.core.first(arglist__7053);
      var more = cljs.core.rest(arglist__7053);
      return G__7051__delegate(x, y, more);
    };
    G__7051.cljs$core$IFn$_invoke$arity$variadic = G__7051__delegate;
    return G__7051;
  }();
  bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and_not__2.call(this, x, y);
      default:
        var G__7054 = null;
        if (arguments.length > 2) {
          var G__7055__i = 0, G__7055__a = new Array(arguments.length - 2);
          while (G__7055__i < G__7055__a.length) {
            G__7055__a[G__7055__i] = arguments[G__7055__i + 2];
            ++G__7055__i;
          }
          G__7054 = new cljs.core.IndexedSeq(G__7055__a, 0);
        }
        return bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7054);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and_not.cljs$lang$maxFixedArity = 2;
  bit_and_not.cljs$lang$applyTo = bit_and_not__3.cljs$lang$applyTo;
  bit_and_not.cljs$core$IFn$_invoke$arity$2 = bit_and_not__2;
  bit_and_not.cljs$core$IFn$_invoke$arity$variadic = bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and_not;
}();
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__7060__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__7061 = y;
            var G__7062 = cljs.core.first(more);
            var G__7063 = cljs.core.next(more);
            x = G__7061;
            y = G__7062;
            more = G__7063;
            continue;
          } else {
            return _EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7060 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7064__i = 0, G__7064__a = new Array(arguments.length - 2);
        while (G__7064__i < G__7064__a.length) {
          G__7064__a[G__7064__i] = arguments[G__7064__i + 2];
          ++G__7064__i;
        }
        more = new cljs.core.IndexedSeq(G__7064__a, 0);
      }
      return G__7060__delegate.call(this, x, y, more);
    };
    G__7060.cljs$lang$maxFixedArity = 2;
    G__7060.cljs$lang$applyTo = function(arglist__7065) {
      var x = cljs.core.first(arglist__7065);
      arglist__7065 = cljs.core.next(arglist__7065);
      var y = cljs.core.first(arglist__7065);
      var more = cljs.core.rest(arglist__7065);
      return G__7060__delegate(x, y, more);
    };
    G__7060.cljs$core$IFn$_invoke$arity$variadic = G__7060__delegate;
    return G__7060;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        var G__7066 = null;
        if (arguments.length > 2) {
          var G__7067__i = 0, G__7067__a = new Array(arguments.length - 2);
          while (G__7067__i < G__7067__a.length) {
            G__7067__a[G__7067__i] = arguments[G__7067__i + 2];
            ++G__7067__i;
          }
          G__7066 = new cljs.core.IndexedSeq(G__7067__a, 0);
        }
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7066);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__7068 = n__$1 - 1;
      var G__7069 = cljs.core.next(xs);
      n__$1 = G__7068;
      xs = G__7069;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__7073 = x;
      return goog.string.buildString(G__7073);
    }
  };
  var str__2 = function() {
    var G__7074__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__7075 = sb.append(str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__7076 = cljs.core.next(more);
          sb = G__7075;
          more = G__7076;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__7074 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__7077__i = 0, G__7077__a = new Array(arguments.length - 1);
        while (G__7077__i < G__7077__a.length) {
          G__7077__a[G__7077__i] = arguments[G__7077__i + 1];
          ++G__7077__i;
        }
        ys = new cljs.core.IndexedSeq(G__7077__a, 0);
      }
      return G__7074__delegate.call(this, x, ys);
    };
    G__7074.cljs$lang$maxFixedArity = 1;
    G__7074.cljs$lang$applyTo = function(arglist__7078) {
      var x = cljs.core.first(arglist__7078);
      var ys = cljs.core.rest(arglist__7078);
      return G__7074__delegate(x, ys);
    };
    G__7074.cljs$core$IFn$_invoke$arity$variadic = G__7074__delegate;
    return G__7074;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        var G__7079 = null;
        if (arguments.length > 1) {
          var G__7080__i = 0, G__7080__a = new Array(arguments.length - 1);
          while (G__7080__i < G__7080__a.length) {
            G__7080__a[G__7080__i] = arguments[G__7080__i + 1];
            ++G__7080__i;
          }
          G__7079 = new cljs.core.IndexedSeq(G__7080__a, 0);
        }
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__7079);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__7081 = cljs.core.next(xs);
            var G__7082 = cljs.core.next(ys);
            xs = G__7081;
            ys = G__7082;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__7083 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__7084 = cljs.core.next(s);
        res = G__7083;
        s = G__7084;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__7089 = (h + (cljs.core.hash(function() {
        var G__7087 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__7087) : cljs.core.key.call(null, G__7087);
      }()) ^ cljs.core.hash(function() {
        var G__7088 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__7088) : cljs.core.val.call(null, G__7088);
      }()))) % 4503599627370496;
      var G__7090 = cljs.core.next(s);
      h = G__7089;
      s = G__7090;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__7091 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__7092 = cljs.core.next(s__$1);
      h = G__7091;
      s__$1 = G__7092;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__7103_7113 = cljs.core.seq(fn_map);
  var chunk__7104_7114 = null;
  var count__7105_7115 = 0;
  var i__7106_7116 = 0;
  while (true) {
    if (i__7106_7116 < count__7105_7115) {
      var vec__7107_7117 = chunk__7104_7114.cljs$core$IIndexed$_nth$arity$2(null, i__7106_7116);
      var key_name_7118 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7107_7117, 0, null);
      var f_7119 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7107_7117, 1, null);
      var str_name_7120 = function() {
        var G__7108 = key_name_7118;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7108) : cljs.core.name.call(null, G__7108);
      }();
      obj[str_name_7120] = f_7119;
      var G__7121 = seq__7103_7113;
      var G__7122 = chunk__7104_7114;
      var G__7123 = count__7105_7115;
      var G__7124 = i__7106_7116 + 1;
      seq__7103_7113 = G__7121;
      chunk__7104_7114 = G__7122;
      count__7105_7115 = G__7123;
      i__7106_7116 = G__7124;
      continue;
    } else {
      var temp__4126__auto___7125 = cljs.core.seq(seq__7103_7113);
      if (temp__4126__auto___7125) {
        var seq__7103_7126__$1 = temp__4126__auto___7125;
        if (cljs.core.chunked_seq_QMARK_(seq__7103_7126__$1)) {
          var c__4584__auto___7127 = function() {
            var G__7109 = seq__7103_7126__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__7109) : cljs.core.chunk_first.call(null, G__7109);
          }();
          var G__7128 = function() {
            var G__7110 = seq__7103_7126__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__7110) : cljs.core.chunk_rest.call(null, G__7110);
          }();
          var G__7129 = c__4584__auto___7127;
          var G__7130 = cljs.core.count(c__4584__auto___7127);
          var G__7131 = 0;
          seq__7103_7113 = G__7128;
          chunk__7104_7114 = G__7129;
          count__7105_7115 = G__7130;
          i__7106_7116 = G__7131;
          continue;
        } else {
          var vec__7111_7132 = cljs.core.first(seq__7103_7126__$1);
          var key_name_7133 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7111_7132, 0, null);
          var f_7134 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7111_7132, 1, null);
          var str_name_7135 = function() {
            var G__7112 = key_name_7133;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7112) : cljs.core.name.call(null, G__7112);
          }();
          obj[str_name_7135] = f_7134;
          var G__7136 = cljs.core.next(seq__7103_7126__$1);
          var G__7137 = null;
          var G__7138 = 0;
          var G__7139 = 0;
          seq__7103_7113 = G__7136;
          chunk__7104_7114 = G__7137;
          count__7105_7115 = G__7138;
          i__7106_7116 = G__7139;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__7141 = coll;
  if (G__7141) {
    var bit__4478__auto__ = G__7141.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4478__auto__ || G__7141.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__7141.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7141);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7141);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__7142 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__7142;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__7143 = i - 1;
        var G__7144 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__7143;
        r = G__7144;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__7145__i = 0, G__7145__a = new Array(arguments.length - 0);
      while (G__7145__i < G__7145__a.length) {
        G__7145__a[G__7145__i] = arguments[G__7145__i + 0];
        ++G__7145__i;
      }
      xs = new cljs.core.IndexedSeq(G__7145__a, 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__7146) {
    var xs = cljs.core.seq(arglist__7146);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3797__auto__ = coll == null;
    if (or__3797__auto__) {
      return or__3797__auto__;
    } else {
      var G__7150 = coll;
      if (G__7150) {
        var bit__4471__auto__ = G__7150.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4471__auto__ || G__7150.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__7152 = x;
  if (G__7152) {
    var bit__4478__auto__ = G__7152.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4478__auto__ || G__7152.cljs$core$IList$) {
      return true;
    } else {
      if (!G__7152.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7152);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7152);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = cljs.core.not(a.ns);
      if (and__3785__auto__) {
        return b.ns;
      } else {
        return and__3785__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__7159 = a.ns;
            var G__7160 = b.ns;
            return goog.array.defaultCompare(G__7159, G__7160);
          }();
          if (0 === nsc) {
            var G__7161 = a.name;
            var G__7162 = b.name;
            return goog.array.defaultCompare(G__7161, G__7162);
          } else {
            return nsc;
          }
        }
      } else {
        var G__7163 = a.name;
        var G__7164 = b.name;
        return goog.array.defaultCompare(G__7163, G__7164);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4218__auto__ = self__._hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7166 = null;
  var G__7166__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__7166__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__7166 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7166__2.call(this, self__, coll);
      case 3:
        return G__7166__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7166.cljs$core$IFn$_invoke$arity$2 = G__7166__2;
  G__7166.cljs$core$IFn$_invoke$arity$3 = G__7166__3;
  return G__7166;
}();
cljs.core.Keyword.prototype.apply = function(self__, args7165) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7165)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__7168 = x;
    if (G__7168) {
      var bit__4471__auto__ = G__7168.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4471__auto__ || G__7168.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__7170 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7170) : cljs.core.name.call(null, G__7170);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__7171 = ls.sval();
        ls = G__7171;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__7173 = s;
    if (G__7173) {
      var bit__4471__auto__ = G__7173.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4471__auto__ || G__7173.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__7174 = cljs.core.next(s__$1);
      s__$1 = G__7174;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_7175 = 0;
  var xs_7176 = cljs.core.seq(coll);
  while (true) {
    if (xs_7176) {
      ret[i_7175] = cljs.core.to_array(cljs.core.first(xs_7176));
      var G__7177 = i_7175 + 1;
      var G__7178 = cljs.core.next(xs_7176);
      i_7175 = G__7177;
      xs_7176 = G__7178;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7181 = i + 1;
          var G__7182 = cljs.core.next(s__$1);
          i = G__7181;
          s__$1 = G__7182;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4684__auto___7183 = size;
      var i_7184 = 0;
      while (true) {
        if (i_7184 < n__4684__auto___7183) {
          a[i_7184] = init_val_or_seq;
          var G__7185 = i_7184 + 1;
          i_7184 = G__7185;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7188 = i + 1;
          var G__7189 = cljs.core.next(s__$1);
          i = G__7188;
          s__$1 = G__7189;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4684__auto___7190 = size;
      var i_7191 = 0;
      while (true) {
        if (i_7191 < n__4684__auto___7190) {
          a[i_7191] = init_val_or_seq;
          var G__7192 = i_7191 + 1;
          i_7191 = G__7192;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7195 = i + 1;
          var G__7196 = cljs.core.next(s__$1);
          i = G__7195;
          s__$1 = G__7196;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4684__auto___7197 = size;
      var i_7198 = 0;
      while (true) {
        if (i_7198 < n__4684__auto___7197) {
          a[i_7198] = init_val_or_seq;
          var G__7199 = i_7198 + 1;
          i_7198 = G__7199;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7202 = i + 1;
          var G__7203 = cljs.core.next(s__$1);
          i = G__7202;
          s__$1 = G__7203;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4684__auto___7204 = size;
      var i_7205 = 0;
      while (true) {
        if (i_7205 < n__4684__auto___7204) {
          a[i_7205] = init_val_or_seq;
          var G__7206 = i_7205 + 1;
          i_7205 = G__7206;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__7207 = cljs.core.next(s__$1);
        var G__7208 = i - 1;
        var G__7209 = sum + 1;
        s__$1 = G__7207;
        i = G__7208;
        sum = G__7209;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__7229__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__7229 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__7230__i = 0, G__7230__a = new Array(arguments.length - 2);
        while (G__7230__i < G__7230__a.length) {
          G__7230__a[G__7230__i] = arguments[G__7230__i + 2];
          ++G__7230__i;
        }
        zs = new cljs.core.IndexedSeq(G__7230__a, 0);
      }
      return G__7229__delegate.call(this, x, y, zs);
    };
    G__7229.cljs$lang$maxFixedArity = 2;
    G__7229.cljs$lang$applyTo = function(arglist__7231) {
      var x = cljs.core.first(arglist__7231);
      arglist__7231 = cljs.core.next(arglist__7231);
      var y = cljs.core.first(arglist__7231);
      var zs = cljs.core.rest(arglist__7231);
      return G__7229__delegate(x, y, zs);
    };
    G__7229.cljs$core$IFn$_invoke$arity$variadic = G__7229__delegate;
    return G__7229;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        var G__7232 = null;
        if (arguments.length > 2) {
          var G__7233__i = 0, G__7233__a = new Array(arguments.length - 2);
          while (G__7233__i < G__7233__a.length) {
            G__7233__a[G__7233__i] = arguments[G__7233__i + 2];
            ++G__7233__i;
          }
          G__7232 = new cljs.core.IndexedSeq(G__7233__a, 0);
        }
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7232);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var list_STAR___5 = function() {
    var G__7234__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__7234 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__7235__i = 0, G__7235__a = new Array(arguments.length - 4);
        while (G__7235__i < G__7235__a.length) {
          G__7235__a[G__7235__i] = arguments[G__7235__i + 4];
          ++G__7235__i;
        }
        more = new cljs.core.IndexedSeq(G__7235__a, 0);
      }
      return G__7234__delegate.call(this, a, b, c, d, more);
    };
    G__7234.cljs$lang$maxFixedArity = 4;
    G__7234.cljs$lang$applyTo = function(arglist__7236) {
      var a = cljs.core.first(arglist__7236);
      arglist__7236 = cljs.core.next(arglist__7236);
      var b = cljs.core.first(arglist__7236);
      arglist__7236 = cljs.core.next(arglist__7236);
      var c = cljs.core.first(arglist__7236);
      arglist__7236 = cljs.core.next(arglist__7236);
      var d = cljs.core.first(arglist__7236);
      var more = cljs.core.rest(arglist__7236);
      return G__7234__delegate(a, b, c, d, more);
    };
    G__7234.cljs$core$IFn$_invoke$arity$variadic = G__7234__delegate;
    return G__7234;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        var G__7237 = null;
        if (arguments.length > 4) {
          var G__7238__i = 0, G__7238__a = new Array(arguments.length - 4);
          while (G__7238__i < G__7238__a.length) {
            G__7238__a[G__7238__i] = arguments[G__7238__i + 4];
            ++G__7238__i;
          }
          G__7237 = new cljs.core.IndexedSeq(G__7238__a, 0);
        }
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__7237);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__7239__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7240 = ntcoll;
          var G__7241 = cljs.core.first(vals);
          var G__7242 = cljs.core.next(vals);
          tcoll = G__7240;
          val = G__7241;
          vals = G__7242;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7239 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__7243__i = 0, G__7243__a = new Array(arguments.length - 2);
        while (G__7243__i < G__7243__a.length) {
          G__7243__a[G__7243__i] = arguments[G__7243__i + 2];
          ++G__7243__i;
        }
        vals = new cljs.core.IndexedSeq(G__7243__a, 0);
      }
      return G__7239__delegate.call(this, tcoll, val, vals);
    };
    G__7239.cljs$lang$maxFixedArity = 2;
    G__7239.cljs$lang$applyTo = function(arglist__7244) {
      var tcoll = cljs.core.first(arglist__7244);
      arglist__7244 = cljs.core.next(arglist__7244);
      var val = cljs.core.first(arglist__7244);
      var vals = cljs.core.rest(arglist__7244);
      return G__7239__delegate(tcoll, val, vals);
    };
    G__7239.cljs$core$IFn$_invoke$arity$variadic = G__7239__delegate;
    return G__7239;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        var G__7245 = null;
        if (arguments.length > 2) {
          var G__7246__i = 0, G__7246__a = new Array(arguments.length - 2);
          while (G__7246__i < G__7246__a.length) {
            G__7246__a[G__7246__i] = arguments[G__7246__i + 2];
            ++G__7246__i;
          }
          G__7245 = new cljs.core.IndexedSeq(G__7246__a, 0);
        }
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__7245);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__7247__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__7248 = ntcoll;
          var G__7249 = cljs.core.first(kvs);
          var G__7250 = cljs.core.second(kvs);
          var G__7251 = cljs.core.nnext(kvs);
          tcoll = G__7248;
          key = G__7249;
          val = G__7250;
          kvs = G__7251;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7247 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__7252__i = 0, G__7252__a = new Array(arguments.length - 3);
        while (G__7252__i < G__7252__a.length) {
          G__7252__a[G__7252__i] = arguments[G__7252__i + 3];
          ++G__7252__i;
        }
        kvs = new cljs.core.IndexedSeq(G__7252__a, 0);
      }
      return G__7247__delegate.call(this, tcoll, key, val, kvs);
    };
    G__7247.cljs$lang$maxFixedArity = 3;
    G__7247.cljs$lang$applyTo = function(arglist__7253) {
      var tcoll = cljs.core.first(arglist__7253);
      arglist__7253 = cljs.core.next(arglist__7253);
      var key = cljs.core.first(arglist__7253);
      arglist__7253 = cljs.core.next(arglist__7253);
      var val = cljs.core.first(arglist__7253);
      var kvs = cljs.core.rest(arglist__7253);
      return G__7247__delegate(tcoll, key, val, kvs);
    };
    G__7247.cljs$core$IFn$_invoke$arity$variadic = G__7247__delegate;
    return G__7247;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__7254 = null;
        if (arguments.length > 3) {
          var G__7255__i = 0, G__7255__a = new Array(arguments.length - 3);
          while (G__7255__i < G__7255__a.length) {
            G__7255__a[G__7255__i] = arguments[G__7255__i + 3];
            ++G__7255__i;
          }
          G__7254 = new cljs.core.IndexedSeq(G__7255__a, 0);
        }
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__7254);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__7256__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__7257 = ntcoll;
          var G__7258 = cljs.core.first(ks);
          var G__7259 = cljs.core.next(ks);
          tcoll = G__7257;
          key = G__7258;
          ks = G__7259;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7256 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__7260__i = 0, G__7260__a = new Array(arguments.length - 2);
        while (G__7260__i < G__7260__a.length) {
          G__7260__a[G__7260__i] = arguments[G__7260__i + 2];
          ++G__7260__i;
        }
        ks = new cljs.core.IndexedSeq(G__7260__a, 0);
      }
      return G__7256__delegate.call(this, tcoll, key, ks);
    };
    G__7256.cljs$lang$maxFixedArity = 2;
    G__7256.cljs$lang$applyTo = function(arglist__7261) {
      var tcoll = cljs.core.first(arglist__7261);
      arglist__7261 = cljs.core.next(arglist__7261);
      var key = cljs.core.first(arglist__7261);
      var ks = cljs.core.rest(arglist__7261);
      return G__7256__delegate(tcoll, key, ks);
    };
    G__7256.cljs$core$IFn$_invoke$arity$variadic = G__7256__delegate;
    return G__7256;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__7262 = null;
        if (arguments.length > 2) {
          var G__7263__i = 0, G__7263__a = new Array(arguments.length - 2);
          while (G__7263__i < G__7263__a.length) {
            G__7263__a[G__7263__i] = arguments[G__7263__i + 2];
            ++G__7263__i;
          }
          G__7262 = new cljs.core.IndexedSeq(G__7263__a, 0);
        }
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__7262);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__7264__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7265 = ntcoll;
          var G__7266 = cljs.core.first(vals);
          var G__7267 = cljs.core.next(vals);
          tcoll = G__7265;
          val = G__7266;
          vals = G__7267;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7264 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__7268__i = 0, G__7268__a = new Array(arguments.length - 2);
        while (G__7268__i < G__7268__a.length) {
          G__7268__a[G__7268__i] = arguments[G__7268__i + 2];
          ++G__7268__i;
        }
        vals = new cljs.core.IndexedSeq(G__7268__a, 0);
      }
      return G__7264__delegate.call(this, tcoll, val, vals);
    };
    G__7264.cljs$lang$maxFixedArity = 2;
    G__7264.cljs$lang$applyTo = function(arglist__7269) {
      var tcoll = cljs.core.first(arglist__7269);
      arglist__7269 = cljs.core.next(arglist__7269);
      var val = cljs.core.first(arglist__7269);
      var vals = cljs.core.rest(arglist__7269);
      return G__7264__delegate(tcoll, val, vals);
    };
    G__7264.cljs$core$IFn$_invoke$arity$variadic = G__7264__delegate;
    return G__7264;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        var G__7270 = null;
        if (arguments.length > 2) {
          var G__7271__i = 0, G__7271__a = new Array(arguments.length - 2);
          while (G__7271__i < G__7271__a.length) {
            G__7271__a[G__7271__i] = arguments[G__7271__i + 2];
            ++G__7271__i;
          }
          G__7270 = new cljs.core.IndexedSeq(G__7271__a, 0);
        }
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__7270);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a4728 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4728);
      } else {
        var G__7482 = a4728;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7482) : f.call(null, G__7482);
      }
    } else {
      var b4729 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4728, b4729);
        } else {
          var G__7483 = a4728;
          var G__7484 = b4729;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7483, G__7484) : f.call(null, G__7483, G__7484);
        }
      } else {
        var c4730 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4728, b4729, c4730);
          } else {
            var G__7485 = a4728;
            var G__7486 = b4729;
            var G__7487 = c4730;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7485, G__7486, G__7487) : f.call(null, G__7485, G__7486, G__7487);
          }
        } else {
          var d4731 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4728, b4729, c4730, d4731);
            } else {
              var G__7488 = a4728;
              var G__7489 = b4729;
              var G__7490 = c4730;
              var G__7491 = d4731;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__7488, G__7489, G__7490, G__7491) : f.call(null, G__7488, G__7489, G__7490, G__7491);
            }
          } else {
            var e4732 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4728, b4729, c4730, d4731, e4732);
              } else {
                var G__7492 = a4728;
                var G__7493 = b4729;
                var G__7494 = c4730;
                var G__7495 = d4731;
                var G__7496 = e4732;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__7492, G__7493, G__7494, G__7495, G__7496) : f.call(null, G__7492, G__7493, G__7494, G__7495, G__7496);
              }
            } else {
              var f4733 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4728, b4729, c4730, d4731, e4732, f4733);
                } else {
                  var G__7497 = a4728;
                  var G__7498 = b4729;
                  var G__7499 = c4730;
                  var G__7500 = d4731;
                  var G__7501 = e4732;
                  var G__7502 = f4733;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__7497, G__7498, G__7499, G__7500, G__7501, G__7502) : f.call(null, G__7497, G__7498, G__7499, G__7500, G__7501, G__7502);
                }
              } else {
                var g4734 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4728, b4729, c4730, d4731, e4732, f4733, g4734);
                  } else {
                    var G__7503 = a4728;
                    var G__7504 = b4729;
                    var G__7505 = c4730;
                    var G__7506 = d4731;
                    var G__7507 = e4732;
                    var G__7508 = f4733;
                    var G__7509 = g4734;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__7503, G__7504, G__7505, G__7506, G__7507, G__7508, G__7509) : f.call(null, G__7503, G__7504, G__7505, G__7506, G__7507, G__7508, G__7509);
                  }
                } else {
                  var h4735 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735);
                    } else {
                      var G__7510 = a4728;
                      var G__7511 = b4729;
                      var G__7512 = c4730;
                      var G__7513 = d4731;
                      var G__7514 = e4732;
                      var G__7515 = f4733;
                      var G__7516 = g4734;
                      var G__7517 = h4735;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__7510, G__7511, G__7512, G__7513, G__7514, G__7515, G__7516, G__7517) : f.call(null, G__7510, G__7511, G__7512, G__7513, G__7514, G__7515, G__7516, G__7517);
                    }
                  } else {
                    var i4736 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736);
                      } else {
                        var G__7518 = a4728;
                        var G__7519 = b4729;
                        var G__7520 = c4730;
                        var G__7521 = d4731;
                        var G__7522 = e4732;
                        var G__7523 = f4733;
                        var G__7524 = g4734;
                        var G__7525 = h4735;
                        var G__7526 = i4736;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__7518, G__7519, G__7520, G__7521, G__7522, G__7523, G__7524, G__7525, G__7526) : f.call(null, G__7518, G__7519, G__7520, G__7521, G__7522, G__7523, G__7524, G__7525, G__7526);
                      }
                    } else {
                      var j4737 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737);
                        } else {
                          var G__7527 = a4728;
                          var G__7528 = b4729;
                          var G__7529 = c4730;
                          var G__7530 = d4731;
                          var G__7531 = e4732;
                          var G__7532 = f4733;
                          var G__7533 = g4734;
                          var G__7534 = h4735;
                          var G__7535 = i4736;
                          var G__7536 = j4737;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__7527, G__7528, G__7529, G__7530, G__7531, G__7532, G__7533, G__7534, G__7535, G__7536) : f.call(null, G__7527, G__7528, G__7529, G__7530, G__7531, G__7532, G__7533, G__7534, G__7535, G__7536);
                        }
                      } else {
                        var k4738 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738);
                          } else {
                            var G__7537 = a4728;
                            var G__7538 = b4729;
                            var G__7539 = c4730;
                            var G__7540 = d4731;
                            var G__7541 = e4732;
                            var G__7542 = f4733;
                            var G__7543 = g4734;
                            var G__7544 = h4735;
                            var G__7545 = i4736;
                            var G__7546 = j4737;
                            var G__7547 = k4738;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__7537, G__7538, G__7539, G__7540, G__7541, G__7542, G__7543, G__7544, G__7545, G__7546, G__7547) : f.call(null, G__7537, G__7538, G__7539, G__7540, G__7541, G__7542, G__7543, G__7544, G__7545, G__7546, G__7547);
                          }
                        } else {
                          var l4739 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738, l4739);
                            } else {
                              var G__7548 = a4728;
                              var G__7549 = b4729;
                              var G__7550 = c4730;
                              var G__7551 = d4731;
                              var G__7552 = e4732;
                              var G__7553 = f4733;
                              var G__7554 = g4734;
                              var G__7555 = h4735;
                              var G__7556 = i4736;
                              var G__7557 = j4737;
                              var G__7558 = k4738;
                              var G__7559 = l4739;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__7548, G__7549, G__7550, G__7551, G__7552, G__7553, G__7554, G__7555, G__7556, G__7557, G__7558, G__7559) : f.call(null, G__7548, G__7549, G__7550, G__7551, G__7552, G__7553, G__7554, G__7555, G__7556, G__7557, G__7558, G__7559);
                            }
                          } else {
                            var m4740 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738, l4739, m4740);
                              } else {
                                var G__7560 = a4728;
                                var G__7561 = b4729;
                                var G__7562 = c4730;
                                var G__7563 = d4731;
                                var G__7564 = e4732;
                                var G__7565 = f4733;
                                var G__7566 = g4734;
                                var G__7567 = h4735;
                                var G__7568 = i4736;
                                var G__7569 = j4737;
                                var G__7570 = k4738;
                                var G__7571 = l4739;
                                var G__7572 = m4740;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__7560, G__7561, G__7562, G__7563, G__7564, G__7565, G__7566, G__7567, G__7568, G__7569, G__7570, G__7571, G__7572) : f.call(null, G__7560, G__7561, G__7562, G__7563, G__7564, G__7565, G__7566, G__7567, G__7568, G__7569, G__7570, G__7571, G__7572);
                              }
                            } else {
                              var n4741 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738, l4739, m4740, n4741);
                                } else {
                                  var G__7573 = a4728;
                                  var G__7574 = b4729;
                                  var G__7575 = c4730;
                                  var G__7576 = d4731;
                                  var G__7577 = e4732;
                                  var G__7578 = f4733;
                                  var G__7579 = g4734;
                                  var G__7580 = h4735;
                                  var G__7581 = i4736;
                                  var G__7582 = j4737;
                                  var G__7583 = k4738;
                                  var G__7584 = l4739;
                                  var G__7585 = m4740;
                                  var G__7586 = n4741;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__7573, G__7574, G__7575, G__7576, G__7577, G__7578, G__7579, G__7580, G__7581, G__7582, G__7583, G__7584, G__7585, G__7586) : f.call(null, G__7573, G__7574, G__7575, G__7576, G__7577, G__7578, G__7579, G__7580, G__7581, G__7582, G__7583, G__7584, G__7585, G__7586);
                                }
                              } else {
                                var o4742 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738, l4739, m4740, n4741, o4742);
                                  } else {
                                    var G__7587 = a4728;
                                    var G__7588 = b4729;
                                    var G__7589 = c4730;
                                    var G__7590 = d4731;
                                    var G__7591 = e4732;
                                    var G__7592 = f4733;
                                    var G__7593 = g4734;
                                    var G__7594 = h4735;
                                    var G__7595 = i4736;
                                    var G__7596 = j4737;
                                    var G__7597 = k4738;
                                    var G__7598 = l4739;
                                    var G__7599 = m4740;
                                    var G__7600 = n4741;
                                    var G__7601 = o4742;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__7587, G__7588, G__7589, G__7590, G__7591, G__7592, G__7593, G__7594, G__7595, G__7596, G__7597, G__7598, G__7599, G__7600, G__7601) : f.call(null, G__7587, G__7588, G__7589, G__7590, G__7591, G__7592, G__7593, G__7594, G__7595, G__7596, G__7597, G__7598, G__7599, G__7600, G__7601);
                                  }
                                } else {
                                  var p4743 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738, l4739, m4740, n4741, o4742, p4743);
                                    } else {
                                      var G__7602 = a4728;
                                      var G__7603 = b4729;
                                      var G__7604 = c4730;
                                      var G__7605 = d4731;
                                      var G__7606 = e4732;
                                      var G__7607 = f4733;
                                      var G__7608 = g4734;
                                      var G__7609 = h4735;
                                      var G__7610 = i4736;
                                      var G__7611 = j4737;
                                      var G__7612 = k4738;
                                      var G__7613 = l4739;
                                      var G__7614 = m4740;
                                      var G__7615 = n4741;
                                      var G__7616 = o4742;
                                      var G__7617 = p4743;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__7602, G__7603, G__7604, G__7605, G__7606, G__7607, G__7608, G__7609, G__7610, G__7611, G__7612, G__7613, G__7614, G__7615, G__7616, G__7617) : f.call(null, G__7602, G__7603, G__7604, G__7605, G__7606, G__7607, G__7608, G__7609, G__7610, G__7611, G__7612, G__7613, G__7614, G__7615, G__7616, G__7617);
                                    }
                                  } else {
                                    var q4744 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738, l4739, m4740, n4741, o4742, p4743, q4744);
                                      } else {
                                        var G__7618 = a4728;
                                        var G__7619 = b4729;
                                        var G__7620 = c4730;
                                        var G__7621 = d4731;
                                        var G__7622 = e4732;
                                        var G__7623 = f4733;
                                        var G__7624 = g4734;
                                        var G__7625 = h4735;
                                        var G__7626 = i4736;
                                        var G__7627 = j4737;
                                        var G__7628 = k4738;
                                        var G__7629 = l4739;
                                        var G__7630 = m4740;
                                        var G__7631 = n4741;
                                        var G__7632 = o4742;
                                        var G__7633 = p4743;
                                        var G__7634 = q4744;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__7618, G__7619, G__7620, G__7621, G__7622, G__7623, G__7624, G__7625, G__7626, G__7627, G__7628, G__7629, G__7630, G__7631, G__7632, G__7633, G__7634) : f.call(null, G__7618, G__7619, G__7620, G__7621, G__7622, G__7623, G__7624, G__7625, G__7626, G__7627, G__7628, G__7629, G__7630, G__7631, G__7632, G__7633, G__7634);
                                      }
                                    } else {
                                      var r4745 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738, l4739, m4740, n4741, o4742, p4743, q4744, r4745);
                                        } else {
                                          var G__7635 = a4728;
                                          var G__7636 = b4729;
                                          var G__7637 = c4730;
                                          var G__7638 = d4731;
                                          var G__7639 = e4732;
                                          var G__7640 = f4733;
                                          var G__7641 = g4734;
                                          var G__7642 = h4735;
                                          var G__7643 = i4736;
                                          var G__7644 = j4737;
                                          var G__7645 = k4738;
                                          var G__7646 = l4739;
                                          var G__7647 = m4740;
                                          var G__7648 = n4741;
                                          var G__7649 = o4742;
                                          var G__7650 = p4743;
                                          var G__7651 = q4744;
                                          var G__7652 = r4745;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__7635, G__7636, G__7637, G__7638, G__7639, G__7640, G__7641, G__7642, G__7643, G__7644, G__7645, G__7646, G__7647, G__7648, G__7649, G__7650, G__7651, G__7652) : f.call(null, G__7635, G__7636, G__7637, G__7638, G__7639, G__7640, G__7641, G__7642, G__7643, G__7644, G__7645, G__7646, G__7647, G__7648, G__7649, G__7650, G__7651, G__7652);
                                        }
                                      } else {
                                        var s4746 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738, l4739, m4740, n4741, o4742, p4743, q4744, r4745, s4746);
                                          } else {
                                            var G__7653 = a4728;
                                            var G__7654 = b4729;
                                            var G__7655 = c4730;
                                            var G__7656 = d4731;
                                            var G__7657 = e4732;
                                            var G__7658 = f4733;
                                            var G__7659 = g4734;
                                            var G__7660 = h4735;
                                            var G__7661 = i4736;
                                            var G__7662 = j4737;
                                            var G__7663 = k4738;
                                            var G__7664 = l4739;
                                            var G__7665 = m4740;
                                            var G__7666 = n4741;
                                            var G__7667 = o4742;
                                            var G__7668 = p4743;
                                            var G__7669 = q4744;
                                            var G__7670 = r4745;
                                            var G__7671 = s4746;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__7653, G__7654, G__7655, G__7656, G__7657, G__7658, G__7659, G__7660, G__7661, G__7662, G__7663, G__7664, G__7665, G__7666, G__7667, G__7668, G__7669, G__7670, G__7671) : f.call(null, G__7653, G__7654, G__7655, G__7656, G__7657, G__7658, G__7659, G__7660, G__7661, G__7662, G__7663, G__7664, G__7665, G__7666, G__7667, G__7668, G__7669, G__7670, G__7671);
                                          }
                                        } else {
                                          var t4747 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4728, b4729, c4730, d4731, e4732, f4733, g4734, h4735, i4736, j4737, k4738, l4739, m4740, n4741, o4742, p4743, q4744, r4745, s4746, t4747);
                                            } else {
                                              var G__7672 = a4728;
                                              var G__7673 = b4729;
                                              var G__7674 = c4730;
                                              var G__7675 = d4731;
                                              var G__7676 = e4732;
                                              var G__7677 = f4733;
                                              var G__7678 = g4734;
                                              var G__7679 = h4735;
                                              var G__7680 = i4736;
                                              var G__7681 = j4737;
                                              var G__7682 = k4738;
                                              var G__7683 = l4739;
                                              var G__7684 = m4740;
                                              var G__7685 = n4741;
                                              var G__7686 = o4742;
                                              var G__7687 = p4743;
                                              var G__7688 = q4744;
                                              var G__7689 = r4745;
                                              var G__7690 = s4746;
                                              var G__7691 = t4747;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__7672, G__7673, G__7674, G__7675, G__7676, G__7677, G__7678, G__7679, G__7680, G__7681, G__7682, G__7683, G__7684, G__7685, G__7686, G__7687, G__7688, G__7689, G__7690, G__7691) : f.call(null, G__7672, G__7673, G__7674, G__7675, G__7676, G__7677, G__7678, G__7679, G__7680, G__7681, G__7682, G__7683, G__7684, G__7685, G__7686, G__7687, G__7688, G__7689, G__7690, G__7691);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__6 = function() {
    var G__7692__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__7692 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__7693__i = 0, G__7693__a = new Array(arguments.length - 5);
        while (G__7693__i < G__7693__a.length) {
          G__7693__a[G__7693__i] = arguments[G__7693__i + 5];
          ++G__7693__i;
        }
        args = new cljs.core.IndexedSeq(G__7693__a, 0);
      }
      return G__7692__delegate.call(this, f, a, b, c, d, args);
    };
    G__7692.cljs$lang$maxFixedArity = 5;
    G__7692.cljs$lang$applyTo = function(arglist__7694) {
      var f = cljs.core.first(arglist__7694);
      arglist__7694 = cljs.core.next(arglist__7694);
      var a = cljs.core.first(arglist__7694);
      arglist__7694 = cljs.core.next(arglist__7694);
      var b = cljs.core.first(arglist__7694);
      arglist__7694 = cljs.core.next(arglist__7694);
      var c = cljs.core.first(arglist__7694);
      arglist__7694 = cljs.core.next(arglist__7694);
      var d = cljs.core.first(arglist__7694);
      var args = cljs.core.rest(arglist__7694);
      return G__7692__delegate(f, a, b, c, d, args);
    };
    G__7692.cljs$core$IFn$_invoke$arity$variadic = G__7692__delegate;
    return G__7692;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        var G__7695 = null;
        if (arguments.length > 5) {
          var G__7696__i = 0, G__7696__a = new Array(arguments.length - 5);
          while (G__7696__i < G__7696__a.length) {
            G__7696__a[G__7696__i] = arguments[G__7696__i + 5];
            ++G__7696__i;
          }
          G__7695 = new cljs.core.IndexedSeq(G__7696__a, 0);
        }
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__7695);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__7712 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7712) : f.call(null, G__7712);
    }());
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__7713 = cljs.core.meta(obj);
      var G__7714 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7713, G__7714) : f.call(null, G__7713, G__7714);
    }());
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__7715 = cljs.core.meta(obj);
      var G__7716 = a;
      var G__7717 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7715, G__7716, G__7717) : f.call(null, G__7715, G__7716, G__7717);
    }());
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__7718 = cljs.core.meta(obj);
      var G__7719 = a;
      var G__7720 = b;
      var G__7721 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__7718, G__7719, G__7720, G__7721) : f.call(null, G__7718, G__7719, G__7720, G__7721);
    }());
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__7722 = cljs.core.meta(obj);
      var G__7723 = a;
      var G__7724 = b;
      var G__7725 = c;
      var G__7726 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__7722, G__7723, G__7724, G__7725, G__7726) : f.call(null, G__7722, G__7723, G__7724, G__7725, G__7726);
    }());
  };
  var vary_meta__7 = function() {
    var G__7727__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__7727 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__7728__i = 0, G__7728__a = new Array(arguments.length - 6);
        while (G__7728__i < G__7728__a.length) {
          G__7728__a[G__7728__i] = arguments[G__7728__i + 6];
          ++G__7728__i;
        }
        args = new cljs.core.IndexedSeq(G__7728__a, 0);
      }
      return G__7727__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__7727.cljs$lang$maxFixedArity = 6;
    G__7727.cljs$lang$applyTo = function(arglist__7729) {
      var obj = cljs.core.first(arglist__7729);
      arglist__7729 = cljs.core.next(arglist__7729);
      var f = cljs.core.first(arglist__7729);
      arglist__7729 = cljs.core.next(arglist__7729);
      var a = cljs.core.first(arglist__7729);
      arglist__7729 = cljs.core.next(arglist__7729);
      var b = cljs.core.first(arglist__7729);
      arglist__7729 = cljs.core.next(arglist__7729);
      var c = cljs.core.first(arglist__7729);
      arglist__7729 = cljs.core.next(arglist__7729);
      var d = cljs.core.first(arglist__7729);
      var args = cljs.core.rest(arglist__7729);
      return G__7727__delegate(obj, f, a, b, c, d, args);
    };
    G__7727.cljs$core$IFn$_invoke$arity$variadic = G__7727__delegate;
    return G__7727;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__7730 = null;
        if (arguments.length > 6) {
          var G__7731__i = 0, G__7731__a = new Array(arguments.length - 6);
          while (G__7731__i < G__7731__a.length) {
            G__7731__a[G__7731__i] = arguments[G__7731__i + 6];
            ++G__7731__i;
          }
          G__7730 = new cljs.core.IndexedSeq(G__7731__a, 0);
        }
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__7730);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var not_EQ___3 = function() {
    var G__7732__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__7732 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7733__i = 0, G__7733__a = new Array(arguments.length - 2);
        while (G__7733__i < G__7733__a.length) {
          G__7733__a[G__7733__i] = arguments[G__7733__i + 2];
          ++G__7733__i;
        }
        more = new cljs.core.IndexedSeq(G__7733__a, 0);
      }
      return G__7732__delegate.call(this, x, y, more);
    };
    G__7732.cljs$lang$maxFixedArity = 2;
    G__7732.cljs$lang$applyTo = function(arglist__7734) {
      var x = cljs.core.first(arglist__7734);
      arglist__7734 = cljs.core.next(arglist__7734);
      var y = cljs.core.first(arglist__7734);
      var more = cljs.core.rest(arglist__7734);
      return G__7732__delegate(x, y, more);
    };
    G__7732.cljs$core$IFn$_invoke$arity$variadic = G__7732__delegate;
    return G__7732;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        var G__7735 = null;
        if (arguments.length > 2) {
          var G__7736__i = 0, G__7736__a = new Array(arguments.length - 2);
          while (G__7736__i < G__7736__a.length) {
            G__7736__a[G__7736__i] = arguments[G__7736__i + 2];
            ++G__7736__i;
          }
          G__7735 = new cljs.core.IndexedSeq(G__7736__a, 0);
        }
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7735);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t7740 !== "undefined") {
  } else {
    cljs.core.t7740 = function(nil_iter, meta7741) {
      this.nil_iter = nil_iter;
      this.meta7741 = meta7741;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t7740.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t7740.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t7740.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t7740.prototype.cljs$core$IMeta$_meta$arity$1 = function(_7742) {
      var self__ = this;
      var _7742__$1 = this;
      return self__.meta7741;
    };
    cljs.core.t7740.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_7742, meta7741__$1) {
      var self__ = this;
      var _7742__$1 = this;
      return new cljs.core.t7740(self__.nil_iter, meta7741__$1);
    };
    cljs.core.t7740.cljs$lang$type = true;
    cljs.core.t7740.cljs$lang$ctorStr = "cljs.core/t7740";
    cljs.core.t7740.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write(writer__4385__auto__, "cljs.core/t7740");
    };
    cljs.core.__GT_t7740 = function __GT_t7740(nil_iter__$1, meta7741) {
      return new cljs.core.t7740(nil_iter__$1, meta7741);
    };
  }
  return new cljs.core.t7740(nil_iter, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 54, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 3067, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 3063, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core.cljs"], 
  null));
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = !(lt.stepper == null);
      if (and__3785__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3785__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__7743 = lt;
        var G__7744 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__7743, G__7744) : self__.xform.call(null, G__7743, G__7744);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__7745 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__7745) : self__.xform.call(null, G__7745);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__7747 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__7747) : xform.call(null, G__7747);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__7749 = cljs.core.next(iters__$1);
        iters__$1 = G__7749;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4684__auto___7750 = self__.iters.length;
  var i_7751 = 0;
  while (true) {
    if (i_7751 < n__4684__auto___7750) {
      self__.nexts[i_7751] = self__.iters[i_7751].next();
      var G__7752 = i_7751 + 1;
      i_7751 = G__7752;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = !(lt.stepper == null);
      if (and__3785__auto__) {
        return this$.hasNext();
      } else {
        return and__3785__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__7748 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__7748) : self__.xform.call(null, G__7748);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__7757 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__7757) : xform.call(null, G__7757);
    }(), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__7758_7762 = cljs.core.seq(colls);
  var chunk__7759_7763 = null;
  var count__7760_7764 = 0;
  var i__7761_7765 = 0;
  while (true) {
    if (i__7761_7765 < count__7760_7764) {
      var coll_7766 = chunk__7759_7763.cljs$core$IIndexed$_nth$arity$2(null, i__7761_7765);
      iters.push(cljs.core.iter(coll_7766));
      var G__7767 = seq__7758_7762;
      var G__7768 = chunk__7759_7763;
      var G__7769 = count__7760_7764;
      var G__7770 = i__7761_7765 + 1;
      seq__7758_7762 = G__7767;
      chunk__7759_7763 = G__7768;
      count__7760_7764 = G__7769;
      i__7761_7765 = G__7770;
      continue;
    } else {
      var temp__4126__auto___7771 = cljs.core.seq(seq__7758_7762);
      if (temp__4126__auto___7771) {
        var seq__7758_7772__$1 = temp__4126__auto___7771;
        if (cljs.core.chunked_seq_QMARK_(seq__7758_7772__$1)) {
          var c__4584__auto___7773 = cljs.core.chunk_first(seq__7758_7772__$1);
          var G__7774 = cljs.core.chunk_rest(seq__7758_7772__$1);
          var G__7775 = c__4584__auto___7773;
          var G__7776 = cljs.core.count(c__4584__auto___7773);
          var G__7777 = 0;
          seq__7758_7762 = G__7774;
          chunk__7759_7763 = G__7775;
          count__7760_7764 = G__7776;
          i__7761_7765 = G__7777;
          continue;
        } else {
          var coll_7778 = cljs.core.first(seq__7758_7772__$1);
          iters.push(cljs.core.iter(coll_7778));
          var G__7779 = cljs.core.next(seq__7758_7772__$1);
          var G__7780 = null;
          var G__7781 = 0;
          var G__7782 = 0;
          seq__7758_7762 = G__7779;
          chunk__7759_7763 = G__7780;
          count__7760_7764 = G__7781;
          i__7761_7765 = G__7782;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__3797__auto__ = cljs.core.seq(coll);
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__7783__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__7783 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__7784__i = 0, G__7784__a = new Array(arguments.length - 2);
        while (G__7784__i < G__7784__a.length) {
          G__7784__a[G__7784__i] = arguments[G__7784__i + 2];
          ++G__7784__i;
        }
        colls = new cljs.core.IndexedSeq(G__7784__a, 0);
      }
      return G__7783__delegate.call(this, xform, coll, colls);
    };
    G__7783.cljs$lang$maxFixedArity = 2;
    G__7783.cljs$lang$applyTo = function(arglist__7785) {
      var xform = cljs.core.first(arglist__7785);
      arglist__7785 = cljs.core.next(arglist__7785);
      var coll = cljs.core.first(arglist__7785);
      var colls = cljs.core.rest(arglist__7785);
      return G__7783__delegate(xform, coll, colls);
    };
    G__7783.cljs$core$IFn$_invoke$arity$variadic = G__7783__delegate;
    return G__7783;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        var G__7786 = null;
        if (arguments.length > 2) {
          var G__7787__i = 0, G__7787__a = new Array(arguments.length - 2);
          while (G__7787__i < G__7787__a.length) {
            G__7787__a[G__7787__i] = arguments[G__7787__i + 2];
            ++G__7787__i;
          }
          G__7786 = new cljs.core.IndexedSeq(G__7787__a, 0);
        }
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__7786);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__7789 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7789) : pred.call(null, G__7789);
      }())) {
        var G__7790 = pred;
        var G__7791 = cljs.core.next(coll);
        pred = G__7790;
        coll = G__7791;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__3797__auto__ = function() {
        var G__7795 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7795) : pred.call(null, G__7795);
      }();
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        var G__7796 = pred;
        var G__7797 = cljs.core.next(coll);
        pred = G__7796;
        coll = G__7797;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__7804 = null;
    var G__7804__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__7804__1 = function(x) {
      return cljs.core.not(function() {
        var G__7801 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7801) : f.call(null, G__7801);
      }());
    };
    var G__7804__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__7802 = x;
        var G__7803 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7802, G__7803) : f.call(null, G__7802, G__7803);
      }());
    };
    var G__7804__3 = function() {
      var G__7805__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__7805 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__7806__i = 0, G__7806__a = new Array(arguments.length - 2);
          while (G__7806__i < G__7806__a.length) {
            G__7806__a[G__7806__i] = arguments[G__7806__i + 2];
            ++G__7806__i;
          }
          zs = new cljs.core.IndexedSeq(G__7806__a, 0);
        }
        return G__7805__delegate.call(this, x, y, zs);
      };
      G__7805.cljs$lang$maxFixedArity = 2;
      G__7805.cljs$lang$applyTo = function(arglist__7807) {
        var x = cljs.core.first(arglist__7807);
        arglist__7807 = cljs.core.next(arglist__7807);
        var y = cljs.core.first(arglist__7807);
        var zs = cljs.core.rest(arglist__7807);
        return G__7805__delegate(x, y, zs);
      };
      G__7805.cljs$core$IFn$_invoke$arity$variadic = G__7805__delegate;
      return G__7805;
    }();
    G__7804 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__7804__0.call(this);
        case 1:
          return G__7804__1.call(this, x);
        case 2:
          return G__7804__2.call(this, x, y);
        default:
          var G__7808 = null;
          if (arguments.length > 2) {
            var G__7809__i = 0, G__7809__a = new Array(arguments.length - 2);
            while (G__7809__i < G__7809__a.length) {
              G__7809__a[G__7809__i] = arguments[G__7809__i + 2];
              ++G__7809__i;
            }
            G__7808 = new cljs.core.IndexedSeq(G__7809__a, 0);
          }
          return G__7804__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7808);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7804.cljs$lang$maxFixedArity = 2;
    G__7804.cljs$lang$applyTo = G__7804__3.cljs$lang$applyTo;
    G__7804.cljs$core$IFn$_invoke$arity$0 = G__7804__0;
    G__7804.cljs$core$IFn$_invoke$arity$1 = G__7804__1;
    G__7804.cljs$core$IFn$_invoke$arity$2 = G__7804__2;
    G__7804.cljs$core$IFn$_invoke$arity$variadic = G__7804__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__7804;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__7810__delegate = function(args) {
      return x;
    };
    var G__7810 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__7811__i = 0, G__7811__a = new Array(arguments.length - 0);
        while (G__7811__i < G__7811__a.length) {
          G__7811__a[G__7811__i] = arguments[G__7811__i + 0];
          ++G__7811__i;
        }
        args = new cljs.core.IndexedSeq(G__7811__a, 0);
      }
      return G__7810__delegate.call(this, args);
    };
    G__7810.cljs$lang$maxFixedArity = 0;
    G__7810.cljs$lang$applyTo = function(arglist__7812) {
      var args = cljs.core.seq(arglist__7812);
      return G__7810__delegate(args);
    };
    G__7810.cljs$core$IFn$_invoke$arity$variadic = G__7810__delegate;
    return G__7810;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__7867 = null;
      var G__7867__0 = function() {
        var G__7840 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7840) : f.call(null, G__7840);
      };
      var G__7867__1 = function(x) {
        var G__7841 = function() {
          var G__7842 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7842) : g.call(null, G__7842);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7841) : f.call(null, G__7841);
      };
      var G__7867__2 = function(x, y) {
        var G__7843 = function() {
          var G__7844 = x;
          var G__7845 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__7844, G__7845) : g.call(null, G__7844, G__7845);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7843) : f.call(null, G__7843);
      };
      var G__7867__3 = function(x, y, z) {
        var G__7846 = function() {
          var G__7847 = x;
          var G__7848 = y;
          var G__7849 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__7847, G__7848, G__7849) : g.call(null, G__7847, G__7848, G__7849);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7846) : f.call(null, G__7846);
      };
      var G__7867__4 = function() {
        var G__7868__delegate = function(x, y, z, args) {
          var G__7850 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7850) : f.call(null, G__7850);
        };
        var G__7868 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__7869__i = 0, G__7869__a = new Array(arguments.length - 3);
            while (G__7869__i < G__7869__a.length) {
              G__7869__a[G__7869__i] = arguments[G__7869__i + 3];
              ++G__7869__i;
            }
            args = new cljs.core.IndexedSeq(G__7869__a, 0);
          }
          return G__7868__delegate.call(this, x, y, z, args);
        };
        G__7868.cljs$lang$maxFixedArity = 3;
        G__7868.cljs$lang$applyTo = function(arglist__7870) {
          var x = cljs.core.first(arglist__7870);
          arglist__7870 = cljs.core.next(arglist__7870);
          var y = cljs.core.first(arglist__7870);
          arglist__7870 = cljs.core.next(arglist__7870);
          var z = cljs.core.first(arglist__7870);
          var args = cljs.core.rest(arglist__7870);
          return G__7868__delegate(x, y, z, args);
        };
        G__7868.cljs$core$IFn$_invoke$arity$variadic = G__7868__delegate;
        return G__7868;
      }();
      G__7867 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7867__0.call(this);
          case 1:
            return G__7867__1.call(this, x);
          case 2:
            return G__7867__2.call(this, x, y);
          case 3:
            return G__7867__3.call(this, x, y, z);
          default:
            var G__7871 = null;
            if (arguments.length > 3) {
              var G__7872__i = 0, G__7872__a = new Array(arguments.length - 3);
              while (G__7872__i < G__7872__a.length) {
                G__7872__a[G__7872__i] = arguments[G__7872__i + 3];
                ++G__7872__i;
              }
              G__7871 = new cljs.core.IndexedSeq(G__7872__a, 0);
            }
            return G__7867__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7871);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7867.cljs$lang$maxFixedArity = 3;
      G__7867.cljs$lang$applyTo = G__7867__4.cljs$lang$applyTo;
      G__7867.cljs$core$IFn$_invoke$arity$0 = G__7867__0;
      G__7867.cljs$core$IFn$_invoke$arity$1 = G__7867__1;
      G__7867.cljs$core$IFn$_invoke$arity$2 = G__7867__2;
      G__7867.cljs$core$IFn$_invoke$arity$3 = G__7867__3;
      G__7867.cljs$core$IFn$_invoke$arity$variadic = G__7867__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7867;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__7873 = null;
      var G__7873__0 = function() {
        var G__7851 = function() {
          var G__7852 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7852) : g.call(null, G__7852);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7851) : f.call(null, G__7851);
      };
      var G__7873__1 = function(x) {
        var G__7853 = function() {
          var G__7854 = function() {
            var G__7855 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__7855) : h.call(null, G__7855);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7854) : g.call(null, G__7854);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7853) : f.call(null, G__7853);
      };
      var G__7873__2 = function(x, y) {
        var G__7856 = function() {
          var G__7857 = function() {
            var G__7858 = x;
            var G__7859 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__7858, G__7859) : h.call(null, G__7858, G__7859);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7857) : g.call(null, G__7857);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7856) : f.call(null, G__7856);
      };
      var G__7873__3 = function(x, y, z) {
        var G__7860 = function() {
          var G__7861 = function() {
            var G__7862 = x;
            var G__7863 = y;
            var G__7864 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__7862, G__7863, G__7864) : h.call(null, G__7862, G__7863, G__7864);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7861) : g.call(null, G__7861);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7860) : f.call(null, G__7860);
      };
      var G__7873__4 = function() {
        var G__7874__delegate = function(x, y, z, args) {
          var G__7865 = function() {
            var G__7866 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7866) : g.call(null, G__7866);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7865) : f.call(null, G__7865);
        };
        var G__7874 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__7875__i = 0, G__7875__a = new Array(arguments.length - 3);
            while (G__7875__i < G__7875__a.length) {
              G__7875__a[G__7875__i] = arguments[G__7875__i + 3];
              ++G__7875__i;
            }
            args = new cljs.core.IndexedSeq(G__7875__a, 0);
          }
          return G__7874__delegate.call(this, x, y, z, args);
        };
        G__7874.cljs$lang$maxFixedArity = 3;
        G__7874.cljs$lang$applyTo = function(arglist__7876) {
          var x = cljs.core.first(arglist__7876);
          arglist__7876 = cljs.core.next(arglist__7876);
          var y = cljs.core.first(arglist__7876);
          arglist__7876 = cljs.core.next(arglist__7876);
          var z = cljs.core.first(arglist__7876);
          var args = cljs.core.rest(arglist__7876);
          return G__7874__delegate(x, y, z, args);
        };
        G__7874.cljs$core$IFn$_invoke$arity$variadic = G__7874__delegate;
        return G__7874;
      }();
      G__7873 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7873__0.call(this);
          case 1:
            return G__7873__1.call(this, x);
          case 2:
            return G__7873__2.call(this, x, y);
          case 3:
            return G__7873__3.call(this, x, y, z);
          default:
            var G__7877 = null;
            if (arguments.length > 3) {
              var G__7878__i = 0, G__7878__a = new Array(arguments.length - 3);
              while (G__7878__i < G__7878__a.length) {
                G__7878__a[G__7878__i] = arguments[G__7878__i + 3];
                ++G__7878__i;
              }
              G__7877 = new cljs.core.IndexedSeq(G__7878__a, 0);
            }
            return G__7873__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7877);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7873.cljs$lang$maxFixedArity = 3;
      G__7873.cljs$lang$applyTo = G__7873__4.cljs$lang$applyTo;
      G__7873.cljs$core$IFn$_invoke$arity$0 = G__7873__0;
      G__7873.cljs$core$IFn$_invoke$arity$1 = G__7873__1;
      G__7873.cljs$core$IFn$_invoke$arity$2 = G__7873__2;
      G__7873.cljs$core$IFn$_invoke$arity$3 = G__7873__3;
      G__7873.cljs$core$IFn$_invoke$arity$variadic = G__7873__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7873;
    }();
  };
  var comp__4 = function() {
    var G__7879__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__7880__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__7881 = cljs.core.first(fs__$2).call(null, ret);
                var G__7882 = cljs.core.next(fs__$2);
                ret = G__7881;
                fs__$2 = G__7882;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__7880 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__7883__i = 0, G__7883__a = new Array(arguments.length - 0);
              while (G__7883__i < G__7883__a.length) {
                G__7883__a[G__7883__i] = arguments[G__7883__i + 0];
                ++G__7883__i;
              }
              args = new cljs.core.IndexedSeq(G__7883__a, 0);
            }
            return G__7880__delegate.call(this, args);
          };
          G__7880.cljs$lang$maxFixedArity = 0;
          G__7880.cljs$lang$applyTo = function(arglist__7884) {
            var args = cljs.core.seq(arglist__7884);
            return G__7880__delegate(args);
          };
          G__7880.cljs$core$IFn$_invoke$arity$variadic = G__7880__delegate;
          return G__7880;
        }();
      }(fs__$1);
    };
    var G__7879 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__7885__i = 0, G__7885__a = new Array(arguments.length - 3);
        while (G__7885__i < G__7885__a.length) {
          G__7885__a[G__7885__i] = arguments[G__7885__i + 3];
          ++G__7885__i;
        }
        fs = new cljs.core.IndexedSeq(G__7885__a, 0);
      }
      return G__7879__delegate.call(this, f1, f2, f3, fs);
    };
    G__7879.cljs$lang$maxFixedArity = 3;
    G__7879.cljs$lang$applyTo = function(arglist__7886) {
      var f1 = cljs.core.first(arglist__7886);
      arglist__7886 = cljs.core.next(arglist__7886);
      var f2 = cljs.core.first(arglist__7886);
      arglist__7886 = cljs.core.next(arglist__7886);
      var f3 = cljs.core.first(arglist__7886);
      var fs = cljs.core.rest(arglist__7886);
      return G__7879__delegate(f1, f2, f3, fs);
    };
    G__7879.cljs$core$IFn$_invoke$arity$variadic = G__7879__delegate;
    return G__7879;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        var G__7887 = null;
        if (arguments.length > 3) {
          var G__7888__i = 0, G__7888__a = new Array(arguments.length - 3);
          while (G__7888__i < G__7888__a.length) {
            G__7888__a[G__7888__i] = arguments[G__7888__i + 3];
            ++G__7888__i;
          }
          G__7887 = new cljs.core.IndexedSeq(G__7888__a, 0);
        }
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__7887);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__7973 = null;
      var G__7973__0 = function() {
        var G__7931 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7931) : f.call(null, G__7931);
      };
      var G__7973__1 = function(x) {
        var G__7932 = arg1;
        var G__7933 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7932, G__7933) : f.call(null, G__7932, G__7933);
      };
      var G__7973__2 = function(x, y) {
        var G__7934 = arg1;
        var G__7935 = x;
        var G__7936 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7934, G__7935, G__7936) : f.call(null, G__7934, G__7935, G__7936);
      };
      var G__7973__3 = function(x, y, z) {
        var G__7937 = arg1;
        var G__7938 = x;
        var G__7939 = y;
        var G__7940 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__7937, G__7938, G__7939, G__7940) : f.call(null, G__7937, G__7938, G__7939, G__7940);
      };
      var G__7973__4 = function() {
        var G__7974__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__7974 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__7975__i = 0, G__7975__a = new Array(arguments.length - 3);
            while (G__7975__i < G__7975__a.length) {
              G__7975__a[G__7975__i] = arguments[G__7975__i + 3];
              ++G__7975__i;
            }
            args = new cljs.core.IndexedSeq(G__7975__a, 0);
          }
          return G__7974__delegate.call(this, x, y, z, args);
        };
        G__7974.cljs$lang$maxFixedArity = 3;
        G__7974.cljs$lang$applyTo = function(arglist__7976) {
          var x = cljs.core.first(arglist__7976);
          arglist__7976 = cljs.core.next(arglist__7976);
          var y = cljs.core.first(arglist__7976);
          arglist__7976 = cljs.core.next(arglist__7976);
          var z = cljs.core.first(arglist__7976);
          var args = cljs.core.rest(arglist__7976);
          return G__7974__delegate(x, y, z, args);
        };
        G__7974.cljs$core$IFn$_invoke$arity$variadic = G__7974__delegate;
        return G__7974;
      }();
      G__7973 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7973__0.call(this);
          case 1:
            return G__7973__1.call(this, x);
          case 2:
            return G__7973__2.call(this, x, y);
          case 3:
            return G__7973__3.call(this, x, y, z);
          default:
            var G__7977 = null;
            if (arguments.length > 3) {
              var G__7978__i = 0, G__7978__a = new Array(arguments.length - 3);
              while (G__7978__i < G__7978__a.length) {
                G__7978__a[G__7978__i] = arguments[G__7978__i + 3];
                ++G__7978__i;
              }
              G__7977 = new cljs.core.IndexedSeq(G__7978__a, 0);
            }
            return G__7973__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7977);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7973.cljs$lang$maxFixedArity = 3;
      G__7973.cljs$lang$applyTo = G__7973__4.cljs$lang$applyTo;
      G__7973.cljs$core$IFn$_invoke$arity$0 = G__7973__0;
      G__7973.cljs$core$IFn$_invoke$arity$1 = G__7973__1;
      G__7973.cljs$core$IFn$_invoke$arity$2 = G__7973__2;
      G__7973.cljs$core$IFn$_invoke$arity$3 = G__7973__3;
      G__7973.cljs$core$IFn$_invoke$arity$variadic = G__7973__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7973;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__7979 = null;
      var G__7979__0 = function() {
        var G__7941 = arg1;
        var G__7942 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7941, G__7942) : f.call(null, G__7941, G__7942);
      };
      var G__7979__1 = function(x) {
        var G__7943 = arg1;
        var G__7944 = arg2;
        var G__7945 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7943, G__7944, G__7945) : f.call(null, G__7943, G__7944, G__7945);
      };
      var G__7979__2 = function(x, y) {
        var G__7946 = arg1;
        var G__7947 = arg2;
        var G__7948 = x;
        var G__7949 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__7946, G__7947, G__7948, G__7949) : f.call(null, G__7946, G__7947, G__7948, G__7949);
      };
      var G__7979__3 = function(x, y, z) {
        var G__7950 = arg1;
        var G__7951 = arg2;
        var G__7952 = x;
        var G__7953 = y;
        var G__7954 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__7950, G__7951, G__7952, G__7953, G__7954) : f.call(null, G__7950, G__7951, G__7952, G__7953, G__7954);
      };
      var G__7979__4 = function() {
        var G__7980__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__7980 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__7981__i = 0, G__7981__a = new Array(arguments.length - 3);
            while (G__7981__i < G__7981__a.length) {
              G__7981__a[G__7981__i] = arguments[G__7981__i + 3];
              ++G__7981__i;
            }
            args = new cljs.core.IndexedSeq(G__7981__a, 0);
          }
          return G__7980__delegate.call(this, x, y, z, args);
        };
        G__7980.cljs$lang$maxFixedArity = 3;
        G__7980.cljs$lang$applyTo = function(arglist__7982) {
          var x = cljs.core.first(arglist__7982);
          arglist__7982 = cljs.core.next(arglist__7982);
          var y = cljs.core.first(arglist__7982);
          arglist__7982 = cljs.core.next(arglist__7982);
          var z = cljs.core.first(arglist__7982);
          var args = cljs.core.rest(arglist__7982);
          return G__7980__delegate(x, y, z, args);
        };
        G__7980.cljs$core$IFn$_invoke$arity$variadic = G__7980__delegate;
        return G__7980;
      }();
      G__7979 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7979__0.call(this);
          case 1:
            return G__7979__1.call(this, x);
          case 2:
            return G__7979__2.call(this, x, y);
          case 3:
            return G__7979__3.call(this, x, y, z);
          default:
            var G__7983 = null;
            if (arguments.length > 3) {
              var G__7984__i = 0, G__7984__a = new Array(arguments.length - 3);
              while (G__7984__i < G__7984__a.length) {
                G__7984__a[G__7984__i] = arguments[G__7984__i + 3];
                ++G__7984__i;
              }
              G__7983 = new cljs.core.IndexedSeq(G__7984__a, 0);
            }
            return G__7979__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7983);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7979.cljs$lang$maxFixedArity = 3;
      G__7979.cljs$lang$applyTo = G__7979__4.cljs$lang$applyTo;
      G__7979.cljs$core$IFn$_invoke$arity$0 = G__7979__0;
      G__7979.cljs$core$IFn$_invoke$arity$1 = G__7979__1;
      G__7979.cljs$core$IFn$_invoke$arity$2 = G__7979__2;
      G__7979.cljs$core$IFn$_invoke$arity$3 = G__7979__3;
      G__7979.cljs$core$IFn$_invoke$arity$variadic = G__7979__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7979;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__7985 = null;
      var G__7985__0 = function() {
        var G__7955 = arg1;
        var G__7956 = arg2;
        var G__7957 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7955, G__7956, G__7957) : f.call(null, G__7955, G__7956, G__7957);
      };
      var G__7985__1 = function(x) {
        var G__7958 = arg1;
        var G__7959 = arg2;
        var G__7960 = arg3;
        var G__7961 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__7958, G__7959, G__7960, G__7961) : f.call(null, G__7958, G__7959, G__7960, G__7961);
      };
      var G__7985__2 = function(x, y) {
        var G__7962 = arg1;
        var G__7963 = arg2;
        var G__7964 = arg3;
        var G__7965 = x;
        var G__7966 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__7962, G__7963, G__7964, G__7965, G__7966) : f.call(null, G__7962, G__7963, G__7964, G__7965, G__7966);
      };
      var G__7985__3 = function(x, y, z) {
        var G__7967 = arg1;
        var G__7968 = arg2;
        var G__7969 = arg3;
        var G__7970 = x;
        var G__7971 = y;
        var G__7972 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__7967, G__7968, G__7969, G__7970, G__7971, G__7972) : f.call(null, G__7967, G__7968, G__7969, G__7970, G__7971, G__7972);
      };
      var G__7985__4 = function() {
        var G__7986__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__7986 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__7987__i = 0, G__7987__a = new Array(arguments.length - 3);
            while (G__7987__i < G__7987__a.length) {
              G__7987__a[G__7987__i] = arguments[G__7987__i + 3];
              ++G__7987__i;
            }
            args = new cljs.core.IndexedSeq(G__7987__a, 0);
          }
          return G__7986__delegate.call(this, x, y, z, args);
        };
        G__7986.cljs$lang$maxFixedArity = 3;
        G__7986.cljs$lang$applyTo = function(arglist__7988) {
          var x = cljs.core.first(arglist__7988);
          arglist__7988 = cljs.core.next(arglist__7988);
          var y = cljs.core.first(arglist__7988);
          arglist__7988 = cljs.core.next(arglist__7988);
          var z = cljs.core.first(arglist__7988);
          var args = cljs.core.rest(arglist__7988);
          return G__7986__delegate(x, y, z, args);
        };
        G__7986.cljs$core$IFn$_invoke$arity$variadic = G__7986__delegate;
        return G__7986;
      }();
      G__7985 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7985__0.call(this);
          case 1:
            return G__7985__1.call(this, x);
          case 2:
            return G__7985__2.call(this, x, y);
          case 3:
            return G__7985__3.call(this, x, y, z);
          default:
            var G__7989 = null;
            if (arguments.length > 3) {
              var G__7990__i = 0, G__7990__a = new Array(arguments.length - 3);
              while (G__7990__i < G__7990__a.length) {
                G__7990__a[G__7990__i] = arguments[G__7990__i + 3];
                ++G__7990__i;
              }
              G__7989 = new cljs.core.IndexedSeq(G__7990__a, 0);
            }
            return G__7985__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7989);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7985.cljs$lang$maxFixedArity = 3;
      G__7985.cljs$lang$applyTo = G__7985__4.cljs$lang$applyTo;
      G__7985.cljs$core$IFn$_invoke$arity$0 = G__7985__0;
      G__7985.cljs$core$IFn$_invoke$arity$1 = G__7985__1;
      G__7985.cljs$core$IFn$_invoke$arity$2 = G__7985__2;
      G__7985.cljs$core$IFn$_invoke$arity$3 = G__7985__3;
      G__7985.cljs$core$IFn$_invoke$arity$variadic = G__7985__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7985;
    }();
  };
  var partial__5 = function() {
    var G__7991__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__7992__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__7992 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__7993__i = 0, G__7993__a = new Array(arguments.length - 0);
            while (G__7993__i < G__7993__a.length) {
              G__7993__a[G__7993__i] = arguments[G__7993__i + 0];
              ++G__7993__i;
            }
            args = new cljs.core.IndexedSeq(G__7993__a, 0);
          }
          return G__7992__delegate.call(this, args);
        };
        G__7992.cljs$lang$maxFixedArity = 0;
        G__7992.cljs$lang$applyTo = function(arglist__7994) {
          var args = cljs.core.seq(arglist__7994);
          return G__7992__delegate(args);
        };
        G__7992.cljs$core$IFn$_invoke$arity$variadic = G__7992__delegate;
        return G__7992;
      }();
    };
    var G__7991 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__7995__i = 0, G__7995__a = new Array(arguments.length - 4);
        while (G__7995__i < G__7995__a.length) {
          G__7995__a[G__7995__i] = arguments[G__7995__i + 4];
          ++G__7995__i;
        }
        more = new cljs.core.IndexedSeq(G__7995__a, 0);
      }
      return G__7991__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__7991.cljs$lang$maxFixedArity = 4;
    G__7991.cljs$lang$applyTo = function(arglist__7996) {
      var f = cljs.core.first(arglist__7996);
      arglist__7996 = cljs.core.next(arglist__7996);
      var arg1 = cljs.core.first(arglist__7996);
      arglist__7996 = cljs.core.next(arglist__7996);
      var arg2 = cljs.core.first(arglist__7996);
      arglist__7996 = cljs.core.next(arglist__7996);
      var arg3 = cljs.core.first(arglist__7996);
      var more = cljs.core.rest(arglist__7996);
      return G__7991__delegate(f, arg1, arg2, arg3, more);
    };
    G__7991.cljs$core$IFn$_invoke$arity$variadic = G__7991__delegate;
    return G__7991;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__7997 = null;
        if (arguments.length > 4) {
          var G__7998__i = 0, G__7998__a = new Array(arguments.length - 4);
          while (G__7998__i < G__7998__a.length) {
            G__7998__a[G__7998__i] = arguments[G__7998__i + 4];
            ++G__7998__i;
          }
          G__7997 = new cljs.core.IndexedSeq(G__7998__a, 0);
        }
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__7997);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__8031 = null;
      var G__8031__1 = function(a) {
        var G__8015 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8015) : f.call(null, G__8015);
      };
      var G__8031__2 = function(a, b) {
        var G__8016 = a == null ? x : a;
        var G__8017 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8016, G__8017) : f.call(null, G__8016, G__8017);
      };
      var G__8031__3 = function(a, b, c) {
        var G__8018 = a == null ? x : a;
        var G__8019 = b;
        var G__8020 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8018, G__8019, G__8020) : f.call(null, G__8018, G__8019, G__8020);
      };
      var G__8031__4 = function() {
        var G__8032__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__8032 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__8033__i = 0, G__8033__a = new Array(arguments.length - 3);
            while (G__8033__i < G__8033__a.length) {
              G__8033__a[G__8033__i] = arguments[G__8033__i + 3];
              ++G__8033__i;
            }
            ds = new cljs.core.IndexedSeq(G__8033__a, 0);
          }
          return G__8032__delegate.call(this, a, b, c, ds);
        };
        G__8032.cljs$lang$maxFixedArity = 3;
        G__8032.cljs$lang$applyTo = function(arglist__8034) {
          var a = cljs.core.first(arglist__8034);
          arglist__8034 = cljs.core.next(arglist__8034);
          var b = cljs.core.first(arglist__8034);
          arglist__8034 = cljs.core.next(arglist__8034);
          var c = cljs.core.first(arglist__8034);
          var ds = cljs.core.rest(arglist__8034);
          return G__8032__delegate(a, b, c, ds);
        };
        G__8032.cljs$core$IFn$_invoke$arity$variadic = G__8032__delegate;
        return G__8032;
      }();
      G__8031 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__8031__1.call(this, a);
          case 2:
            return G__8031__2.call(this, a, b);
          case 3:
            return G__8031__3.call(this, a, b, c);
          default:
            var G__8035 = null;
            if (arguments.length > 3) {
              var G__8036__i = 0, G__8036__a = new Array(arguments.length - 3);
              while (G__8036__i < G__8036__a.length) {
                G__8036__a[G__8036__i] = arguments[G__8036__i + 3];
                ++G__8036__i;
              }
              G__8035 = new cljs.core.IndexedSeq(G__8036__a, 0);
            }
            return G__8031__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8035);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8031.cljs$lang$maxFixedArity = 3;
      G__8031.cljs$lang$applyTo = G__8031__4.cljs$lang$applyTo;
      G__8031.cljs$core$IFn$_invoke$arity$1 = G__8031__1;
      G__8031.cljs$core$IFn$_invoke$arity$2 = G__8031__2;
      G__8031.cljs$core$IFn$_invoke$arity$3 = G__8031__3;
      G__8031.cljs$core$IFn$_invoke$arity$variadic = G__8031__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8031;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__8037 = null;
      var G__8037__2 = function(a, b) {
        var G__8021 = a == null ? x : a;
        var G__8022 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8021, G__8022) : f.call(null, G__8021, G__8022);
      };
      var G__8037__3 = function(a, b, c) {
        var G__8023 = a == null ? x : a;
        var G__8024 = b == null ? y : b;
        var G__8025 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8023, G__8024, G__8025) : f.call(null, G__8023, G__8024, G__8025);
      };
      var G__8037__4 = function() {
        var G__8038__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__8038 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__8039__i = 0, G__8039__a = new Array(arguments.length - 3);
            while (G__8039__i < G__8039__a.length) {
              G__8039__a[G__8039__i] = arguments[G__8039__i + 3];
              ++G__8039__i;
            }
            ds = new cljs.core.IndexedSeq(G__8039__a, 0);
          }
          return G__8038__delegate.call(this, a, b, c, ds);
        };
        G__8038.cljs$lang$maxFixedArity = 3;
        G__8038.cljs$lang$applyTo = function(arglist__8040) {
          var a = cljs.core.first(arglist__8040);
          arglist__8040 = cljs.core.next(arglist__8040);
          var b = cljs.core.first(arglist__8040);
          arglist__8040 = cljs.core.next(arglist__8040);
          var c = cljs.core.first(arglist__8040);
          var ds = cljs.core.rest(arglist__8040);
          return G__8038__delegate(a, b, c, ds);
        };
        G__8038.cljs$core$IFn$_invoke$arity$variadic = G__8038__delegate;
        return G__8038;
      }();
      G__8037 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__8037__2.call(this, a, b);
          case 3:
            return G__8037__3.call(this, a, b, c);
          default:
            var G__8041 = null;
            if (arguments.length > 3) {
              var G__8042__i = 0, G__8042__a = new Array(arguments.length - 3);
              while (G__8042__i < G__8042__a.length) {
                G__8042__a[G__8042__i] = arguments[G__8042__i + 3];
                ++G__8042__i;
              }
              G__8041 = new cljs.core.IndexedSeq(G__8042__a, 0);
            }
            return G__8037__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8041);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8037.cljs$lang$maxFixedArity = 3;
      G__8037.cljs$lang$applyTo = G__8037__4.cljs$lang$applyTo;
      G__8037.cljs$core$IFn$_invoke$arity$2 = G__8037__2;
      G__8037.cljs$core$IFn$_invoke$arity$3 = G__8037__3;
      G__8037.cljs$core$IFn$_invoke$arity$variadic = G__8037__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8037;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__8043 = null;
      var G__8043__2 = function(a, b) {
        var G__8026 = a == null ? x : a;
        var G__8027 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8026, G__8027) : f.call(null, G__8026, G__8027);
      };
      var G__8043__3 = function(a, b, c) {
        var G__8028 = a == null ? x : a;
        var G__8029 = b == null ? y : b;
        var G__8030 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8028, G__8029, G__8030) : f.call(null, G__8028, G__8029, G__8030);
      };
      var G__8043__4 = function() {
        var G__8044__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__8044 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__8045__i = 0, G__8045__a = new Array(arguments.length - 3);
            while (G__8045__i < G__8045__a.length) {
              G__8045__a[G__8045__i] = arguments[G__8045__i + 3];
              ++G__8045__i;
            }
            ds = new cljs.core.IndexedSeq(G__8045__a, 0);
          }
          return G__8044__delegate.call(this, a, b, c, ds);
        };
        G__8044.cljs$lang$maxFixedArity = 3;
        G__8044.cljs$lang$applyTo = function(arglist__8046) {
          var a = cljs.core.first(arglist__8046);
          arglist__8046 = cljs.core.next(arglist__8046);
          var b = cljs.core.first(arglist__8046);
          arglist__8046 = cljs.core.next(arglist__8046);
          var c = cljs.core.first(arglist__8046);
          var ds = cljs.core.rest(arglist__8046);
          return G__8044__delegate(a, b, c, ds);
        };
        G__8044.cljs$core$IFn$_invoke$arity$variadic = G__8044__delegate;
        return G__8044;
      }();
      G__8043 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__8043__2.call(this, a, b);
          case 3:
            return G__8043__3.call(this, a, b, c);
          default:
            var G__8047 = null;
            if (arguments.length > 3) {
              var G__8048__i = 0, G__8048__a = new Array(arguments.length - 3);
              while (G__8048__i < G__8048__a.length) {
                G__8048__a[G__8048__i] = arguments[G__8048__i + 3];
                ++G__8048__i;
              }
              G__8047 = new cljs.core.IndexedSeq(G__8048__a, 0);
            }
            return G__8043__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8047);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8043.cljs$lang$maxFixedArity = 3;
      G__8043.cljs$lang$applyTo = G__8043__4.cljs$lang$applyTo;
      G__8043.cljs$core$IFn$_invoke$arity$2 = G__8043__2;
      G__8043.cljs$core$IFn$_invoke$arity$3 = G__8043__3;
      G__8043.cljs$core$IFn$_invoke$arity$variadic = G__8043__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8043;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function() {
  var map_indexed = null;
  var map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__8079 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__8079) : cljs.core.volatile_BANG_.call(null, G__8079);
      }();
      return function(i) {
        return function() {
          var G__8109 = null;
          var G__8109__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__8109__1 = function(result) {
            var G__8080 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8080) : rf.call(null, G__8080);
          };
          var G__8109__2 = function(result, input) {
            var G__8081 = result;
            var G__8082 = function() {
              var G__8083 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__8084 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8083, G__8084) : f.call(null, G__8083, G__8084);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8081, G__8082) : rf.call(null, G__8081, G__8082);
          };
          G__8109 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__8109__0.call(this);
              case 1:
                return G__8109__1.call(this, result);
              case 2:
                return G__8109__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__8109.cljs$core$IFn$_invoke$arity$0 = G__8109__0;
          G__8109.cljs$core$IFn$_invoke$arity$1 = G__8109__1;
          G__8109.cljs$core$IFn$_invoke$arity$2 = G__8109__2;
          return G__8109;
        }();
      }(i);
    };
  };
  var map_indexed__2 = function(f, coll) {
    var mapi = function mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4684__auto___8110 = size;
            var i_8111 = 0;
            while (true) {
              if (i_8111 < n__4684__auto___8110) {
                cljs.core.chunk_append(b, function() {
                  var G__8105 = idx + i_8111;
                  var G__8106 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8111);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8105, G__8106) : f.call(null, G__8105, G__8106);
                }());
                var G__8112 = i_8111 + 1;
                i_8111 = G__8112;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__8107 = idx;
              var G__8108 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8107, G__8108) : f.call(null, G__8107, G__8108);
            }(), mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return map_indexed__1.call(this, f);
      case 2:
        return map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map_indexed.cljs$core$IFn$_invoke$arity$1 = map_indexed__1;
  map_indexed.cljs$core$IFn$_invoke$arity$2 = map_indexed__2;
  return map_indexed;
}();
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__8131 = null;
        var G__8131__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8131__1 = function(result) {
          var G__8125 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8125) : rf.call(null, G__8125);
        };
        var G__8131__2 = function(result, input) {
          var v = function() {
            var G__8126 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8126) : f.call(null, G__8126);
          }();
          if (v == null) {
            return result;
          } else {
            var G__8127 = result;
            var G__8128 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8127, G__8128) : rf.call(null, G__8127, G__8128);
          }
        };
        G__8131 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8131__0.call(this);
            case 1:
              return G__8131__1.call(this, result);
            case 2:
              return G__8131__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8131.cljs$core$IFn$_invoke$arity$0 = G__8131__0;
        G__8131.cljs$core$IFn$_invoke$arity$1 = G__8131__1;
        G__8131.cljs$core$IFn$_invoke$arity$2 = G__8131__2;
        return G__8131;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4684__auto___8132 = size;
          var i_8133 = 0;
          while (true) {
            if (i_8133 < n__4684__auto___8132) {
              var x_8134 = function() {
                var G__8129 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8133);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8129) : f.call(null, G__8129);
              }();
              if (x_8134 == null) {
              } else {
                cljs.core.chunk_append(b, x_8134);
              }
              var G__8135 = i_8133 + 1;
              i_8133 = G__8135;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__8130 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8130) : f.call(null, G__8130);
          }();
          if (x == null) {
            return keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__8136 = this$__$1;
  return goog.getUid(G__8136);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__8137 = cljs.core.seq(self__.watches);
  var chunk__8138 = null;
  var count__8139 = 0;
  var i__8140 = 0;
  while (true) {
    if (i__8140 < count__8139) {
      var vec__8141 = chunk__8138.cljs$core$IIndexed$_nth$arity$2(null, i__8140);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8141, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8141, 1, null);
      var G__8142_8151 = key;
      var G__8143_8152 = this$__$1;
      var G__8144_8153 = oldval;
      var G__8145_8154 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8142_8151, G__8143_8152, G__8144_8153, G__8145_8154) : f.call(null, G__8142_8151, G__8143_8152, G__8144_8153, G__8145_8154);
      var G__8155 = seq__8137;
      var G__8156 = chunk__8138;
      var G__8157 = count__8139;
      var G__8158 = i__8140 + 1;
      seq__8137 = G__8155;
      chunk__8138 = G__8156;
      count__8139 = G__8157;
      i__8140 = G__8158;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__8137);
      if (temp__4126__auto__) {
        var seq__8137__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8137__$1)) {
          var c__4584__auto__ = cljs.core.chunk_first(seq__8137__$1);
          var G__8159 = cljs.core.chunk_rest(seq__8137__$1);
          var G__8160 = c__4584__auto__;
          var G__8161 = cljs.core.count(c__4584__auto__);
          var G__8162 = 0;
          seq__8137 = G__8159;
          chunk__8138 = G__8160;
          count__8139 = G__8161;
          i__8140 = G__8162;
          continue;
        } else {
          var vec__8146 = cljs.core.first(seq__8137__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8146, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8146, 1, null);
          var G__8147_8163 = key;
          var G__8148_8164 = this$__$1;
          var G__8149_8165 = oldval;
          var G__8150_8166 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8147_8163, G__8148_8164, G__8149_8165, G__8150_8166) : f.call(null, G__8147_8163, G__8148_8164, G__8149_8165, G__8150_8166);
          var G__8167 = cljs.core.next(seq__8137__$1);
          var G__8168 = null;
          var G__8169 = 0;
          var G__8170 = 0;
          seq__8137 = G__8167;
          chunk__8138 = G__8168;
          count__8139 = G__8169;
          i__8140 = G__8170;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__8174__delegate = function(x, p__8171) {
      var map__8173 = p__8171;
      var map__8173__$1 = cljs.core.seq_QMARK_(map__8173) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__8173) : map__8173;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8173__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8173__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__8174 = function(x, var_args) {
      var p__8171 = null;
      if (arguments.length > 1) {
        var G__8175__i = 0, G__8175__a = new Array(arguments.length - 1);
        while (G__8175__i < G__8175__a.length) {
          G__8175__a[G__8175__i] = arguments[G__8175__i + 1];
          ++G__8175__i;
        }
        p__8171 = new cljs.core.IndexedSeq(G__8175__a, 0);
      }
      return G__8174__delegate.call(this, x, p__8171);
    };
    G__8174.cljs$lang$maxFixedArity = 1;
    G__8174.cljs$lang$applyTo = function(arglist__8176) {
      var x = cljs.core.first(arglist__8176);
      var p__8171 = cljs.core.rest(arglist__8176);
      return G__8174__delegate(x, p__8171);
    };
    G__8174.cljs$core$IFn$_invoke$arity$variadic = G__8174__delegate;
    return G__8174;
  }();
  atom = function(x, var_args) {
    var p__8171 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__8177 = null;
        if (arguments.length > 1) {
          var G__8178__i = 0, G__8178__a = new Array(arguments.length - 1);
          while (G__8178__i < G__8178__a.length) {
            G__8178__a[G__8178__i] = arguments[G__8178__i + 1];
            ++G__8178__i;
          }
          G__8177 = new cljs.core.IndexedSeq(G__8178__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__8177);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__8181 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__8181) : validate.call(null, G__8181);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__8182 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8182) : cljs.core.pr_str.call(null, G__8182);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__8189 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8189) : f.call(null, G__8189);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__8190 = a.state;
        var G__8191 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8190, G__8191) : f.call(null, G__8190, G__8191);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__8192 = a.state;
        var G__8193 = x;
        var G__8194 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8192, G__8193, G__8194) : f.call(null, G__8192, G__8193, G__8194);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__8195__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__8195 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__8196__i = 0, G__8196__a = new Array(arguments.length - 4);
        while (G__8196__i < G__8196__a.length) {
          G__8196__a[G__8196__i] = arguments[G__8196__i + 4];
          ++G__8196__i;
        }
        more = new cljs.core.IndexedSeq(G__8196__a, 0);
      }
      return G__8195__delegate.call(this, a, f, x, y, more);
    };
    G__8195.cljs$lang$maxFixedArity = 4;
    G__8195.cljs$lang$applyTo = function(arglist__8197) {
      var a = cljs.core.first(arglist__8197);
      arglist__8197 = cljs.core.next(arglist__8197);
      var f = cljs.core.first(arglist__8197);
      arglist__8197 = cljs.core.next(arglist__8197);
      var x = cljs.core.first(arglist__8197);
      arglist__8197 = cljs.core.next(arglist__8197);
      var y = cljs.core.first(arglist__8197);
      var more = cljs.core.rest(arglist__8197);
      return G__8195__delegate(a, f, x, y, more);
    };
    G__8195.cljs$core$IFn$_invoke$arity$variadic = G__8195__delegate;
    return G__8195;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__8198 = null;
        if (arguments.length > 4) {
          var G__8199__i = 0, G__8199__a = new Array(arguments.length - 4);
          while (G__8199__i < G__8199__a.length) {
            G__8199__a[G__8199__i] = arguments[G__8199__i + 4];
            ++G__8199__i;
          }
          G__8198 = new cljs.core.IndexedSeq(G__8199__a, 0);
        }
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__8198);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function __GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__8266 = null;
          var G__8266__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__8266__1 = function(result) {
            var G__8233 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8233) : rf.call(null, G__8233);
          };
          var G__8266__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__8234 = i;
              var G__8235 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8234, G__8235) : f.call(null, G__8234, G__8235);
            }();
            if (v == null) {
              return result;
            } else {
              var G__8236 = result;
              var G__8237 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8236, G__8237) : rf.call(null, G__8236, G__8237);
            }
          };
          G__8266 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__8266__0.call(this);
              case 1:
                return G__8266__1.call(this, result);
              case 2:
                return G__8266__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__8266.cljs$core$IFn$_invoke$arity$0 = G__8266__0;
          G__8266.cljs$core$IFn$_invoke$arity$1 = G__8266__1;
          G__8266.cljs$core$IFn$_invoke$arity$2 = G__8266__2;
          return G__8266;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4684__auto___8267 = size;
            var i_8268 = 0;
            while (true) {
              if (i_8268 < n__4684__auto___8267) {
                var x_8269 = function() {
                  var G__8262 = idx + i_8268;
                  var G__8263 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8268);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8262, G__8263) : f.call(null, G__8262, G__8263);
                }();
                if (x_8269 == null) {
                } else {
                  cljs.core.chunk_append(b, x_8269);
                }
                var G__8270 = i_8268 + 1;
                i_8268 = G__8270;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__8264 = idx;
              var G__8265 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8264, G__8265) : f.call(null, G__8264, G__8265);
            }();
            if (x == null) {
              return keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__8484 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8484) : p.call(null, G__8484);
        }());
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3785__auto__ = function() {
            var G__8486 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8486) : p.call(null, G__8486);
          }();
          if (cljs.core.truth_(and__3785__auto__)) {
            var G__8487 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8487) : p.call(null, G__8487);
          } else {
            return and__3785__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3785__auto__ = function() {
            var G__8489 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8489) : p.call(null, G__8489);
          }();
          if (cljs.core.truth_(and__3785__auto__)) {
            var and__3785__auto____$1 = function() {
              var G__8491 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8491) : p.call(null, G__8491);
            }();
            if (cljs.core.truth_(and__3785__auto____$1)) {
              var G__8492 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8492) : p.call(null, G__8492);
            } else {
              return and__3785__auto____$1;
            }
          } else {
            return and__3785__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__8661__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__8661 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8662__i = 0, G__8662__a = new Array(arguments.length - 3);
            while (G__8662__i < G__8662__a.length) {
              G__8662__a[G__8662__i] = arguments[G__8662__i + 3];
              ++G__8662__i;
            }
            args = new cljs.core.IndexedSeq(G__8662__a, 0);
          }
          return G__8661__delegate.call(this, x, y, z, args);
        };
        G__8661.cljs$lang$maxFixedArity = 3;
        G__8661.cljs$lang$applyTo = function(arglist__8663) {
          var x = cljs.core.first(arglist__8663);
          arglist__8663 = cljs.core.next(arglist__8663);
          var y = cljs.core.first(arglist__8663);
          arglist__8663 = cljs.core.next(arglist__8663);
          var z = cljs.core.first(arglist__8663);
          var args = cljs.core.rest(arglist__8663);
          return G__8661__delegate(x, y, z, args);
        };
        G__8661.cljs$core$IFn$_invoke$arity$variadic = G__8661__delegate;
        return G__8661;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            var G__8664 = null;
            if (arguments.length > 3) {
              var G__8665__i = 0, G__8665__a = new Array(arguments.length - 3);
              while (G__8665__i < G__8665__a.length) {
                G__8665__a[G__8665__i] = arguments[G__8665__i + 3];
                ++G__8665__i;
              }
              G__8664 = new cljs.core.IndexedSeq(G__8665__a, 0);
            }
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8664);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3785__auto__ = function() {
            var G__8524 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8524) : p1.call(null, G__8524);
          }();
          if (cljs.core.truth_(and__3785__auto__)) {
            var G__8525 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8525) : p2.call(null, G__8525);
          } else {
            return and__3785__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3785__auto__ = function() {
            var G__8527 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8527) : p1.call(null, G__8527);
          }();
          if (cljs.core.truth_(and__3785__auto__)) {
            var and__3785__auto____$1 = function() {
              var G__8529 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8529) : p1.call(null, G__8529);
            }();
            if (cljs.core.truth_(and__3785__auto____$1)) {
              var and__3785__auto____$2 = function() {
                var G__8531 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8531) : p2.call(null, G__8531);
              }();
              if (cljs.core.truth_(and__3785__auto____$2)) {
                var G__8532 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8532) : p2.call(null, G__8532);
              } else {
                return and__3785__auto____$2;
              }
            } else {
              return and__3785__auto____$1;
            }
          } else {
            return and__3785__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3785__auto__ = function() {
            var G__8534 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8534) : p1.call(null, G__8534);
          }();
          if (cljs.core.truth_(and__3785__auto__)) {
            var and__3785__auto____$1 = function() {
              var G__8536 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8536) : p1.call(null, G__8536);
            }();
            if (cljs.core.truth_(and__3785__auto____$1)) {
              var and__3785__auto____$2 = function() {
                var G__8538 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8538) : p1.call(null, G__8538);
              }();
              if (cljs.core.truth_(and__3785__auto____$2)) {
                var and__3785__auto____$3 = function() {
                  var G__8540 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8540) : p2.call(null, G__8540);
                }();
                if (cljs.core.truth_(and__3785__auto____$3)) {
                  var and__3785__auto____$4 = function() {
                    var G__8542 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8542) : p2.call(null, G__8542);
                  }();
                  if (cljs.core.truth_(and__3785__auto____$4)) {
                    var G__8543 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8543) : p2.call(null, G__8543);
                  } else {
                    return and__3785__auto____$4;
                  }
                } else {
                  return and__3785__auto____$3;
                }
              } else {
                return and__3785__auto____$2;
              }
            } else {
              return and__3785__auto____$1;
            }
          } else {
            return and__3785__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__8666__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__8271_SHARP_) {
            var and__3785__auto__ = function() {
              var G__8548 = p1__8271_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8548) : p1.call(null, G__8548);
            }();
            if (cljs.core.truth_(and__3785__auto__)) {
              var G__8549 = p1__8271_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8549) : p2.call(null, G__8549);
            } else {
              return and__3785__auto__;
            }
          }, args));
        };
        var G__8666 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8667__i = 0, G__8667__a = new Array(arguments.length - 3);
            while (G__8667__i < G__8667__a.length) {
              G__8667__a[G__8667__i] = arguments[G__8667__i + 3];
              ++G__8667__i;
            }
            args = new cljs.core.IndexedSeq(G__8667__a, 0);
          }
          return G__8666__delegate.call(this, x, y, z, args);
        };
        G__8666.cljs$lang$maxFixedArity = 3;
        G__8666.cljs$lang$applyTo = function(arglist__8668) {
          var x = cljs.core.first(arglist__8668);
          arglist__8668 = cljs.core.next(arglist__8668);
          var y = cljs.core.first(arglist__8668);
          arglist__8668 = cljs.core.next(arglist__8668);
          var z = cljs.core.first(arglist__8668);
          var args = cljs.core.rest(arglist__8668);
          return G__8666__delegate(x, y, z, args);
        };
        G__8666.cljs$core$IFn$_invoke$arity$variadic = G__8666__delegate;
        return G__8666;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            var G__8669 = null;
            if (arguments.length > 3) {
              var G__8670__i = 0, G__8670__a = new Array(arguments.length - 3);
              while (G__8670__i < G__8670__a.length) {
                G__8670__a[G__8670__i] = arguments[G__8670__i + 3];
                ++G__8670__i;
              }
              G__8669 = new cljs.core.IndexedSeq(G__8670__a, 0);
            }
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8669);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3785__auto__ = function() {
            var G__8595 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8595) : p1.call(null, G__8595);
          }();
          if (cljs.core.truth_(and__3785__auto__)) {
            var and__3785__auto____$1 = function() {
              var G__8597 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8597) : p2.call(null, G__8597);
            }();
            if (cljs.core.truth_(and__3785__auto____$1)) {
              var G__8598 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8598) : p3.call(null, G__8598);
            } else {
              return and__3785__auto____$1;
            }
          } else {
            return and__3785__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3785__auto__ = function() {
            var G__8600 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8600) : p1.call(null, G__8600);
          }();
          if (cljs.core.truth_(and__3785__auto__)) {
            var and__3785__auto____$1 = function() {
              var G__8602 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8602) : p2.call(null, G__8602);
            }();
            if (cljs.core.truth_(and__3785__auto____$1)) {
              var and__3785__auto____$2 = function() {
                var G__8604 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8604) : p3.call(null, G__8604);
              }();
              if (cljs.core.truth_(and__3785__auto____$2)) {
                var and__3785__auto____$3 = function() {
                  var G__8606 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8606) : p1.call(null, G__8606);
                }();
                if (cljs.core.truth_(and__3785__auto____$3)) {
                  var and__3785__auto____$4 = function() {
                    var G__8608 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8608) : p2.call(null, G__8608);
                  }();
                  if (cljs.core.truth_(and__3785__auto____$4)) {
                    var G__8609 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8609) : p3.call(null, G__8609);
                  } else {
                    return and__3785__auto____$4;
                  }
                } else {
                  return and__3785__auto____$3;
                }
              } else {
                return and__3785__auto____$2;
              }
            } else {
              return and__3785__auto____$1;
            }
          } else {
            return and__3785__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3785__auto__ = function() {
            var G__8611 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8611) : p1.call(null, G__8611);
          }();
          if (cljs.core.truth_(and__3785__auto__)) {
            var and__3785__auto____$1 = function() {
              var G__8613 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8613) : p2.call(null, G__8613);
            }();
            if (cljs.core.truth_(and__3785__auto____$1)) {
              var and__3785__auto____$2 = function() {
                var G__8615 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8615) : p3.call(null, G__8615);
              }();
              if (cljs.core.truth_(and__3785__auto____$2)) {
                var and__3785__auto____$3 = function() {
                  var G__8617 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8617) : p1.call(null, G__8617);
                }();
                if (cljs.core.truth_(and__3785__auto____$3)) {
                  var and__3785__auto____$4 = function() {
                    var G__8619 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8619) : p2.call(null, G__8619);
                  }();
                  if (cljs.core.truth_(and__3785__auto____$4)) {
                    var and__3785__auto____$5 = function() {
                      var G__8621 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8621) : p3.call(null, G__8621);
                    }();
                    if (cljs.core.truth_(and__3785__auto____$5)) {
                      var and__3785__auto____$6 = function() {
                        var G__8623 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8623) : p1.call(null, G__8623);
                      }();
                      if (cljs.core.truth_(and__3785__auto____$6)) {
                        var and__3785__auto____$7 = function() {
                          var G__8625 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8625) : p2.call(null, G__8625);
                        }();
                        if (cljs.core.truth_(and__3785__auto____$7)) {
                          var G__8626 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8626) : p3.call(null, G__8626);
                        } else {
                          return and__3785__auto____$7;
                        }
                      } else {
                        return and__3785__auto____$6;
                      }
                    } else {
                      return and__3785__auto____$5;
                    }
                  } else {
                    return and__3785__auto____$4;
                  }
                } else {
                  return and__3785__auto____$3;
                }
              } else {
                return and__3785__auto____$2;
              }
            } else {
              return and__3785__auto____$1;
            }
          } else {
            return and__3785__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__8671__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__8272_SHARP_) {
            var and__3785__auto__ = function() {
              var G__8633 = p1__8272_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8633) : p1.call(null, G__8633);
            }();
            if (cljs.core.truth_(and__3785__auto__)) {
              var and__3785__auto____$1 = function() {
                var G__8635 = p1__8272_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8635) : p2.call(null, G__8635);
              }();
              if (cljs.core.truth_(and__3785__auto____$1)) {
                var G__8636 = p1__8272_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8636) : p3.call(null, G__8636);
              } else {
                return and__3785__auto____$1;
              }
            } else {
              return and__3785__auto__;
            }
          }, args));
        };
        var G__8671 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8672__i = 0, G__8672__a = new Array(arguments.length - 3);
            while (G__8672__i < G__8672__a.length) {
              G__8672__a[G__8672__i] = arguments[G__8672__i + 3];
              ++G__8672__i;
            }
            args = new cljs.core.IndexedSeq(G__8672__a, 0);
          }
          return G__8671__delegate.call(this, x, y, z, args);
        };
        G__8671.cljs$lang$maxFixedArity = 3;
        G__8671.cljs$lang$applyTo = function(arglist__8673) {
          var x = cljs.core.first(arglist__8673);
          arglist__8673 = cljs.core.next(arglist__8673);
          var y = cljs.core.first(arglist__8673);
          arglist__8673 = cljs.core.next(arglist__8673);
          var z = cljs.core.first(arglist__8673);
          var args = cljs.core.rest(arglist__8673);
          return G__8671__delegate(x, y, z, args);
        };
        G__8671.cljs$core$IFn$_invoke$arity$variadic = G__8671__delegate;
        return G__8671;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            var G__8674 = null;
            if (arguments.length > 3) {
              var G__8675__i = 0, G__8675__a = new Array(arguments.length - 3);
              while (G__8675__i < G__8675__a.length) {
                G__8675__a[G__8675__i] = arguments[G__8675__i + 3];
                ++G__8675__i;
              }
              G__8674 = new cljs.core.IndexedSeq(G__8675__a, 0);
            }
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8674);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__8676__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__8273_SHARP_) {
                var G__8652 = x;
                return p1__8273_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8273_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8652) : p1__8273_SHARP_.call(null, G__8652);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__8274_SHARP_) {
                var and__3785__auto__ = function() {
                  var G__8654 = x;
                  return p1__8274_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8274_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8654) : p1__8274_SHARP_.call(null, G__8654);
                }();
                if (cljs.core.truth_(and__3785__auto__)) {
                  var G__8655 = y;
                  return p1__8274_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8274_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8655) : p1__8274_SHARP_.call(null, G__8655);
                } else {
                  return and__3785__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__8275_SHARP_) {
                var and__3785__auto__ = function() {
                  var G__8657 = x;
                  return p1__8275_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8275_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8657) : p1__8275_SHARP_.call(null, G__8657);
                }();
                if (cljs.core.truth_(and__3785__auto__)) {
                  var and__3785__auto____$1 = function() {
                    var G__8659 = y;
                    return p1__8275_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8275_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8659) : p1__8275_SHARP_.call(null, G__8659);
                  }();
                  if (cljs.core.truth_(and__3785__auto____$1)) {
                    var G__8660 = z;
                    return p1__8275_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8275_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8660) : p1__8275_SHARP_.call(null, G__8660);
                  } else {
                    return and__3785__auto____$1;
                  }
                } else {
                  return and__3785__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__8677__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__8276_SHARP_) {
                  return cljs.core.every_QMARK_(p1__8276_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__8677 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__8678__i = 0, G__8678__a = new Array(arguments.length - 3);
                while (G__8678__i < G__8678__a.length) {
                  G__8678__a[G__8678__i] = arguments[G__8678__i + 3];
                  ++G__8678__i;
                }
                args = new cljs.core.IndexedSeq(G__8678__a, 0);
              }
              return G__8677__delegate.call(this, x, y, z, args);
            };
            G__8677.cljs$lang$maxFixedArity = 3;
            G__8677.cljs$lang$applyTo = function(arglist__8679) {
              var x = cljs.core.first(arglist__8679);
              arglist__8679 = cljs.core.next(arglist__8679);
              var y = cljs.core.first(arglist__8679);
              arglist__8679 = cljs.core.next(arglist__8679);
              var z = cljs.core.first(arglist__8679);
              var args = cljs.core.rest(arglist__8679);
              return G__8677__delegate(x, y, z, args);
            };
            G__8677.cljs$core$IFn$_invoke$arity$variadic = G__8677__delegate;
            return G__8677;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                var G__8680 = null;
                if (arguments.length > 3) {
                  var G__8681__i = 0, G__8681__a = new Array(arguments.length - 3);
                  while (G__8681__i < G__8681__a.length) {
                    G__8681__a[G__8681__i] = arguments[G__8681__i + 3];
                    ++G__8681__i;
                  }
                  G__8680 = new cljs.core.IndexedSeq(G__8681__a, 0);
                }
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8680);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__8676 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__8682__i = 0, G__8682__a = new Array(arguments.length - 3);
        while (G__8682__i < G__8682__a.length) {
          G__8682__a[G__8682__i] = arguments[G__8682__i + 3];
          ++G__8682__i;
        }
        ps = new cljs.core.IndexedSeq(G__8682__a, 0);
      }
      return G__8676__delegate.call(this, p1, p2, p3, ps);
    };
    G__8676.cljs$lang$maxFixedArity = 3;
    G__8676.cljs$lang$applyTo = function(arglist__8683) {
      var p1 = cljs.core.first(arglist__8683);
      arglist__8683 = cljs.core.next(arglist__8683);
      var p2 = cljs.core.first(arglist__8683);
      arglist__8683 = cljs.core.next(arglist__8683);
      var p3 = cljs.core.first(arglist__8683);
      var ps = cljs.core.rest(arglist__8683);
      return G__8676__delegate(p1, p2, p3, ps);
    };
    G__8676.cljs$core$IFn$_invoke$arity$variadic = G__8676__delegate;
    return G__8676;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        var G__8684 = null;
        if (arguments.length > 3) {
          var G__8685__i = 0, G__8685__a = new Array(arguments.length - 3);
          while (G__8685__i < G__8685__a.length) {
            G__8685__a[G__8685__i] = arguments[G__8685__i + 3];
            ++G__8685__i;
          }
          G__8684 = new cljs.core.IndexedSeq(G__8685__a, 0);
        }
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__8684);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        var G__8891 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8891) : p.call(null, G__8891);
      };
      var sp1__2 = function(x, y) {
        var or__3797__auto__ = function() {
          var G__8893 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8893) : p.call(null, G__8893);
        }();
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          var G__8894 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8894) : p.call(null, G__8894);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3797__auto__ = function() {
          var G__8896 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8896) : p.call(null, G__8896);
        }();
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = function() {
            var G__8898 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8898) : p.call(null, G__8898);
          }();
          if (cljs.core.truth_(or__3797__auto____$1)) {
            return or__3797__auto____$1;
          } else {
            var G__8899 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8899) : p.call(null, G__8899);
          }
        }
      };
      var sp1__4 = function() {
        var G__9060__delegate = function(x, y, z, args) {
          var or__3797__auto__ = sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3797__auto__)) {
            return or__3797__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__9060 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9061__i = 0, G__9061__a = new Array(arguments.length - 3);
            while (G__9061__i < G__9061__a.length) {
              G__9061__a[G__9061__i] = arguments[G__9061__i + 3];
              ++G__9061__i;
            }
            args = new cljs.core.IndexedSeq(G__9061__a, 0);
          }
          return G__9060__delegate.call(this, x, y, z, args);
        };
        G__9060.cljs$lang$maxFixedArity = 3;
        G__9060.cljs$lang$applyTo = function(arglist__9062) {
          var x = cljs.core.first(arglist__9062);
          arglist__9062 = cljs.core.next(arglist__9062);
          var y = cljs.core.first(arglist__9062);
          arglist__9062 = cljs.core.next(arglist__9062);
          var z = cljs.core.first(arglist__9062);
          var args = cljs.core.rest(arglist__9062);
          return G__9060__delegate(x, y, z, args);
        };
        G__9060.cljs$core$IFn$_invoke$arity$variadic = G__9060__delegate;
        return G__9060;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            var G__9063 = null;
            if (arguments.length > 3) {
              var G__9064__i = 0, G__9064__a = new Array(arguments.length - 3);
              while (G__9064__i < G__9064__a.length) {
                G__9064__a[G__9064__i] = arguments[G__9064__i + 3];
                ++G__9064__i;
              }
              G__9063 = new cljs.core.IndexedSeq(G__9064__a, 0);
            }
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9063);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3797__auto__ = function() {
          var G__8931 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8931) : p1.call(null, G__8931);
        }();
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          var G__8932 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8932) : p2.call(null, G__8932);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3797__auto__ = function() {
          var G__8934 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8934) : p1.call(null, G__8934);
        }();
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = function() {
            var G__8936 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8936) : p1.call(null, G__8936);
          }();
          if (cljs.core.truth_(or__3797__auto____$1)) {
            return or__3797__auto____$1;
          } else {
            var or__3797__auto____$2 = function() {
              var G__8938 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8938) : p2.call(null, G__8938);
            }();
            if (cljs.core.truth_(or__3797__auto____$2)) {
              return or__3797__auto____$2;
            } else {
              var G__8939 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8939) : p2.call(null, G__8939);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3797__auto__ = function() {
          var G__8941 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8941) : p1.call(null, G__8941);
        }();
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = function() {
            var G__8943 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8943) : p1.call(null, G__8943);
          }();
          if (cljs.core.truth_(or__3797__auto____$1)) {
            return or__3797__auto____$1;
          } else {
            var or__3797__auto____$2 = function() {
              var G__8945 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8945) : p1.call(null, G__8945);
            }();
            if (cljs.core.truth_(or__3797__auto____$2)) {
              return or__3797__auto____$2;
            } else {
              var or__3797__auto____$3 = function() {
                var G__8947 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8947) : p2.call(null, G__8947);
              }();
              if (cljs.core.truth_(or__3797__auto____$3)) {
                return or__3797__auto____$3;
              } else {
                var or__3797__auto____$4 = function() {
                  var G__8949 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8949) : p2.call(null, G__8949);
                }();
                if (cljs.core.truth_(or__3797__auto____$4)) {
                  return or__3797__auto____$4;
                } else {
                  var G__8950 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8950) : p2.call(null, G__8950);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__9065__delegate = function(x, y, z, args) {
          var or__3797__auto__ = sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3797__auto__)) {
            return or__3797__auto__;
          } else {
            return cljs.core.some(function(or__3797__auto__) {
              return function(p1__8686_SHARP_) {
                var or__3797__auto____$1 = function() {
                  var G__8952 = p1__8686_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8952) : p1.call(null, G__8952);
                }();
                if (cljs.core.truth_(or__3797__auto____$1)) {
                  return or__3797__auto____$1;
                } else {
                  var G__8953 = p1__8686_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8953) : p2.call(null, G__8953);
                }
              };
            }(or__3797__auto__), args);
          }
        };
        var G__9065 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9066__i = 0, G__9066__a = new Array(arguments.length - 3);
            while (G__9066__i < G__9066__a.length) {
              G__9066__a[G__9066__i] = arguments[G__9066__i + 3];
              ++G__9066__i;
            }
            args = new cljs.core.IndexedSeq(G__9066__a, 0);
          }
          return G__9065__delegate.call(this, x, y, z, args);
        };
        G__9065.cljs$lang$maxFixedArity = 3;
        G__9065.cljs$lang$applyTo = function(arglist__9067) {
          var x = cljs.core.first(arglist__9067);
          arglist__9067 = cljs.core.next(arglist__9067);
          var y = cljs.core.first(arglist__9067);
          arglist__9067 = cljs.core.next(arglist__9067);
          var z = cljs.core.first(arglist__9067);
          var args = cljs.core.rest(arglist__9067);
          return G__9065__delegate(x, y, z, args);
        };
        G__9065.cljs$core$IFn$_invoke$arity$variadic = G__9065__delegate;
        return G__9065;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            var G__9068 = null;
            if (arguments.length > 3) {
              var G__9069__i = 0, G__9069__a = new Array(arguments.length - 3);
              while (G__9069__i < G__9069__a.length) {
                G__9069__a[G__9069__i] = arguments[G__9069__i + 3];
                ++G__9069__i;
              }
              G__9068 = new cljs.core.IndexedSeq(G__9069__a, 0);
            }
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9068);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3797__auto__ = function() {
          var G__8999 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8999) : p1.call(null, G__8999);
        }();
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = function() {
            var G__9001 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9001) : p2.call(null, G__9001);
          }();
          if (cljs.core.truth_(or__3797__auto____$1)) {
            return or__3797__auto____$1;
          } else {
            var G__9002 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9002) : p3.call(null, G__9002);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3797__auto__ = function() {
          var G__9004 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9004) : p1.call(null, G__9004);
        }();
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = function() {
            var G__9006 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9006) : p2.call(null, G__9006);
          }();
          if (cljs.core.truth_(or__3797__auto____$1)) {
            return or__3797__auto____$1;
          } else {
            var or__3797__auto____$2 = function() {
              var G__9008 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9008) : p3.call(null, G__9008);
            }();
            if (cljs.core.truth_(or__3797__auto____$2)) {
              return or__3797__auto____$2;
            } else {
              var or__3797__auto____$3 = function() {
                var G__9010 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9010) : p1.call(null, G__9010);
              }();
              if (cljs.core.truth_(or__3797__auto____$3)) {
                return or__3797__auto____$3;
              } else {
                var or__3797__auto____$4 = function() {
                  var G__9012 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9012) : p2.call(null, G__9012);
                }();
                if (cljs.core.truth_(or__3797__auto____$4)) {
                  return or__3797__auto____$4;
                } else {
                  var G__9013 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9013) : p3.call(null, G__9013);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3797__auto__ = function() {
          var G__9015 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9015) : p1.call(null, G__9015);
        }();
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = function() {
            var G__9017 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9017) : p2.call(null, G__9017);
          }();
          if (cljs.core.truth_(or__3797__auto____$1)) {
            return or__3797__auto____$1;
          } else {
            var or__3797__auto____$2 = function() {
              var G__9019 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9019) : p3.call(null, G__9019);
            }();
            if (cljs.core.truth_(or__3797__auto____$2)) {
              return or__3797__auto____$2;
            } else {
              var or__3797__auto____$3 = function() {
                var G__9021 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9021) : p1.call(null, G__9021);
              }();
              if (cljs.core.truth_(or__3797__auto____$3)) {
                return or__3797__auto____$3;
              } else {
                var or__3797__auto____$4 = function() {
                  var G__9023 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9023) : p2.call(null, G__9023);
                }();
                if (cljs.core.truth_(or__3797__auto____$4)) {
                  return or__3797__auto____$4;
                } else {
                  var or__3797__auto____$5 = function() {
                    var G__9025 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9025) : p3.call(null, G__9025);
                  }();
                  if (cljs.core.truth_(or__3797__auto____$5)) {
                    return or__3797__auto____$5;
                  } else {
                    var or__3797__auto____$6 = function() {
                      var G__9027 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9027) : p1.call(null, G__9027);
                    }();
                    if (cljs.core.truth_(or__3797__auto____$6)) {
                      return or__3797__auto____$6;
                    } else {
                      var or__3797__auto____$7 = function() {
                        var G__9029 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9029) : p2.call(null, G__9029);
                      }();
                      if (cljs.core.truth_(or__3797__auto____$7)) {
                        return or__3797__auto____$7;
                      } else {
                        var G__9030 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9030) : p3.call(null, G__9030);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__9070__delegate = function(x, y, z, args) {
          var or__3797__auto__ = sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3797__auto__)) {
            return or__3797__auto__;
          } else {
            return cljs.core.some(function(or__3797__auto__) {
              return function(p1__8687_SHARP_) {
                var or__3797__auto____$1 = function() {
                  var G__9032 = p1__8687_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9032) : p1.call(null, G__9032);
                }();
                if (cljs.core.truth_(or__3797__auto____$1)) {
                  return or__3797__auto____$1;
                } else {
                  var or__3797__auto____$2 = function() {
                    var G__9034 = p1__8687_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9034) : p2.call(null, G__9034);
                  }();
                  if (cljs.core.truth_(or__3797__auto____$2)) {
                    return or__3797__auto____$2;
                  } else {
                    var G__9035 = p1__8687_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9035) : p3.call(null, G__9035);
                  }
                }
              };
            }(or__3797__auto__), args);
          }
        };
        var G__9070 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9071__i = 0, G__9071__a = new Array(arguments.length - 3);
            while (G__9071__i < G__9071__a.length) {
              G__9071__a[G__9071__i] = arguments[G__9071__i + 3];
              ++G__9071__i;
            }
            args = new cljs.core.IndexedSeq(G__9071__a, 0);
          }
          return G__9070__delegate.call(this, x, y, z, args);
        };
        G__9070.cljs$lang$maxFixedArity = 3;
        G__9070.cljs$lang$applyTo = function(arglist__9072) {
          var x = cljs.core.first(arglist__9072);
          arglist__9072 = cljs.core.next(arglist__9072);
          var y = cljs.core.first(arglist__9072);
          arglist__9072 = cljs.core.next(arglist__9072);
          var z = cljs.core.first(arglist__9072);
          var args = cljs.core.rest(arglist__9072);
          return G__9070__delegate(x, y, z, args);
        };
        G__9070.cljs$core$IFn$_invoke$arity$variadic = G__9070__delegate;
        return G__9070;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            var G__9073 = null;
            if (arguments.length > 3) {
              var G__9074__i = 0, G__9074__a = new Array(arguments.length - 3);
              while (G__9074__i < G__9074__a.length) {
                G__9074__a[G__9074__i] = arguments[G__9074__i + 3];
                ++G__9074__i;
              }
              G__9073 = new cljs.core.IndexedSeq(G__9074__a, 0);
            }
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9073);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__9075__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__8688_SHARP_) {
                var G__9051 = x;
                return p1__8688_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8688_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9051) : p1__8688_SHARP_.call(null, G__9051);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__8689_SHARP_) {
                var or__3797__auto__ = function() {
                  var G__9053 = x;
                  return p1__8689_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8689_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9053) : p1__8689_SHARP_.call(null, G__9053);
                }();
                if (cljs.core.truth_(or__3797__auto__)) {
                  return or__3797__auto__;
                } else {
                  var G__9054 = y;
                  return p1__8689_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8689_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9054) : p1__8689_SHARP_.call(null, G__9054);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__8690_SHARP_) {
                var or__3797__auto__ = function() {
                  var G__9056 = x;
                  return p1__8690_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8690_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9056) : p1__8690_SHARP_.call(null, G__9056);
                }();
                if (cljs.core.truth_(or__3797__auto__)) {
                  return or__3797__auto__;
                } else {
                  var or__3797__auto____$1 = function() {
                    var G__9058 = y;
                    return p1__8690_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8690_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9058) : p1__8690_SHARP_.call(null, G__9058);
                  }();
                  if (cljs.core.truth_(or__3797__auto____$1)) {
                    return or__3797__auto____$1;
                  } else {
                    var G__9059 = z;
                    return p1__8690_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8690_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9059) : p1__8690_SHARP_.call(null, G__9059);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__9076__delegate = function(x, y, z, args) {
              var or__3797__auto__ = spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__3797__auto__)) {
                return or__3797__auto__;
              } else {
                return cljs.core.some(function(or__3797__auto__, ps__$1) {
                  return function(p1__8691_SHARP_) {
                    return cljs.core.some(p1__8691_SHARP_, args);
                  };
                }(or__3797__auto__, ps__$1), ps__$1);
              }
            };
            var G__9076 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__9077__i = 0, G__9077__a = new Array(arguments.length - 3);
                while (G__9077__i < G__9077__a.length) {
                  G__9077__a[G__9077__i] = arguments[G__9077__i + 3];
                  ++G__9077__i;
                }
                args = new cljs.core.IndexedSeq(G__9077__a, 0);
              }
              return G__9076__delegate.call(this, x, y, z, args);
            };
            G__9076.cljs$lang$maxFixedArity = 3;
            G__9076.cljs$lang$applyTo = function(arglist__9078) {
              var x = cljs.core.first(arglist__9078);
              arglist__9078 = cljs.core.next(arglist__9078);
              var y = cljs.core.first(arglist__9078);
              arglist__9078 = cljs.core.next(arglist__9078);
              var z = cljs.core.first(arglist__9078);
              var args = cljs.core.rest(arglist__9078);
              return G__9076__delegate(x, y, z, args);
            };
            G__9076.cljs$core$IFn$_invoke$arity$variadic = G__9076__delegate;
            return G__9076;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                var G__9079 = null;
                if (arguments.length > 3) {
                  var G__9080__i = 0, G__9080__a = new Array(arguments.length - 3);
                  while (G__9080__i < G__9080__a.length) {
                    G__9080__a[G__9080__i] = arguments[G__9080__i + 3];
                    ++G__9080__i;
                  }
                  G__9079 = new cljs.core.IndexedSeq(G__9080__a, 0);
                }
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9079);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__9075 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__9081__i = 0, G__9081__a = new Array(arguments.length - 3);
        while (G__9081__i < G__9081__a.length) {
          G__9081__a[G__9081__i] = arguments[G__9081__i + 3];
          ++G__9081__i;
        }
        ps = new cljs.core.IndexedSeq(G__9081__a, 0);
      }
      return G__9075__delegate.call(this, p1, p2, p3, ps);
    };
    G__9075.cljs$lang$maxFixedArity = 3;
    G__9075.cljs$lang$applyTo = function(arglist__9082) {
      var p1 = cljs.core.first(arglist__9082);
      arglist__9082 = cljs.core.next(arglist__9082);
      var p2 = cljs.core.first(arglist__9082);
      arglist__9082 = cljs.core.next(arglist__9082);
      var p3 = cljs.core.first(arglist__9082);
      var ps = cljs.core.rest(arglist__9082);
      return G__9075__delegate(p1, p2, p3, ps);
    };
    G__9075.cljs$core$IFn$_invoke$arity$variadic = G__9075__delegate;
    return G__9075;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        var G__9083 = null;
        if (arguments.length > 3) {
          var G__9084__i = 0, G__9084__a = new Array(arguments.length - 3);
          while (G__9084__i < G__9084__a.length) {
            G__9084__a[G__9084__i] = arguments[G__9084__i + 3];
            ++G__9084__i;
          }
          G__9083 = new cljs.core.IndexedSeq(G__9084__a, 0);
        }
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__9083);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__9139 = null;
        var G__9139__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9139__1 = function(result) {
          var G__9125 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9125) : rf.call(null, G__9125);
        };
        var G__9139__2 = function(result, input) {
          var G__9126 = result;
          var G__9127 = function() {
            var G__9128 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9128) : f.call(null, G__9128);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9126, G__9127) : rf.call(null, G__9126, G__9127);
        };
        var G__9139__3 = function() {
          var G__9140__delegate = function(result, input, inputs) {
            var G__9129 = result;
            var G__9130 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9129, G__9130) : rf.call(null, G__9129, G__9130);
          };
          var G__9140 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__9141__i = 0, G__9141__a = new Array(arguments.length - 2);
              while (G__9141__i < G__9141__a.length) {
                G__9141__a[G__9141__i] = arguments[G__9141__i + 2];
                ++G__9141__i;
              }
              inputs = new cljs.core.IndexedSeq(G__9141__a, 0);
            }
            return G__9140__delegate.call(this, result, input, inputs);
          };
          G__9140.cljs$lang$maxFixedArity = 2;
          G__9140.cljs$lang$applyTo = function(arglist__9142) {
            var result = cljs.core.first(arglist__9142);
            arglist__9142 = cljs.core.next(arglist__9142);
            var input = cljs.core.first(arglist__9142);
            var inputs = cljs.core.rest(arglist__9142);
            return G__9140__delegate(result, input, inputs);
          };
          G__9140.cljs$core$IFn$_invoke$arity$variadic = G__9140__delegate;
          return G__9140;
        }();
        G__9139 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__9139__0.call(this);
            case 1:
              return G__9139__1.call(this, result);
            case 2:
              return G__9139__2.call(this, result, input);
            default:
              var G__9143 = null;
              if (arguments.length > 2) {
                var G__9144__i = 0, G__9144__a = new Array(arguments.length - 2);
                while (G__9144__i < G__9144__a.length) {
                  G__9144__a[G__9144__i] = arguments[G__9144__i + 2];
                  ++G__9144__i;
                }
                G__9143 = new cljs.core.IndexedSeq(G__9144__a, 0);
              }
              return G__9139__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__9143);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9139.cljs$lang$maxFixedArity = 2;
        G__9139.cljs$lang$applyTo = G__9139__3.cljs$lang$applyTo;
        G__9139.cljs$core$IFn$_invoke$arity$0 = G__9139__0;
        G__9139.cljs$core$IFn$_invoke$arity$1 = G__9139__1;
        G__9139.cljs$core$IFn$_invoke$arity$2 = G__9139__2;
        G__9139.cljs$core$IFn$_invoke$arity$variadic = G__9139__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__9139;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4684__auto___9145 = size;
          var i_9146 = 0;
          while (true) {
            if (i_9146 < n__4684__auto___9145) {
              cljs.core.chunk_append(b, function() {
                var G__9131 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9146);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9131) : f.call(null, G__9131);
              }());
              var G__9147 = i_9146 + 1;
              i_9146 = G__9147;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__9132 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9132) : f.call(null, G__9132);
          }(), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__9133 = cljs.core.first(s1);
          var G__9134 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9133, G__9134) : f.call(null, G__9133, G__9134);
        }(), map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__9135 = cljs.core.first(s1);
          var G__9136 = cljs.core.first(s2);
          var G__9137 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9135, G__9136, G__9137) : f.call(null, G__9135, G__9136, G__9137);
        }(), map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__9148__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), step(map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__9085_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__9085_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__9148 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__9149__i = 0, G__9149__a = new Array(arguments.length - 4);
        while (G__9149__i < G__9149__a.length) {
          G__9149__a[G__9149__i] = arguments[G__9149__i + 4];
          ++G__9149__i;
        }
        colls = new cljs.core.IndexedSeq(G__9149__a, 0);
      }
      return G__9148__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9148.cljs$lang$maxFixedArity = 4;
    G__9148.cljs$lang$applyTo = function(arglist__9150) {
      var f = cljs.core.first(arglist__9150);
      arglist__9150 = cljs.core.next(arglist__9150);
      var c1 = cljs.core.first(arglist__9150);
      arglist__9150 = cljs.core.next(arglist__9150);
      var c2 = cljs.core.first(arglist__9150);
      arglist__9150 = cljs.core.next(arglist__9150);
      var c3 = cljs.core.first(arglist__9150);
      var colls = cljs.core.rest(arglist__9150);
      return G__9148__delegate(f, c1, c2, c3, colls);
    };
    G__9148.cljs$core$IFn$_invoke$arity$variadic = G__9148__delegate;
    return G__9148;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        var G__9151 = null;
        if (arguments.length > 4) {
          var G__9152__i = 0, G__9152__a = new Array(arguments.length - 4);
          while (G__9152__i < G__9152__a.length) {
            G__9152__a[G__9152__i] = arguments[G__9152__i + 4];
            ++G__9152__i;
          }
          G__9151 = new cljs.core.IndexedSeq(G__9152__a, 0);
        }
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__9151);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__9161 = null;
          var G__9161__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9161__1 = function(result) {
            var G__9158 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9158) : rf.call(null, G__9158);
          };
          var G__9161__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__9159 = result;
              var G__9160 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9159, G__9160) : rf.call(null, G__9159, G__9160);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__9161 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9161__0.call(this);
              case 1:
                return G__9161__1.call(this, result);
              case 2:
                return G__9161__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9161.cljs$core$IFn$_invoke$arity$0 = G__9161__0;
          G__9161.cljs$core$IFn$_invoke$arity$1 = G__9161__1;
          G__9161.cljs$core$IFn$_invoke$arity$2 = G__9161__2;
          return G__9161;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__9168 = null;
          var G__9168__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9168__1 = function(result) {
            var G__9165 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9165) : rf.call(null, G__9165);
          };
          var G__9168__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__9166 = result;
              var G__9167 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9166, G__9167) : rf.call(null, G__9166, G__9167);
            }
          };
          G__9168 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9168__0.call(this);
              case 1:
                return G__9168__1.call(this, result);
              case 2:
                return G__9168__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9168.cljs$core$IFn$_invoke$arity$0 = G__9168__0;
          G__9168.cljs$core$IFn$_invoke$arity$1 = G__9168__1;
          G__9168.cljs$core$IFn$_invoke$arity$2 = G__9168__2;
          return G__9168;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__9169 = n__$1 - 1;
          var G__9170 = cljs.core.rest(s);
          n__$1 = G__9169;
          coll__$1 = G__9170;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__9173 = cljs.core.next(s);
      var G__9174 = cljs.core.next(lead);
      s = G__9173;
      lead = G__9174;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__9187 = null;
          var G__9187__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9187__1 = function(result) {
            var G__9181 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9181) : rf.call(null, G__9181);
          };
          var G__9187__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__3785__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3785__auto__)) {
                var G__9182 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9182) : pred.call(null, G__9182);
              } else {
                return and__3785__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__9183 = result;
              var G__9184 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9183, G__9184) : rf.call(null, G__9183, G__9184);
            }
          };
          G__9187 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9187__0.call(this);
              case 1:
                return G__9187__1.call(this, result);
              case 2:
                return G__9187__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9187.cljs$core$IFn$_invoke$arity$0 = G__9187__0;
          G__9187.cljs$core$IFn$_invoke$arity$1 = G__9187__1;
          G__9187.cljs$core$IFn$_invoke$arity$2 = G__9187__2;
          return G__9187;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__3785__auto__ = s;
          if (and__3785__auto__) {
            var G__9186 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__9186) : pred__$1.call(null, G__9186);
          } else {
            return and__3785__auto__;
          }
        }())) {
          var G__9188 = pred__$1;
          var G__9189 = cljs.core.rest(s);
          pred__$1 = G__9188;
          coll__$1 = G__9189;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return iterate(f, function() {
      var G__9198 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9198) : f.call(null, G__9198);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__9201__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__9201 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__9202__i = 0, G__9202__a = new Array(arguments.length - 2);
        while (G__9202__i < G__9202__a.length) {
          G__9202__a[G__9202__i] = arguments[G__9202__i + 2];
          ++G__9202__i;
        }
        colls = new cljs.core.IndexedSeq(G__9202__a, 0);
      }
      return G__9201__delegate.call(this, c1, c2, colls);
    };
    G__9201.cljs$lang$maxFixedArity = 2;
    G__9201.cljs$lang$applyTo = function(arglist__9203) {
      var c1 = cljs.core.first(arglist__9203);
      arglist__9203 = cljs.core.next(arglist__9203);
      var c2 = cljs.core.first(arglist__9203);
      var colls = cljs.core.rest(arglist__9203);
      return G__9201__delegate(c1, c2, colls);
    };
    G__9201.cljs$core$IFn$_invoke$arity$variadic = G__9201__delegate;
    return G__9201;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        var G__9204 = null;
        if (arguments.length > 2) {
          var G__9205__i = 0, G__9205__a = new Array(arguments.length - 2);
          while (G__9205__i < G__9205__a.length) {
            G__9205__a[G__9205__i] = arguments[G__9205__i + 2];
            ++G__9205__i;
          }
          G__9204 = new cljs.core.IndexedSeq(G__9205__a, 0);
        }
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__9204);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function() {
  var interpose = null;
  var interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__9220 = null;
          var G__9220__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9220__1 = function(result) {
            var G__9213 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9213) : rf.call(null, G__9213);
          };
          var G__9220__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__9214 = result;
                var G__9215 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9214, G__9215) : rf.call(null, G__9214, G__9215);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__9216 = sepr;
                var G__9217 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9216, G__9217) : rf.call(null, G__9216, G__9217);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__9218 = result;
              var G__9219 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9218, G__9219) : rf.call(null, G__9218, G__9219);
            }
          };
          G__9220 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9220__0.call(this);
              case 1:
                return G__9220__1.call(this, result);
              case 2:
                return G__9220__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9220.cljs$core$IFn$_invoke$arity$0 = G__9220__0;
          G__9220.cljs$core$IFn$_invoke$arity$1 = G__9220__1;
          G__9220.cljs$core$IFn$_invoke$arity$2 = G__9220__2;
          return G__9220;
        }();
      }(started);
    };
  };
  var interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return interpose__1.call(this, sep);
      case 2:
        return interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interpose.cljs$core$IFn$_invoke$arity$1 = interpose__1;
  interpose.cljs$core$IFn$_invoke$arity$2 = interpose__2;
  return interpose;
}();
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__9229__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__9229 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__9230__i = 0, G__9230__a = new Array(arguments.length - 1);
        while (G__9230__i < G__9230__a.length) {
          G__9230__a[G__9230__i] = arguments[G__9230__i + 1];
          ++G__9230__i;
        }
        colls = new cljs.core.IndexedSeq(G__9230__a, 0);
      }
      return G__9229__delegate.call(this, f, colls);
    };
    G__9229.cljs$lang$maxFixedArity = 1;
    G__9229.cljs$lang$applyTo = function(arglist__9231) {
      var f = cljs.core.first(arglist__9231);
      var colls = cljs.core.rest(arglist__9231);
      return G__9229__delegate(f, colls);
    };
    G__9229.cljs$core$IFn$_invoke$arity$variadic = G__9229__delegate;
    return G__9229;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        var G__9232 = null;
        if (arguments.length > 1) {
          var G__9233__i = 0, G__9233__a = new Array(arguments.length - 1);
          while (G__9233__i < G__9233__a.length) {
            G__9233__a[G__9233__i] = arguments[G__9233__i + 1];
            ++G__9233__i;
          }
          G__9232 = new cljs.core.IndexedSeq(G__9233__a, 0);
        }
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__9232);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__9252 = null;
        var G__9252__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9252__1 = function(result) {
          var G__9246 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9246) : rf.call(null, G__9246);
        };
        var G__9252__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__9247 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9247) : pred.call(null, G__9247);
          }())) {
            var G__9248 = result;
            var G__9249 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9248, G__9249) : rf.call(null, G__9248, G__9249);
          } else {
            return result;
          }
        };
        G__9252 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9252__0.call(this);
            case 1:
              return G__9252__1.call(this, result);
            case 2:
              return G__9252__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9252.cljs$core$IFn$_invoke$arity$0 = G__9252__0;
        G__9252.cljs$core$IFn$_invoke$arity$1 = G__9252__1;
        G__9252.cljs$core$IFn$_invoke$arity$2 = G__9252__2;
        return G__9252;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4684__auto___9253 = size;
          var i_9254 = 0;
          while (true) {
            if (i_9254 < n__4684__auto___9253) {
              if (cljs.core.truth_(function() {
                var G__9250 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9254);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9250) : pred.call(null, G__9250);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9254));
              } else {
              }
              var G__9255 = i_9254 + 1;
              i_9254 = G__9255;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__9251 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9251) : pred.call(null, G__9251);
          }())) {
            return cljs.core.cons(f, filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__9262 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__9262) : branch_QMARK_.call(null, G__9262);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(walk, cljs.core.array_seq([function() {
        var G__9263 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__9263) : children.call(null, G__9263);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__9264_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__9264_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__9267 = to;
        if (G__9267) {
          var bit__4471__auto__ = G__9267.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4471__auto__ || G__9267.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__9268 = to;
      if (G__9268) {
        var bit__4471__auto__ = G__9268.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4471__auto__ || G__9268.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__9270 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9270) : f.call(null, G__9270);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__9271__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__9271 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__9272__i = 0, G__9272__a = new Array(arguments.length - 4);
        while (G__9272__i < G__9272__a.length) {
          G__9272__a[G__9272__i] = arguments[G__9272__i + 4];
          ++G__9272__i;
        }
        colls = new cljs.core.IndexedSeq(G__9272__a, 0);
      }
      return G__9271__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9271.cljs$lang$maxFixedArity = 4;
    G__9271.cljs$lang$applyTo = function(arglist__9273) {
      var f = cljs.core.first(arglist__9273);
      arglist__9273 = cljs.core.next(arglist__9273);
      var c1 = cljs.core.first(arglist__9273);
      arglist__9273 = cljs.core.next(arglist__9273);
      var c2 = cljs.core.first(arglist__9273);
      arglist__9273 = cljs.core.next(arglist__9273);
      var c3 = cljs.core.first(arglist__9273);
      var colls = cljs.core.rest(arglist__9273);
      return G__9271__delegate(f, c1, c2, c3, colls);
    };
    G__9271.cljs$core$IFn$_invoke$arity$variadic = G__9271__delegate;
    return G__9271;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__9274 = null;
        if (arguments.length > 4) {
          var G__9275__i = 0, G__9275__a = new Array(arguments.length - 4);
          while (G__9275__i < G__9275__a.length) {
            G__9275__a[G__9275__i] = arguments[G__9275__i + 4];
            ++G__9275__i;
          }
          G__9274 = new cljs.core.IndexedSeq(G__9275__a, 0);
        }
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__9274);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__9277 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9277) : pred.call(null, G__9277);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__9292 = m__$1;
          if (G__9292) {
            var bit__4478__auto__ = G__9292.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4478__auto__ || G__9292.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__9292.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9292);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9292);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__9293 = sentinel;
            var G__9294 = m__$2;
            var G__9295 = cljs.core.next(ks__$1);
            sentinel = G__9293;
            m__$1 = G__9294;
            ks__$1 = G__9295;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__9296, v) {
  var vec__9301 = p__9296;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9301, 0, null);
  var ks = cljs.core.nthnext(vec__9301, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__9302, f) {
    var vec__9340 = p__9302;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9340, 0, null);
    var ks = cljs.core.nthnext(vec__9340, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9341 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9341) : f.call(null, G__9341);
      }());
    }
  };
  var update_in__4 = function(m, p__9303, f, a) {
    var vec__9342 = p__9303;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9342, 0, null);
    var ks = cljs.core.nthnext(vec__9342, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9343 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__9344 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9343, G__9344) : f.call(null, G__9343, G__9344);
      }());
    }
  };
  var update_in__5 = function(m, p__9304, f, a, b) {
    var vec__9345 = p__9304;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9345, 0, null);
    var ks = cljs.core.nthnext(vec__9345, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9346 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__9347 = a;
        var G__9348 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9346, G__9347, G__9348) : f.call(null, G__9346, G__9347, G__9348);
      }());
    }
  };
  var update_in__6 = function(m, p__9305, f, a, b, c) {
    var vec__9349 = p__9305;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9349, 0, null);
    var ks = cljs.core.nthnext(vec__9349, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9350 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__9351 = a;
        var G__9352 = b;
        var G__9353 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9350, G__9351, G__9352, G__9353) : f.call(null, G__9350, G__9351, G__9352, G__9353);
      }());
    }
  };
  var update_in__7 = function() {
    var G__9355__delegate = function(m, p__9306, f, a, b, c, args) {
      var vec__9354 = p__9306;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9354, 0, null);
      var ks = cljs.core.nthnext(vec__9354, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__9355 = function(m, p__9306, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__9356__i = 0, G__9356__a = new Array(arguments.length - 6);
        while (G__9356__i < G__9356__a.length) {
          G__9356__a[G__9356__i] = arguments[G__9356__i + 6];
          ++G__9356__i;
        }
        args = new cljs.core.IndexedSeq(G__9356__a, 0);
      }
      return G__9355__delegate.call(this, m, p__9306, f, a, b, c, args);
    };
    G__9355.cljs$lang$maxFixedArity = 6;
    G__9355.cljs$lang$applyTo = function(arglist__9357) {
      var m = cljs.core.first(arglist__9357);
      arglist__9357 = cljs.core.next(arglist__9357);
      var p__9306 = cljs.core.first(arglist__9357);
      arglist__9357 = cljs.core.next(arglist__9357);
      var f = cljs.core.first(arglist__9357);
      arglist__9357 = cljs.core.next(arglist__9357);
      var a = cljs.core.first(arglist__9357);
      arglist__9357 = cljs.core.next(arglist__9357);
      var b = cljs.core.first(arglist__9357);
      arglist__9357 = cljs.core.next(arglist__9357);
      var c = cljs.core.first(arglist__9357);
      var args = cljs.core.rest(arglist__9357);
      return G__9355__delegate(m, p__9306, f, a, b, c, args);
    };
    G__9355.cljs$core$IFn$_invoke$arity$variadic = G__9355__delegate;
    return G__9355;
  }();
  update_in = function(m, p__9306, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__9306, f);
      case 4:
        return update_in__4.call(this, m, p__9306, f, a);
      case 5:
        return update_in__5.call(this, m, p__9306, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__9306, f, a, b, c);
      default:
        var G__9358 = null;
        if (arguments.length > 6) {
          var G__9359__i = 0, G__9359__a = new Array(arguments.length - 6);
          while (G__9359__i < G__9359__a.length) {
            G__9359__a[G__9359__i] = arguments[G__9359__i + 6];
            ++G__9359__i;
          }
          G__9358 = new cljs.core.IndexedSeq(G__9359__a, 0);
        }
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__9306, f, a, b, c, G__9358);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9370 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9370) : f.call(null, G__9370);
    }());
  };
  var update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9371 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9372 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9371, G__9372) : f.call(null, G__9371, G__9372);
    }());
  };
  var update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9373 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9374 = x;
      var G__9375 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9373, G__9374, G__9375) : f.call(null, G__9373, G__9374, G__9375);
    }());
  };
  var update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9376 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9377 = x;
      var G__9378 = y;
      var G__9379 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9376, G__9377, G__9378, G__9379) : f.call(null, G__9376, G__9377, G__9378, G__9379);
    }());
  };
  var update__7 = function() {
    var G__9380__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__9380 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__9381__i = 0, G__9381__a = new Array(arguments.length - 6);
        while (G__9381__i < G__9381__a.length) {
          G__9381__a[G__9381__i] = arguments[G__9381__i + 6];
          ++G__9381__i;
        }
        more = new cljs.core.IndexedSeq(G__9381__a, 0);
      }
      return G__9380__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__9380.cljs$lang$maxFixedArity = 6;
    G__9380.cljs$lang$applyTo = function(arglist__9382) {
      var m = cljs.core.first(arglist__9382);
      arglist__9382 = cljs.core.next(arglist__9382);
      var k = cljs.core.first(arglist__9382);
      arglist__9382 = cljs.core.next(arglist__9382);
      var f = cljs.core.first(arglist__9382);
      arglist__9382 = cljs.core.next(arglist__9382);
      var x = cljs.core.first(arglist__9382);
      arglist__9382 = cljs.core.next(arglist__9382);
      var y = cljs.core.first(arglist__9382);
      arglist__9382 = cljs.core.next(arglist__9382);
      var z = cljs.core.first(arglist__9382);
      var more = cljs.core.rest(arglist__9382);
      return G__9380__delegate(m, k, f, x, y, z, more);
    };
    G__9380.cljs$core$IFn$_invoke$arity$variadic = G__9380__delegate;
    return G__9380;
  }();
  update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x);
      case 5:
        return update__5.call(this, m, k, f, x, y);
      case 6:
        return update__6.call(this, m, k, f, x, y, z);
      default:
        var G__9383 = null;
        if (arguments.length > 6) {
          var G__9384__i = 0, G__9384__a = new Array(arguments.length - 6);
          while (G__9384__i < G__9384__a.length) {
            G__9384__a[G__9384__i] = arguments[G__9384__i + 6];
            ++G__9384__i;
          }
          G__9383 = new cljs.core.IndexedSeq(G__9384__a, 0);
        }
        return update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__9383);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 6;
  update.cljs$lang$applyTo = update__7.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$6 = update__6;
  update.cljs$core$IFn$_invoke$arity$variadic = update__7.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__9385 = ll - 5;
      var G__9386 = r;
      ll = G__9385;
      ret = G__9386;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__9391 = cljs.core.pv_aget(node, 0);
      var G__9392 = level - 5;
      node = G__9391;
      level = G__9392;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__9393 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__9394 = level - 5;
        node = G__9393;
        level = G__9394;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9404 = init__$2;
              var G__9405 = j + i;
              var G__9406 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9404, G__9405, G__9406) : f.call(null, G__9404, G__9405, G__9406);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9417 = j + 1;
              var G__9418 = init__$3;
              j = G__9417;
              init__$2 = G__9418;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9407 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9407) : cljs.core.deref.call(null, G__9407);
      } else {
        var G__9419 = i + len;
        var G__9420 = init__$2;
        i = G__9419;
        init__$1 = G__9420;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__9408 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__9408) : cljs.core.tv_editable_root.call(null, G__9408);
  }(), function() {
    var G__9409 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__9409) : cljs.core.tv_editable_tail.call(null, G__9409);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9410 = init__$2;
              var G__9411 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9410, G__9411) : f.call(null, G__9410, G__9411);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9421 = j + 1;
              var G__9422 = init__$3;
              j = G__9421;
              init__$2 = G__9422;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9412 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9412) : cljs.core.deref.call(null, G__9412);
      } else {
        var G__9423 = i + len;
        var G__9424 = init__$2;
        i = G__9423;
        init__$1 = G__9424;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__9413 = coll__$1;
      var G__9414 = cljs.core.first_array_for_longvec(coll__$1);
      var G__9415 = 0;
      var G__9416 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9413, G__9414, G__9415, G__9416) : cljs.core.chunked_seq.call(null, G__9413, G__9414, G__9415, G__9416);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4684__auto___9425 = len;
    var i_9426 = 0;
    while (true) {
      if (i_9426 < n__4684__auto___9425) {
        new_tail[i_9426] = self__.tail[i_9426];
        var G__9427 = i_9426 + 1;
        i_9426 = G__9427;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__9428 = null;
  var G__9428__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9428__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9428 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9428__2.call(this, self__, k);
      case 3:
        return G__9428__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9428.cljs$core$IFn$_invoke$arity$2 = G__9428__2;
  G__9428.cljs$core$IFn$_invoke$arity$3 = G__9428__3;
  return G__9428;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9403) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9403)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__9429 = i + 1;
        var G__9430 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__9429;
        out = G__9430;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.vec = function vec(coll) {
  if (coll instanceof Array) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__9431__i = 0, G__9431__a = new Array(arguments.length - 0);
      while (G__9431__i < G__9431__a.length) {
        G__9431__a[G__9431__i] = arguments[G__9431__i + 0];
        ++G__9431__i;
      }
      args = new cljs.core.IndexedSeq(G__9431__a, 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__9432) {
    var args = cljs.core.seq(arglist__9432);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9433 = self__.vec;
      var G__9434 = self__.node;
      var G__9435 = self__.i;
      var G__9436 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9433, G__9434, G__9435, G__9436) : cljs.core.chunked_seq.call(null, G__9433, G__9434, G__9435, G__9436);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9437 = self__.vec;
    var G__9438 = self__.i + self__.off;
    var G__9439 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9437, G__9438, G__9439) : cljs.core.subvec.call(null, G__9437, G__9438, G__9439);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__9440 = self__.vec;
    var G__9441 = self__.i + self__.off;
    var G__9442 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9440, G__9441, G__9442) : cljs.core.subvec.call(null, G__9440, G__9441, G__9442);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9443 = self__.vec;
      var G__9444 = self__.node;
      var G__9445 = self__.i;
      var G__9446 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9443, G__9444, G__9445, G__9446) : cljs.core.chunked_seq.call(null, G__9443, G__9444, G__9445, G__9446);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9447 = self__.vec;
    var G__9448 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9449 = end;
    var G__9450 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9447, G__9448, G__9449, G__9450) : cljs.core.chunked_seq.call(null, G__9447, G__9448, G__9449, G__9450);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__9451 = self__.vec;
  var G__9452 = self__.node;
  var G__9453 = self__.i;
  var G__9454 = self__.off;
  var G__9455 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__9451, G__9452, G__9453, G__9454, G__9455) : cljs.core.chunked_seq.call(null, G__9451, G__9452, G__9453, G__9454, G__9455);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9456 = self__.vec;
    var G__9457 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9458 = end;
    var G__9459 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9456, G__9457, G__9458, G__9459) : cljs.core.chunked_seq.call(null, G__9456, G__9457, G__9458, G__9459);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__9461 = self__.meta;
  var G__9462 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__9463 = self__.start;
  var G__9464 = function() {
    var x__4114__auto__ = self__.end;
    var y__4115__auto__ = v_pos + 1;
    return x__4114__auto__ > y__4115__auto__ ? x__4114__auto__ : y__4115__auto__;
  }();
  var G__9465 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9461, G__9462, G__9463, G__9464, G__9465) : cljs.core.build_subvec.call(null, G__9461, G__9462, G__9463, G__9464, G__9465);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__9466 = self__.meta;
    var G__9467 = self__.v;
    var G__9468 = self__.start;
    var G__9469 = self__.end - 1;
    var G__9470 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9466, G__9467, G__9468, G__9469, G__9470) : cljs.core.build_subvec.call(null, G__9466, G__9467, G__9468, G__9469, G__9470);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__9472 = meta__$1;
  var G__9473 = self__.v;
  var G__9474 = self__.start;
  var G__9475 = self__.end;
  var G__9476 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9472, G__9473, G__9474, G__9475, G__9476) : cljs.core.build_subvec.call(null, G__9472, G__9473, G__9474, G__9475, G__9476);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__9477 = self__.meta;
  var G__9478 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__9479 = self__.start;
  var G__9480 = self__.end + 1;
  var G__9481 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9477, G__9478, G__9479, G__9480, G__9481) : cljs.core.build_subvec.call(null, G__9477, G__9478, G__9479, G__9480, G__9481);
};
cljs.core.Subvec.prototype.call = function() {
  var G__9482 = null;
  var G__9482__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9482__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9482 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9482__2.call(this, self__, k);
      case 3:
        return G__9482__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9482.cljs$core$IFn$_invoke$arity$2 = G__9482__2;
  G__9482.cljs$core$IFn$_invoke$arity$3 = G__9482__3;
  return G__9482;
}();
cljs.core.Subvec.prototype.apply = function(self__, args9460) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9460)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__9483 = meta;
      var G__9484 = v.v;
      var G__9485 = v.start + start;
      var G__9486 = v.start + end;
      var G__9487 = __hash;
      meta = G__9483;
      v = G__9484;
      start = G__9485;
      end = G__9486;
      __hash = G__9487;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj9494 = {};
    return obj9494;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__9502 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__9503 = level - 5;
        node = G__9502;
        level = G__9503;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__9507 = null;
  var G__9507__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9507__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9507 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9507__2.call(this, self__, k);
      case 3:
        return G__9507__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9507.cljs$core$IFn$_invoke$arity$2 = G__9507__2;
  G__9507.cljs$core$IFn$_invoke$arity$3 = G__9507__3;
  return G__9507;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args9504) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9504)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__3797__auto__ = self__.front;
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__3797__auto__ = self__.rear;
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__9508 = i + incr;
        i = G__9508;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__9509 = i + 1;
      var G__9510 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__9509;
      out = G__9510;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj9514 = {};
    return obj9514;
  }();
  var l = ks.length;
  var i_9515 = 0;
  while (true) {
    if (i_9515 < l) {
      var k_9516 = ks[i_9515];
      new_obj[k_9516] = obj[k_9516];
      var G__9517 = i_9515 + 1;
      i_9515 = G__9517;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = function() {
      var G__9521 = k;
      return goog.isString(G__9521);
    }();
    if (cljs.core.truth_(and__3785__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3785__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__9522 = init__$1;
        var G__9523 = k;
        var G__9524 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9522, G__9523, G__9524) : f.call(null, G__9522, G__9523, G__9524);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9525 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9525) : cljs.core.deref.call(null, G__9525);
      } else {
        var G__9531 = cljs.core.rest(keys__$1);
        var G__9532 = init__$2;
        keys__$1 = G__9531;
        init__$1 = G__9532;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = function() {
      var G__9527 = k;
      return goog.isString(G__9527);
    }();
    if (cljs.core.truth_(and__3785__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3785__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__9528 = k;
    return goog.isString(G__9528);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = function() {
      var G__9530 = k;
      return goog.isString(G__9530);
    }();
    if (cljs.core.truth_(and__3785__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3785__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__9518_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9518_SHARP_, self__.strobj[p1__9518_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__9533 = null;
  var G__9533__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9533__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9533 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9533__2.call(this, self__, k);
      case 3:
        return G__9533__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9533.cljs$core$IFn$_invoke$arity$2 = G__9533__2;
  G__9533.cljs$core$IFn$_invoke$arity$3 = G__9533__3;
  return G__9533;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args9519) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9519)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj9535 = {};
  return obj9535;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__9536 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9536, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9536, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__9537 = i + 2;
        i = G__9537;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__9538 = i + 2;
        i = G__9538;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__9539 = i + 2;
        i = G__9539;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__9540 = i + 2;
        i = G__9540;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__9541 = i + 2;
        i = G__9541;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__3797__auto__ = function() {
        var G__9545 = k;
        return goog.isString(G__9545);
      }();
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_9546 = 0;
  while (true) {
    if (i_9546 < l) {
      narr[i_9546] = arr[i_9546];
      var G__9547 = i_9546 + 1;
      i_9546 = G__9547;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9549 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9549) : cljs.core.keys.call(null, G__9549);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9550 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9550) : cljs.core.vals.call(null, G__9550);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9551 = cljs.core.seq(coll);
  var chunk__9552 = null;
  var count__9553 = 0;
  var i__9554 = 0;
  while (true) {
    if (i__9554 < count__9553) {
      var vec__9555 = chunk__9552.cljs$core$IIndexed$_nth$arity$2(null, i__9554);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9555, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9555, 1, null);
      var G__9556_9569 = v;
      var G__9557_9570 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9556_9569, G__9557_9570) : f.call(null, G__9556_9569, G__9557_9570);
      var G__9571 = seq__9551;
      var G__9572 = chunk__9552;
      var G__9573 = count__9553;
      var G__9574 = i__9554 + 1;
      seq__9551 = G__9571;
      chunk__9552 = G__9572;
      count__9553 = G__9573;
      i__9554 = G__9574;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__9551);
      if (temp__4126__auto__) {
        var seq__9551__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9551__$1)) {
          var c__4584__auto__ = cljs.core.chunk_first(seq__9551__$1);
          var G__9575 = cljs.core.chunk_rest(seq__9551__$1);
          var G__9576 = c__4584__auto__;
          var G__9577 = cljs.core.count(c__4584__auto__);
          var G__9578 = 0;
          seq__9551 = G__9575;
          chunk__9552 = G__9576;
          count__9553 = G__9577;
          i__9554 = G__9578;
          continue;
        } else {
          var vec__9558 = cljs.core.first(seq__9551__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9558, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9558, 1, null);
          var G__9559_9579 = v;
          var G__9560_9580 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9559_9579, G__9560_9580) : f.call(null, G__9559_9579, G__9560_9580);
          var G__9581 = cljs.core.next(seq__9551__$1);
          var G__9582 = null;
          var G__9583 = 0;
          var G__9584 = 0;
          seq__9551 = G__9581;
          chunk__9552 = G__9582;
          count__9553 = G__9583;
          i__9554 = G__9584;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__9561 = init__$1;
        var G__9562 = self__.arr[i];
        var G__9563 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9561, G__9562, G__9563) : f.call(null, G__9561, G__9562, G__9563);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9564 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9564) : cljs.core.deref.call(null, G__9564);
      } else {
        var G__9585 = i + 2;
        var G__9586 = init__$2;
        i = G__9585;
        init__$1 = G__9586;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__9565 = other;
    if (G__9565) {
      var bit__4471__auto__ = G__9565.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4471__auto__ || G__9565.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__9587 = i + 2;
              i = G__9587;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj9567 = {};
    return obj9567;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__9588 = s + 2;
            var G__9589 = d;
            s = G__9588;
            d = G__9589;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__9590 = s + 2;
            var G__9591 = d + 2;
            s = G__9590;
            d = G__9591;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__9568 = cljs.core.aclone(self__.arr);
        G__9568[idx + 1] = v;
        return G__9568;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9592 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9593 = cljs.core.next(es);
          ret = G__9592;
          es = G__9593;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__9594 = null;
  var G__9594__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9594__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9594 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9594__2.call(this, self__, k);
      case 3:
        return G__9594__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9594.cljs$core$IFn$_invoke$arity$2 = G__9594__2;
  G__9594.cljs$core$IFn$_invoke$arity$3 = G__9594__3;
  return G__9594;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args9548) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9548)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9595 = i + 2;
        var G__9596 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__9595;
        ret = G__9596;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__9597_9605 = self__.arr;
      G__9597_9605.pop();
      G__9597_9605.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__9598 = self__.len;
          var G__9599 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__9598, G__9599) : cljs.core.array__GT_transient_hash_map.call(null, G__9598, G__9599);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__9600 = o;
      if (G__9600) {
        var bit__4478__auto__ = G__9600.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4478__auto__ || G__9600.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9600.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9600);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9600);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__9601 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9601) : cljs.core.key.call(null, G__9601);
      }(), function() {
        var G__9602 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9602) : cljs.core.val.call(null, G__9602);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__9606 = cljs.core.next(es);
          var G__9607 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__9603 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9603) : cljs.core.key.call(null, G__9603);
          }(), function() {
            var G__9604 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9604) : cljs.core.val.call(null, G__9604);
          }());
          es = G__9606;
          tcoll__$2 = G__9607;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__9608 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__9609 = i + 2;
      out = G__9608;
      i = G__9609;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__9612 = cljs.core.aclone(arr);
    G__9612[i] = a;
    return G__9612;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__9613 = cljs.core.aclone(arr);
    G__9613[i] = a;
    G__9613[j] = b;
    return G__9613;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__9618 = init__$1;
          var G__9619 = k;
          var G__9620 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9618, G__9619, G__9620) : f.call(null, G__9618, G__9619, G__9620);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9621 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9621) : cljs.core.deref.call(null, G__9621);
      } else {
        var G__9622 = i + 2;
        var G__9623 = init__$2;
        i = G__9622;
        init__$1 = G__9623;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9624 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__9624) : cljs.core.create_inode_seq.call(null, G__9624);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_9638 = 0;
        var j_9639 = 0;
        while (true) {
          if (i_9638 < 32) {
            if ((self__.bitmap >>> i_9638 & 1) === 0) {
              var G__9640 = i_9638 + 1;
              var G__9641 = j_9639;
              i_9638 = G__9640;
              j_9639 = G__9641;
              continue;
            } else {
              nodes[i_9638] = !(self__.arr[j_9639] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_9639]), self__.arr[j_9639], self__.arr[j_9639 + 1], added_leaf_QMARK_) : self__.arr[j_9639 + 1];
              var G__9642 = i_9638 + 1;
              var G__9643 = j_9639 + 2;
              i_9638 = G__9642;
              j_9639 = G__9643;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__9625 = edit__$1;
          var G__9626 = shift + 5;
          var G__9627 = key_or_nil;
          var G__9628 = val_or_node;
          var G__9629 = hash;
          var G__9630 = key;
          var G__9631 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__9625, G__9626, G__9627, G__9628, G__9629, G__9630, G__9631) : cljs.core.create_node.call(null, G__9625, G__9626, G__9627, G__9628, G__9629, G__9630, G__9631);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_9644 = 0;
      var j_9645 = 0;
      while (true) {
        if (i_9644 < 32) {
          if ((self__.bitmap >>> i_9644 & 1) === 0) {
            var G__9646 = i_9644 + 1;
            var G__9647 = j_9645;
            i_9644 = G__9646;
            j_9645 = G__9647;
            continue;
          } else {
            nodes[i_9644] = !(self__.arr[j_9645] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_9645]), self__.arr[j_9645], self__.arr[j_9645 + 1], added_leaf_QMARK_) : self__.arr[j_9645 + 1];
            var G__9648 = i_9644 + 1;
            var G__9649 = j_9645 + 2;
            i_9644 = G__9648;
            j_9645 = G__9649;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__9632 = shift + 5;
          var G__9633 = key_or_nil;
          var G__9634 = val_or_node;
          var G__9635 = hash;
          var G__9636 = key;
          var G__9637 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__9632, G__9633, G__9634, G__9635, G__9636, G__9637) : cljs.core.create_node.call(null, G__9632, G__9633, G__9634, G__9635, G__9636, G__9637);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__9650 = i + 1;
        var G__9651 = j + 2;
        var G__9652 = bitmap | 1 << i;
        i = G__9650;
        j = G__9651;
        bitmap = G__9652;
        continue;
      } else {
        var G__9653 = i + 1;
        var G__9654 = j;
        var G__9655 = bitmap;
        i = G__9653;
        j = G__9654;
        bitmap = G__9655;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9656 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__9656) : cljs.core.create_array_node_seq.call(null, G__9656);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__9657 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9657) : cljs.core.deref.call(null, G__9657);
        } else {
          var G__9658 = i + 1;
          var G__9659 = init__$2;
          i = G__9658;
          init__$1 = G__9659;
          continue;
        }
      } else {
        var G__9660 = i + 1;
        var G__9661 = init__$1;
        i = G__9660;
        init__$1 = G__9661;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__9662 = i + 2;
        i = G__9662;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9663 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__9663) : cljs.core.create_inode_seq.call(null, G__9663);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__9664 = self__.nodes;
    var G__9665 = self__.i + 2;
    var G__9666 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9664, G__9665, G__9666) : cljs.core.create_inode_seq.call(null, G__9664, G__9665, G__9666);
  } else {
    var G__9667 = self__.nodes;
    var G__9668 = self__.i;
    var G__9669 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9667, G__9668, G__9669) : cljs.core.create_inode_seq.call(null, G__9667, G__9668, G__9669);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__9673 = j + 2;
                j = G__9673;
                continue;
              }
            } else {
              var G__9674 = j + 2;
              j = G__9674;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__9675 = null;
  var G__9676 = self__.nodes;
  var G__9677 = self__.i;
  var G__9678 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__9675, G__9676, G__9677, G__9678) : cljs.core.create_array_node_seq.call(null, G__9675, G__9676, G__9677, G__9678);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__9683 = j + 1;
              j = G__9683;
              continue;
            }
          } else {
            var G__9684 = j + 1;
            j = G__9684;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9686 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9686) : cljs.core.keys.call(null, G__9686);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9687 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9687) : cljs.core.vals.call(null, G__9687);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9688 = cljs.core.seq(coll);
  var chunk__9689 = null;
  var count__9690 = 0;
  var i__9691 = 0;
  while (true) {
    if (i__9691 < count__9690) {
      var vec__9692 = chunk__9689.cljs$core$IIndexed$_nth$arity$2(null, i__9691);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9692, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9692, 1, null);
      var G__9693_9704 = v;
      var G__9694_9705 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9693_9704, G__9694_9705) : f.call(null, G__9693_9704, G__9694_9705);
      var G__9706 = seq__9688;
      var G__9707 = chunk__9689;
      var G__9708 = count__9690;
      var G__9709 = i__9691 + 1;
      seq__9688 = G__9706;
      chunk__9689 = G__9707;
      count__9690 = G__9708;
      i__9691 = G__9709;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__9688);
      if (temp__4126__auto__) {
        var seq__9688__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9688__$1)) {
          var c__4584__auto__ = cljs.core.chunk_first(seq__9688__$1);
          var G__9710 = cljs.core.chunk_rest(seq__9688__$1);
          var G__9711 = c__4584__auto__;
          var G__9712 = cljs.core.count(c__4584__auto__);
          var G__9713 = 0;
          seq__9688 = G__9710;
          chunk__9689 = G__9711;
          count__9690 = G__9712;
          i__9691 = G__9713;
          continue;
        } else {
          var vec__9695 = cljs.core.first(seq__9688__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9695, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9695, 1, null);
          var G__9696_9714 = v;
          var G__9697_9715 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9696_9714, G__9697_9715) : f.call(null, G__9696_9714, G__9697_9715);
          var G__9716 = cljs.core.next(seq__9688__$1);
          var G__9717 = null;
          var G__9718 = 0;
          var G__9719 = 0;
          seq__9688 = G__9716;
          chunk__9689 = G__9717;
          count__9690 = G__9718;
          i__9691 = G__9719;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__9698 = init;
    var G__9699 = null;
    var G__9700 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9698, G__9699, G__9700) : f.call(null, G__9698, G__9699, G__9700);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__9701 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9701) : cljs.core.deref.call(null, G__9701);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj9703 = {};
    return obj9703;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9720 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9721 = cljs.core.next(es);
          ret = G__9720;
          es = G__9721;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__9722 = null;
  var G__9722__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9722__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9722 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9722__2.call(this, self__, k);
      case 3:
        return G__9722__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9722.cljs$core$IFn$_invoke$arity$2 = G__9722__2;
  G__9722.cljs$core$IFn$_invoke$arity$3 = G__9722__3;
  return G__9722;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args9685) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9685)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9723 = i + 2;
      var G__9724 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__9723;
      ret = G__9724;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9725 = i + 1;
      var G__9726 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__9725;
      out = G__9726;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__9727 = o;
      if (G__9727) {
        var bit__4478__auto__ = G__9727.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4478__auto__ || G__9727.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9727.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9727);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9727);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__9728 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9728) : cljs.core.key.call(null, G__9728);
      }(), function() {
        var G__9729 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9729) : cljs.core.val.call(null, G__9729);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__9732 = cljs.core.next(es);
          var G__9733 = tcoll__$1.assoc_BANG_(function() {
            var G__9730 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9730) : cljs.core.key.call(null, G__9730);
          }(), function() {
            var G__9731 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9731) : cljs.core.val.call(null, G__9731);
          }());
          es = G__9732;
          tcoll__$1 = G__9733;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__9734 = ascending_QMARK_ ? t.left : t.right;
      var G__9735 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__9734;
      stack__$1 = G__9735;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__9748 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9748) : cljs.core.deref.call(null, G__9748);
  } else {
    var init__$2 = function() {
      var G__9749 = init__$1;
      var G__9750 = node.key;
      var G__9751 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9749, G__9750, G__9751) : f.call(null, G__9749, G__9750, G__9751);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__9752 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9752) : cljs.core.deref.call(null, G__9752);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__9753 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9753) : cljs.core.deref.call(null, G__9753);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__9755 = null;
  var G__9755__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9755__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9755 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9755__2.call(this, self__, k);
      case 3:
        return G__9755__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9755.cljs$core$IFn$_invoke$arity$2 = G__9755__2;
  G__9755.cljs$core$IFn$_invoke$arity$3 = G__9755__3;
  return G__9755;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args9754) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9754)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__9757 = null;
  var G__9757__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9757__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9757 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9757__2.call(this, self__, k);
      case 3:
        return G__9757__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9757.cljs$core$IFn$_invoke$arity$2 = G__9757__2;
  G__9757.cljs$core$IFn$_invoke$arity$3 = G__9757__3;
  return G__9757;
}();
cljs.core.RedNode.prototype.apply = function(self__, args9756) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9756)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__9770 = k;
      var G__9771 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9770, G__9771) : comp.call(null, G__9770, G__9771);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append(left, right.left), right.right, null);
        } else {
          var app = tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__9790 = k;
      var G__9791 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9790, G__9791) : comp.call(null, G__9790, G__9791);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__9802 = k;
    var G__9803 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9802, G__9803) : comp.call(null, G__9802, G__9803);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9805 = cljs.core.seq(coll);
  var chunk__9806 = null;
  var count__9807 = 0;
  var i__9808 = 0;
  while (true) {
    if (i__9808 < count__9807) {
      var vec__9809 = chunk__9806.cljs$core$IIndexed$_nth$arity$2(null, i__9808);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9809, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9809, 1, null);
      var G__9810_9822 = v;
      var G__9811_9823 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9810_9822, G__9811_9823) : f.call(null, G__9810_9822, G__9811_9823);
      var G__9824 = seq__9805;
      var G__9825 = chunk__9806;
      var G__9826 = count__9807;
      var G__9827 = i__9808 + 1;
      seq__9805 = G__9824;
      chunk__9806 = G__9825;
      count__9807 = G__9826;
      i__9808 = G__9827;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__9805);
      if (temp__4126__auto__) {
        var seq__9805__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9805__$1)) {
          var c__4584__auto__ = cljs.core.chunk_first(seq__9805__$1);
          var G__9828 = cljs.core.chunk_rest(seq__9805__$1);
          var G__9829 = c__4584__auto__;
          var G__9830 = cljs.core.count(c__4584__auto__);
          var G__9831 = 0;
          seq__9805 = G__9828;
          chunk__9806 = G__9829;
          count__9807 = G__9830;
          i__9808 = G__9831;
          continue;
        } else {
          var vec__9812 = cljs.core.first(seq__9805__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9812, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9812, 1, null);
          var G__9813_9832 = v;
          var G__9814_9833 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9813_9832, G__9814_9833) : f.call(null, G__9813_9832, G__9814_9833);
          var G__9834 = cljs.core.next(seq__9805__$1);
          var G__9835 = null;
          var G__9836 = 0;
          var G__9837 = 0;
          seq__9805 = G__9834;
          chunk__9806 = G__9835;
          count__9807 = G__9836;
          i__9808 = G__9837;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9815 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9815) : cljs.core.keys.call(null, G__9815);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9816 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9816) : cljs.core.vals.call(null, G__9816);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__9817 = k;
        var G__9818 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9817, G__9818) : self__.comp.call(null, G__9817, G__9818);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__9838 = t.left;
          t = G__9838;
          continue;
        } else {
          var G__9839 = t.right;
          t = G__9839;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9840 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9841 = cljs.core.next(es);
          ret = G__9840;
          es = G__9841;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__9842 = null;
  var G__9842__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9842__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9842 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9842__2.call(this, self__, k);
      case 3:
        return G__9842__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9842.cljs$core$IFn$_invoke$arity$2 = G__9842__2;
  G__9842.cljs$core$IFn$_invoke$arity$3 = G__9842__3;
  return G__9842;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args9804) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9804)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__9819 = k;
          var G__9820 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9819, G__9820) : self__.comp.call(null, G__9819, G__9820);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__9843 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__9844 = t.left;
              stack = G__9843;
              t = G__9844;
              continue;
            } else {
              var G__9845 = stack;
              var G__9846 = t.right;
              stack = G__9845;
              t = G__9846;
              continue;
            }
          } else {
            if (c > 0) {
              var G__9847 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__9848 = t.right;
              stack = G__9847;
              t = G__9848;
              continue;
            } else {
              var G__9849 = stack;
              var G__9850 = t.left;
              stack = G__9849;
              t = G__9850;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__9821 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9821) : cljs.core.key.call(null, G__9821);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__9851 = cljs.core.nnext(in$);
        var G__9852 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__9851;
        out = G__9852;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__9853__i = 0, G__9853__a = new Array(arguments.length - 0);
      while (G__9853__i < G__9853__a.length) {
        G__9853__a[G__9853__i] = arguments[G__9853__i + 0];
        ++G__9853__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9853__a, 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__9854) {
    var keyvals = cljs.core.seq(arglist__9854);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__9855__i = 0, G__9855__a = new Array(arguments.length - 0);
      while (G__9855__i < G__9855__a.length) {
        G__9855__a[G__9855__i] = arguments[G__9855__i + 0];
        ++G__9855__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9855__a, 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__9856) {
    var keyvals = cljs.core.seq(arglist__9856);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj9860 = {};
      return obj9860;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__9861 = cljs.core.nnext(kvs);
        kvs = G__9861;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__9862__i = 0, G__9862__a = new Array(arguments.length - 0);
      while (G__9862__i < G__9862__a.length) {
        G__9862__a[G__9862__i] = arguments[G__9862__i + 0];
        ++G__9862__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9862__a, 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__9863) {
    var keyvals = cljs.core.seq(arglist__9863);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__9864 = cljs.core.nnext(in$);
        var G__9865 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__9864;
        out = G__9865;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__9866__i = 0, G__9866__a = new Array(arguments.length - 0);
      while (G__9866__i < G__9866__a.length) {
        G__9866__a[G__9866__i] = arguments[G__9866__i + 0];
        ++G__9866__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9866__a, 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__9867) {
    var keyvals = cljs.core.seq(arglist__9867);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__9868 = cljs.core.nnext(in$);
        var G__9869 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__9868;
        out = G__9869;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__9870__i = 0, G__9870__a = new Array(arguments.length - 1);
      while (G__9870__i < G__9870__a.length) {
        G__9870__a[G__9870__i] = arguments[G__9870__i + 1];
        ++G__9870__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9870__a, 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__9871) {
    var comparator = cljs.core.first(arglist__9871);
    var keyvals = cljs.core.rest(arglist__9871);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9872 = self__.mseq;
    if (G__9872) {
      var bit__4478__auto__ = G__9872.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4478__auto__ || G__9872.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9872.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9872);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9872);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9873 = self__.mseq;
    if (G__9873) {
      var bit__4478__auto__ = G__9873.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4478__auto__ || G__9873.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9873.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9873);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9873);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9874 = self__.mseq;
    if (G__9874) {
      var bit__4478__auto__ = G__9874.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4478__auto__ || G__9874.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9874.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9874);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9874);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9875 = self__.mseq;
    if (G__9875) {
      var bit__4478__auto__ = G__9875.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4478__auto__ || G__9875.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9875.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9875);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9875);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__9876_SHARP_, p2__9877_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__3797__auto__ = p1__9876_SHARP_;
          if (cljs.core.truth_(or__3797__auto__)) {
            return or__3797__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__9877_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__9878__i = 0, G__9878__a = new Array(arguments.length - 0);
      while (G__9878__i < G__9878__a.length) {
        G__9878__a[G__9878__i] = arguments[G__9878__i + 0];
        ++G__9878__i;
      }
      maps = new cljs.core.IndexedSeq(G__9878__a, 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__9879) {
    var maps = cljs.core.seq(arglist__9879);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__9882 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__9883 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9882, G__9883) : f.call(null, G__9882, G__9883);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__3797__auto__ = m1;
            if (cljs.core.truth_(or__3797__auto__)) {
              return or__3797__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__9884__i = 0, G__9884__a = new Array(arguments.length - 1);
      while (G__9884__i < G__9884__a.length) {
        G__9884__a[G__9884__i] = arguments[G__9884__i + 1];
        ++G__9884__i;
      }
      maps = new cljs.core.IndexedSeq(G__9884__a, 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__9885) {
    var f = cljs.core.first(arglist__9885);
    var maps = cljs.core.rest(arglist__9885);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__9886 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__9887 = cljs.core.next(keys);
      ret = G__9886;
      keys = G__9887;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9890 = cljs.core.seq(coll);
  var chunk__9891 = null;
  var count__9892 = 0;
  var i__9893 = 0;
  while (true) {
    if (i__9893 < count__9892) {
      var vec__9894 = chunk__9891.cljs$core$IIndexed$_nth$arity$2(null, i__9893);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9894, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9894, 1, null);
      var G__9895_9900 = v;
      var G__9896_9901 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9895_9900, G__9896_9901) : f.call(null, G__9895_9900, G__9896_9901);
      var G__9902 = seq__9890;
      var G__9903 = chunk__9891;
      var G__9904 = count__9892;
      var G__9905 = i__9893 + 1;
      seq__9890 = G__9902;
      chunk__9891 = G__9903;
      count__9892 = G__9904;
      i__9893 = G__9905;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__9890);
      if (temp__4126__auto__) {
        var seq__9890__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9890__$1)) {
          var c__4584__auto__ = cljs.core.chunk_first(seq__9890__$1);
          var G__9906 = cljs.core.chunk_rest(seq__9890__$1);
          var G__9907 = c__4584__auto__;
          var G__9908 = cljs.core.count(c__4584__auto__);
          var G__9909 = 0;
          seq__9890 = G__9906;
          chunk__9891 = G__9907;
          count__9892 = G__9908;
          i__9893 = G__9909;
          continue;
        } else {
          var vec__9897 = cljs.core.first(seq__9890__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9897, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9897, 1, null);
          var G__9898_9910 = v;
          var G__9899_9911 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9898_9910, G__9899_9911) : f.call(null, G__9898_9910, G__9899_9911);
          var G__9912 = cljs.core.next(seq__9890__$1);
          var G__9913 = null;
          var G__9914 = 0;
          var G__9915 = 0;
          seq__9890 = G__9912;
          chunk__9891 = G__9913;
          count__9892 = G__9914;
          i__9893 = G__9915;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__9888_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__9888_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__9916 = null;
  var G__9916__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9916__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9916 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9916__2.call(this, self__, k);
      case 3:
        return G__9916__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9916.cljs$core$IFn$_invoke$arity$2 = G__9916__2;
  G__9916.cljs$core$IFn$_invoke$arity$3 = G__9916__3;
  return G__9916;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args9889) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9889)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9917 = i + 1;
        var G__9918 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__9917;
        out = G__9918;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__9919 = i + 1;
        var G__9920 = cljs.core._conj_BANG_(out, items[i]);
        i = G__9919;
        out = G__9920;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__9922 = null;
  var G__9922__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__9922__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__9922 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9922__2.call(this, self__, k);
      case 3:
        return G__9922__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9922.cljs$core$IFn$_invoke$arity$2 = G__9922__2;
  G__9922.cljs$core$IFn$_invoke$arity$3 = G__9922__3;
  return G__9922;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args9921) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9921)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9925 = cljs.core.seq(coll);
  var chunk__9926 = null;
  var count__9927 = 0;
  var i__9928 = 0;
  while (true) {
    if (i__9928 < count__9927) {
      var vec__9929 = chunk__9926.cljs$core$IIndexed$_nth$arity$2(null, i__9928);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9929, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9929, 1, null);
      var G__9930_9935 = v;
      var G__9931_9936 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9930_9935, G__9931_9936) : f.call(null, G__9930_9935, G__9931_9936);
      var G__9937 = seq__9925;
      var G__9938 = chunk__9926;
      var G__9939 = count__9927;
      var G__9940 = i__9928 + 1;
      seq__9925 = G__9937;
      chunk__9926 = G__9938;
      count__9927 = G__9939;
      i__9928 = G__9940;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__9925);
      if (temp__4126__auto__) {
        var seq__9925__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9925__$1)) {
          var c__4584__auto__ = cljs.core.chunk_first(seq__9925__$1);
          var G__9941 = cljs.core.chunk_rest(seq__9925__$1);
          var G__9942 = c__4584__auto__;
          var G__9943 = cljs.core.count(c__4584__auto__);
          var G__9944 = 0;
          seq__9925 = G__9941;
          chunk__9926 = G__9942;
          count__9927 = G__9943;
          i__9928 = G__9944;
          continue;
        } else {
          var vec__9932 = cljs.core.first(seq__9925__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9932, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9932, 1, null);
          var G__9933_9945 = v;
          var G__9934_9946 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9933_9945, G__9934_9946) : f.call(null, G__9933_9945, G__9934_9946);
          var G__9947 = cljs.core.next(seq__9925__$1);
          var G__9948 = null;
          var G__9949 = 0;
          var G__9950 = 0;
          seq__9925 = G__9947;
          chunk__9926 = G__9948;
          count__9927 = G__9949;
          i__9928 = G__9950;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__9923_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__9923_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__9951 = null;
  var G__9951__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9951__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9951 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9951__2.call(this, self__, k);
      case 3:
        return G__9951__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9951.cljs$core$IFn$_invoke$arity$2 = G__9951__2;
  G__9951.cljs$core$IFn$_invoke$arity$3 = G__9951__3;
  return G__9951;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args9924) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9924)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4678__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4678__auto__.length) {
        var G__9952 = i + 1;
        var G__9953 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__9952;
        res = G__9953;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__9954 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__9955 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__9954;
          out = G__9955;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__9956__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__9956 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__9957__i = 0, G__9957__a = new Array(arguments.length - 0);
        while (G__9957__i < G__9957__a.length) {
          G__9957__a[G__9957__i] = arguments[G__9957__i + 0];
          ++G__9957__i;
        }
        keys = new cljs.core.IndexedSeq(G__9957__a, 0);
      }
      return G__9956__delegate.call(this, keys);
    };
    G__9956.cljs$lang$maxFixedArity = 0;
    G__9956.cljs$lang$applyTo = function(arglist__9958) {
      var keys = cljs.core.seq(arglist__9958);
      return G__9956__delegate(keys);
    };
    G__9956.cljs$core$IFn$_invoke$arity$variadic = G__9956__delegate;
    return G__9956;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        var G__9959 = null;
        if (arguments.length > 0) {
          var G__9960__i = 0, G__9960__a = new Array(arguments.length - 0);
          while (G__9960__i < G__9960__a.length) {
            G__9960__a[G__9960__i] = arguments[G__9960__i + 0];
            ++G__9960__i;
          }
          G__9959 = new cljs.core.IndexedSeq(G__9960__a, 0);
        }
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__9959);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__9961__i = 0, G__9961__a = new Array(arguments.length - 0);
      while (G__9961__i < G__9961__a.length) {
        G__9961__a[G__9961__i] = arguments[G__9961__i + 0];
        ++G__9961__i;
      }
      keys = new cljs.core.IndexedSeq(G__9961__a, 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__9962) {
    var keys = cljs.core.seq(arglist__9962);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__9963__i = 0, G__9963__a = new Array(arguments.length - 1);
      while (G__9963__i < G__9963__a.length) {
        G__9963__a[G__9963__i] = arguments[G__9963__i + 1];
        ++G__9963__i;
      }
      keys = new cljs.core.IndexedSeq(G__9963__a, 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__9964) {
    var comparator = cljs.core.first(arglist__9964);
    var keys = cljs.core.rest(arglist__9964);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__9965_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__9965_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__9965_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__9966_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__9966_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__9966_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function() {
  var distinct = null;
  var distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__9987 = null;
          var G__9987__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9987__1 = function(result) {
            var G__9977 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9977) : rf.call(null, G__9977);
          };
          var G__9987__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__9978 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9978) : cljs.core.deref.call(null, G__9978);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__9979 = result;
              var G__9980 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9979, G__9980) : rf.call(null, G__9979, G__9980);
            }
          };
          G__9987 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9987__0.call(this);
              case 1:
                return G__9987__1.call(this, result);
              case 2:
                return G__9987__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9987.cljs$core$IFn$_invoke$arity$0 = G__9987__0;
          G__9987.cljs$core$IFn$_invoke$arity$1 = G__9987__1;
          G__9987.cljs$core$IFn$_invoke$arity$2 = G__9987__2;
          return G__9987;
        }();
      }(seen);
    };
  };
  var distinct__1 = function(coll) {
    var step = function step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__9985, seen__$1) {
          while (true) {
            var vec__9986 = p__9985;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9986, 0, null);
            var xs__$1 = vec__9986;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__9988 = cljs.core.rest(s);
                var G__9989 = seen__$1;
                p__9985 = G__9988;
                seen__$1 = G__9989;
                continue;
              } else {
                return cljs.core.cons(f, step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return distinct__0.call(this);
      case 1:
        return distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct.cljs$core$IFn$_invoke$arity$0 = distinct__0;
  distinct.cljs$core$IFn$_invoke$arity$1 = distinct__1;
  return distinct;
}();
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__9990 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__9991 = cljs.core.next(s__$1);
      ret = G__9990;
      s__$1 = G__9991;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__9993 = x;
    if (G__9993) {
      var bit__4471__auto__ = G__9993.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4471__auto__ || G__9993.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__9994 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__9995 = cljs.core.next(ks);
      var G__9996 = cljs.core.next(vs);
      map = G__9994;
      ks = G__9995;
      vs = G__9996;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (function() {
      var G__10007 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10007) : k.call(null, G__10007);
    }() > function() {
      var G__10008 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10008) : k.call(null, G__10008);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__10009__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__9997_SHARP_, p2__9998_SHARP_) {
        return max_key.cljs$core$IFn$_invoke$arity$3(k, p1__9997_SHARP_, p2__9998_SHARP_);
      }, max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__10009 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__10010__i = 0, G__10010__a = new Array(arguments.length - 3);
        while (G__10010__i < G__10010__a.length) {
          G__10010__a[G__10010__i] = arguments[G__10010__i + 3];
          ++G__10010__i;
        }
        more = new cljs.core.IndexedSeq(G__10010__a, 0);
      }
      return G__10009__delegate.call(this, k, x, y, more);
    };
    G__10009.cljs$lang$maxFixedArity = 3;
    G__10009.cljs$lang$applyTo = function(arglist__10011) {
      var k = cljs.core.first(arglist__10011);
      arglist__10011 = cljs.core.next(arglist__10011);
      var x = cljs.core.first(arglist__10011);
      arglist__10011 = cljs.core.next(arglist__10011);
      var y = cljs.core.first(arglist__10011);
      var more = cljs.core.rest(arglist__10011);
      return G__10009__delegate(k, x, y, more);
    };
    G__10009.cljs$core$IFn$_invoke$arity$variadic = G__10009__delegate;
    return G__10009;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        var G__10012 = null;
        if (arguments.length > 3) {
          var G__10013__i = 0, G__10013__a = new Array(arguments.length - 3);
          while (G__10013__i < G__10013__a.length) {
            G__10013__a[G__10013__i] = arguments[G__10013__i + 3];
            ++G__10013__i;
          }
          G__10012 = new cljs.core.IndexedSeq(G__10013__a, 0);
        }
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__10012);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (function() {
      var G__10024 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10024) : k.call(null, G__10024);
    }() < function() {
      var G__10025 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10025) : k.call(null, G__10025);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__10026__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10014_SHARP_, p2__10015_SHARP_) {
        return min_key.cljs$core$IFn$_invoke$arity$3(k, p1__10014_SHARP_, p2__10015_SHARP_);
      }, min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__10026 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__10027__i = 0, G__10027__a = new Array(arguments.length - 3);
        while (G__10027__i < G__10027__a.length) {
          G__10027__a[G__10027__i] = arguments[G__10027__i + 3];
          ++G__10027__i;
        }
        more = new cljs.core.IndexedSeq(G__10027__a, 0);
      }
      return G__10026__delegate.call(this, k, x, y, more);
    };
    G__10026.cljs$lang$maxFixedArity = 3;
    G__10026.cljs$lang$applyTo = function(arglist__10028) {
      var k = cljs.core.first(arglist__10028);
      arglist__10028 = cljs.core.next(arglist__10028);
      var x = cljs.core.first(arglist__10028);
      arglist__10028 = cljs.core.next(arglist__10028);
      var y = cljs.core.first(arglist__10028);
      var more = cljs.core.rest(arglist__10028);
      return G__10026__delegate(k, x, y, more);
    };
    G__10026.cljs$core$IFn$_invoke$arity$variadic = G__10026__delegate;
    return G__10026;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        var G__10029 = null;
        if (arguments.length > 3) {
          var G__10030__i = 0, G__10030__a = new Array(arguments.length - 3);
          while (G__10030__i < G__10030__a.length) {
            G__10030__a[G__10030__i] = arguments[G__10030__i + 3];
            ++G__10030__i;
          }
          G__10029 = new cljs.core.IndexedSeq(G__10030__a, 0);
        }
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__10029);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__10047 = null;
          var G__10047__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10047__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__10042 = result;
                var G__10043 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10042, G__10043) : rf.call(null, G__10042, G__10043);
              }());
            }();
            var G__10044 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10044) : rf.call(null, G__10044);
          };
          var G__10047__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__10045 = result;
              var G__10046 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10045, G__10046) : rf.call(null, G__10045, G__10046);
            } else {
              return result;
            }
          };
          G__10047 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10047__0.call(this);
              case 1:
                return G__10047__1.call(this, result);
              case 2:
                return G__10047__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10047.cljs$core$IFn$_invoke$arity$0 = G__10047__0;
          G__10047.cljs$core$IFn$_invoke$arity$1 = G__10047__1;
          G__10047.cljs$core$IFn$_invoke$arity$2 = G__10047__2;
          return G__10047;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__10060 = null;
        var G__10060__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10060__1 = function(result) {
          var G__10055 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10055) : rf.call(null, G__10055);
        };
        var G__10060__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__10056 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10056) : pred.call(null, G__10056);
          }())) {
            var G__10057 = result;
            var G__10058 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10057, G__10058) : rf.call(null, G__10057, G__10058);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__10060 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10060__0.call(this);
            case 1:
              return G__10060__1.call(this, result);
            case 2:
              return G__10060__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10060.cljs$core$IFn$_invoke$arity$0 = G__10060__0;
        G__10060.cljs$core$IFn$_invoke$arity$1 = G__10060__1;
        G__10060.cljs$core$IFn$_invoke$arity$2 = G__10060__2;
        return G__10060;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__10059 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10059) : pred.call(null, G__10059);
        }())) {
          return cljs.core.cons(cljs.core.first(s), take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__10065 = function() {
      var G__10067 = cljs.core._entry_key(sc, e);
      var G__10068 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10067, G__10068) : comp.call(null, G__10067, G__10068);
    }();
    var G__10066 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__10065, G__10066) : test.call(null, G__10065, G__10066);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__10072 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10072, 0, null);
        var s = vec__10072;
        if (cljs.core.truth_(function() {
          var G__10073 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10073) : include.call(null, G__10073);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__10074 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10074, 0, null);
      var s = vec__10074;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__10078 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10078, 0, null);
        var s = vec__10078;
        if (cljs.core.truth_(function() {
          var G__10079 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10079) : include.call(null, G__10079);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__10080 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10080, 0, null);
      var s = vec__10080;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__10081 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__10081) : Math.ceil.call(null, G__10081);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__10082 = ret;
        var G__10083 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10082, G__10083) : f.call(null, G__10082, G__10083);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__10084 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10084) : cljs.core.deref.call(null, G__10084);
      } else {
        var G__10085 = i + self__.step;
        var G__10086 = ret__$1;
        i = G__10085;
        ret = G__10086;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__10104 = null;
          var G__10104__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10104__1 = function(result) {
            var G__10101 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10101) : rf.call(null, G__10101);
          };
          var G__10104__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__10102 = result;
              var G__10103 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10102, G__10103) : rf.call(null, G__10102, G__10103);
            } else {
              return result;
            }
          };
          G__10104 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10104__0.call(this);
              case 1:
                return G__10104__1.call(this, result);
              case 2:
                return G__10104__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10104.cljs$core$IFn$_invoke$arity$0 = G__10104__0;
          G__10104.cljs$core$IFn$_invoke$arity$1 = G__10104__1;
          G__10104.cljs$core$IFn$_invoke$arity$2 = G__10104__2;
          return G__10104;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__10126 = null;
          var G__10126__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10126__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__10117 = result;
                var G__10118 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10117, G__10118) : rf.call(null, G__10117, G__10118);
              }());
            }();
            var G__10119 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10119) : rf.call(null, G__10119);
          };
          var G__10126__2 = function(result, input) {
            var pval = function() {
              var G__10120 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10120) : cljs.core.deref.call(null, G__10120);
            }();
            var val = function() {
              var G__10121 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10121) : f.call(null, G__10121);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__10122 = result;
                var G__10123 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10122, G__10123) : rf.call(null, G__10122, G__10123);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__10126 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10126__0.call(this);
              case 1:
                return G__10126__1.call(this, result);
              case 2:
                return G__10126__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10126.cljs$core$IFn$_invoke$arity$0 = G__10126__0;
          G__10126.cljs$core$IFn$_invoke$arity$1 = G__10126__1;
          G__10126.cljs$core$IFn$_invoke$arity$2 = G__10126__2;
          return G__10126;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__10124 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10124) : f.call(null, G__10124);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__10105_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__10125 = p1__10105_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10125) : f.call(null, G__10125);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__10135 = init;
          var G__10136 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10135, G__10136) : f.call(null, G__10135, G__10136);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__10231 = null;
      var G__10231__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__10231__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10189 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10189) : f.call(null, G__10189);
        }()], null);
      };
      var G__10231__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10190 = x;
          var G__10191 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10190, G__10191) : f.call(null, G__10190, G__10191);
        }()], null);
      };
      var G__10231__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10192 = x;
          var G__10193 = y;
          var G__10194 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10192, G__10193, G__10194) : f.call(null, G__10192, G__10193, G__10194);
        }()], null);
      };
      var G__10231__4 = function() {
        var G__10232__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__10232 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10233__i = 0, G__10233__a = new Array(arguments.length - 3);
            while (G__10233__i < G__10233__a.length) {
              G__10233__a[G__10233__i] = arguments[G__10233__i + 3];
              ++G__10233__i;
            }
            args = new cljs.core.IndexedSeq(G__10233__a, 0);
          }
          return G__10232__delegate.call(this, x, y, z, args);
        };
        G__10232.cljs$lang$maxFixedArity = 3;
        G__10232.cljs$lang$applyTo = function(arglist__10234) {
          var x = cljs.core.first(arglist__10234);
          arglist__10234 = cljs.core.next(arglist__10234);
          var y = cljs.core.first(arglist__10234);
          arglist__10234 = cljs.core.next(arglist__10234);
          var z = cljs.core.first(arglist__10234);
          var args = cljs.core.rest(arglist__10234);
          return G__10232__delegate(x, y, z, args);
        };
        G__10232.cljs$core$IFn$_invoke$arity$variadic = G__10232__delegate;
        return G__10232;
      }();
      G__10231 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10231__0.call(this);
          case 1:
            return G__10231__1.call(this, x);
          case 2:
            return G__10231__2.call(this, x, y);
          case 3:
            return G__10231__3.call(this, x, y, z);
          default:
            var G__10235 = null;
            if (arguments.length > 3) {
              var G__10236__i = 0, G__10236__a = new Array(arguments.length - 3);
              while (G__10236__i < G__10236__a.length) {
                G__10236__a[G__10236__i] = arguments[G__10236__i + 3];
                ++G__10236__i;
              }
              G__10235 = new cljs.core.IndexedSeq(G__10236__a, 0);
            }
            return G__10231__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10235);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10231.cljs$lang$maxFixedArity = 3;
      G__10231.cljs$lang$applyTo = G__10231__4.cljs$lang$applyTo;
      G__10231.cljs$core$IFn$_invoke$arity$0 = G__10231__0;
      G__10231.cljs$core$IFn$_invoke$arity$1 = G__10231__1;
      G__10231.cljs$core$IFn$_invoke$arity$2 = G__10231__2;
      G__10231.cljs$core$IFn$_invoke$arity$3 = G__10231__3;
      G__10231.cljs$core$IFn$_invoke$arity$variadic = G__10231__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10231;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__10237 = null;
      var G__10237__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__10237__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10195 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10195) : f.call(null, G__10195);
        }(), function() {
          var G__10196 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10196) : g.call(null, G__10196);
        }()], null);
      };
      var G__10237__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10197 = x;
          var G__10198 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10197, G__10198) : f.call(null, G__10197, G__10198);
        }(), function() {
          var G__10199 = x;
          var G__10200 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10199, G__10200) : g.call(null, G__10199, G__10200);
        }()], null);
      };
      var G__10237__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10201 = x;
          var G__10202 = y;
          var G__10203 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10201, G__10202, G__10203) : f.call(null, G__10201, G__10202, G__10203);
        }(), function() {
          var G__10204 = x;
          var G__10205 = y;
          var G__10206 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10204, G__10205, G__10206) : g.call(null, G__10204, G__10205, G__10206);
        }()], null);
      };
      var G__10237__4 = function() {
        var G__10238__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__10238 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10239__i = 0, G__10239__a = new Array(arguments.length - 3);
            while (G__10239__i < G__10239__a.length) {
              G__10239__a[G__10239__i] = arguments[G__10239__i + 3];
              ++G__10239__i;
            }
            args = new cljs.core.IndexedSeq(G__10239__a, 0);
          }
          return G__10238__delegate.call(this, x, y, z, args);
        };
        G__10238.cljs$lang$maxFixedArity = 3;
        G__10238.cljs$lang$applyTo = function(arglist__10240) {
          var x = cljs.core.first(arglist__10240);
          arglist__10240 = cljs.core.next(arglist__10240);
          var y = cljs.core.first(arglist__10240);
          arglist__10240 = cljs.core.next(arglist__10240);
          var z = cljs.core.first(arglist__10240);
          var args = cljs.core.rest(arglist__10240);
          return G__10238__delegate(x, y, z, args);
        };
        G__10238.cljs$core$IFn$_invoke$arity$variadic = G__10238__delegate;
        return G__10238;
      }();
      G__10237 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10237__0.call(this);
          case 1:
            return G__10237__1.call(this, x);
          case 2:
            return G__10237__2.call(this, x, y);
          case 3:
            return G__10237__3.call(this, x, y, z);
          default:
            var G__10241 = null;
            if (arguments.length > 3) {
              var G__10242__i = 0, G__10242__a = new Array(arguments.length - 3);
              while (G__10242__i < G__10242__a.length) {
                G__10242__a[G__10242__i] = arguments[G__10242__i + 3];
                ++G__10242__i;
              }
              G__10241 = new cljs.core.IndexedSeq(G__10242__a, 0);
            }
            return G__10237__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10241);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10237.cljs$lang$maxFixedArity = 3;
      G__10237.cljs$lang$applyTo = G__10237__4.cljs$lang$applyTo;
      G__10237.cljs$core$IFn$_invoke$arity$0 = G__10237__0;
      G__10237.cljs$core$IFn$_invoke$arity$1 = G__10237__1;
      G__10237.cljs$core$IFn$_invoke$arity$2 = G__10237__2;
      G__10237.cljs$core$IFn$_invoke$arity$3 = G__10237__3;
      G__10237.cljs$core$IFn$_invoke$arity$variadic = G__10237__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10237;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__10243 = null;
      var G__10243__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__10243__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10207 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10207) : f.call(null, G__10207);
        }(), function() {
          var G__10208 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10208) : g.call(null, G__10208);
        }(), function() {
          var G__10209 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__10209) : h.call(null, G__10209);
        }()], null);
      };
      var G__10243__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10210 = x;
          var G__10211 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10210, G__10211) : f.call(null, G__10210, G__10211);
        }(), function() {
          var G__10212 = x;
          var G__10213 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10212, G__10213) : g.call(null, G__10212, G__10213);
        }(), function() {
          var G__10214 = x;
          var G__10215 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__10214, G__10215) : h.call(null, G__10214, G__10215);
        }()], null);
      };
      var G__10243__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10216 = x;
          var G__10217 = y;
          var G__10218 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10216, G__10217, G__10218) : f.call(null, G__10216, G__10217, G__10218);
        }(), function() {
          var G__10219 = x;
          var G__10220 = y;
          var G__10221 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10219, G__10220, G__10221) : g.call(null, G__10219, G__10220, G__10221);
        }(), function() {
          var G__10222 = x;
          var G__10223 = y;
          var G__10224 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__10222, G__10223, G__10224) : h.call(null, G__10222, G__10223, G__10224);
        }()], null);
      };
      var G__10243__4 = function() {
        var G__10244__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__10244 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10245__i = 0, G__10245__a = new Array(arguments.length - 3);
            while (G__10245__i < G__10245__a.length) {
              G__10245__a[G__10245__i] = arguments[G__10245__i + 3];
              ++G__10245__i;
            }
            args = new cljs.core.IndexedSeq(G__10245__a, 0);
          }
          return G__10244__delegate.call(this, x, y, z, args);
        };
        G__10244.cljs$lang$maxFixedArity = 3;
        G__10244.cljs$lang$applyTo = function(arglist__10246) {
          var x = cljs.core.first(arglist__10246);
          arglist__10246 = cljs.core.next(arglist__10246);
          var y = cljs.core.first(arglist__10246);
          arglist__10246 = cljs.core.next(arglist__10246);
          var z = cljs.core.first(arglist__10246);
          var args = cljs.core.rest(arglist__10246);
          return G__10244__delegate(x, y, z, args);
        };
        G__10244.cljs$core$IFn$_invoke$arity$variadic = G__10244__delegate;
        return G__10244;
      }();
      G__10243 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10243__0.call(this);
          case 1:
            return G__10243__1.call(this, x);
          case 2:
            return G__10243__2.call(this, x, y);
          case 3:
            return G__10243__3.call(this, x, y, z);
          default:
            var G__10247 = null;
            if (arguments.length > 3) {
              var G__10248__i = 0, G__10248__a = new Array(arguments.length - 3);
              while (G__10248__i < G__10248__a.length) {
                G__10248__a[G__10248__i] = arguments[G__10248__i + 3];
                ++G__10248__i;
              }
              G__10247 = new cljs.core.IndexedSeq(G__10248__a, 0);
            }
            return G__10243__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10247);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10243.cljs$lang$maxFixedArity = 3;
      G__10243.cljs$lang$applyTo = G__10243__4.cljs$lang$applyTo;
      G__10243.cljs$core$IFn$_invoke$arity$0 = G__10243__0;
      G__10243.cljs$core$IFn$_invoke$arity$1 = G__10243__1;
      G__10243.cljs$core$IFn$_invoke$arity$2 = G__10243__2;
      G__10243.cljs$core$IFn$_invoke$arity$3 = G__10243__3;
      G__10243.cljs$core$IFn$_invoke$arity$variadic = G__10243__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10243;
    }();
  };
  var juxt__4 = function() {
    var G__10249__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__10250 = null;
          var G__10250__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10137_SHARP_, p2__10138_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10137_SHARP_, function() {
                  return p2__10138_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__10138_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__10138_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10250__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10139_SHARP_, p2__10140_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10139_SHARP_, function() {
                  var G__10225 = x;
                  return p2__10140_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__10140_SHARP_.cljs$core$IFn$_invoke$arity$1(G__10225) : p2__10140_SHARP_.call(null, G__10225);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10250__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10141_SHARP_, p2__10142_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10141_SHARP_, function() {
                  var G__10226 = x;
                  var G__10227 = y;
                  return p2__10142_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__10142_SHARP_.cljs$core$IFn$_invoke$arity$2(G__10226, G__10227) : p2__10142_SHARP_.call(null, G__10226, G__10227);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10250__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10143_SHARP_, p2__10144_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10143_SHARP_, function() {
                  var G__10228 = x;
                  var G__10229 = y;
                  var G__10230 = z;
                  return p2__10144_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__10144_SHARP_.cljs$core$IFn$_invoke$arity$3(G__10228, G__10229, G__10230) : p2__10144_SHARP_.call(null, G__10228, G__10229, G__10230);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10250__4 = function() {
            var G__10251__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__10145_SHARP_, p2__10146_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10145_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__10146_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__10251 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__10252__i = 0, G__10252__a = new Array(arguments.length - 3);
                while (G__10252__i < G__10252__a.length) {
                  G__10252__a[G__10252__i] = arguments[G__10252__i + 3];
                  ++G__10252__i;
                }
                args = new cljs.core.IndexedSeq(G__10252__a, 0);
              }
              return G__10251__delegate.call(this, x, y, z, args);
            };
            G__10251.cljs$lang$maxFixedArity = 3;
            G__10251.cljs$lang$applyTo = function(arglist__10253) {
              var x = cljs.core.first(arglist__10253);
              arglist__10253 = cljs.core.next(arglist__10253);
              var y = cljs.core.first(arglist__10253);
              arglist__10253 = cljs.core.next(arglist__10253);
              var z = cljs.core.first(arglist__10253);
              var args = cljs.core.rest(arglist__10253);
              return G__10251__delegate(x, y, z, args);
            };
            G__10251.cljs$core$IFn$_invoke$arity$variadic = G__10251__delegate;
            return G__10251;
          }();
          G__10250 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__10250__0.call(this);
              case 1:
                return G__10250__1.call(this, x);
              case 2:
                return G__10250__2.call(this, x, y);
              case 3:
                return G__10250__3.call(this, x, y, z);
              default:
                var G__10254 = null;
                if (arguments.length > 3) {
                  var G__10255__i = 0, G__10255__a = new Array(arguments.length - 3);
                  while (G__10255__i < G__10255__a.length) {
                    G__10255__a[G__10255__i] = arguments[G__10255__i + 3];
                    ++G__10255__i;
                  }
                  G__10254 = new cljs.core.IndexedSeq(G__10255__a, 0);
                }
                return G__10250__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10254);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10250.cljs$lang$maxFixedArity = 3;
          G__10250.cljs$lang$applyTo = G__10250__4.cljs$lang$applyTo;
          G__10250.cljs$core$IFn$_invoke$arity$0 = G__10250__0;
          G__10250.cljs$core$IFn$_invoke$arity$1 = G__10250__1;
          G__10250.cljs$core$IFn$_invoke$arity$2 = G__10250__2;
          G__10250.cljs$core$IFn$_invoke$arity$3 = G__10250__3;
          G__10250.cljs$core$IFn$_invoke$arity$variadic = G__10250__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__10250;
        }();
      }(fs__$1);
    };
    var G__10249 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__10256__i = 0, G__10256__a = new Array(arguments.length - 3);
        while (G__10256__i < G__10256__a.length) {
          G__10256__a[G__10256__i] = arguments[G__10256__i + 3];
          ++G__10256__i;
        }
        fs = new cljs.core.IndexedSeq(G__10256__a, 0);
      }
      return G__10249__delegate.call(this, f, g, h, fs);
    };
    G__10249.cljs$lang$maxFixedArity = 3;
    G__10249.cljs$lang$applyTo = function(arglist__10257) {
      var f = cljs.core.first(arglist__10257);
      arglist__10257 = cljs.core.next(arglist__10257);
      var g = cljs.core.first(arglist__10257);
      arglist__10257 = cljs.core.next(arglist__10257);
      var h = cljs.core.first(arglist__10257);
      var fs = cljs.core.rest(arglist__10257);
      return G__10249__delegate(f, g, h, fs);
    };
    G__10249.cljs$core$IFn$_invoke$arity$variadic = G__10249__delegate;
    return G__10249;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        var G__10258 = null;
        if (arguments.length > 3) {
          var G__10259__i = 0, G__10259__a = new Array(arguments.length - 3);
          while (G__10259__i < G__10259__a.length) {
            G__10259__a[G__10259__i] = arguments[G__10259__i + 3];
            ++G__10259__i;
          }
          G__10258 = new cljs.core.IndexedSeq(G__10259__a, 0);
        }
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__10258);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__10260 = cljs.core.next(coll);
        coll = G__10260;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__10261 = n - 1;
        var G__10262 = cljs.core.next(coll);
        n = G__10261;
        coll = G__10262;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__10266 = cljs.core.re_find(/^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10266, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10266, 1, null);
    var pattern = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10266, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_10274 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, "...");
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__10275_10281 = cljs.core.first(coll);
          var G__10276_10282 = writer;
          var G__10277_10283 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10275_10281, G__10276_10282, G__10277_10283) : print_one.call(null, G__10275_10281, G__10276_10282, G__10277_10283);
        } else {
        }
        var coll_10284__$1 = cljs.core.next(coll);
        var n_10285 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_10284__$1 && (n_10285 == null || !(n_10285 === 0))) {
            cljs.core._write(writer, sep);
            var G__10278_10286 = cljs.core.first(coll_10284__$1);
            var G__10279_10287 = writer;
            var G__10280_10288 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10278_10286, G__10279_10287, G__10280_10288) : print_one.call(null, G__10278_10286, G__10279_10287, G__10280_10288);
            var G__10289 = cljs.core.next(coll_10284__$1);
            var G__10290 = n_10285 - 1;
            coll_10284__$1 = G__10289;
            n_10285 = G__10290;
            continue;
          } else {
            if (cljs.core.seq(coll_10284__$1) && n_10285 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, "...");
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_10274;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__10295 = cljs.core.seq(ss);
    var chunk__10296 = null;
    var count__10297 = 0;
    var i__10298 = 0;
    while (true) {
      if (i__10298 < count__10297) {
        var s = chunk__10296.cljs$core$IIndexed$_nth$arity$2(null, i__10298);
        cljs.core._write(writer, s);
        var G__10299 = seq__10295;
        var G__10300 = chunk__10296;
        var G__10301 = count__10297;
        var G__10302 = i__10298 + 1;
        seq__10295 = G__10299;
        chunk__10296 = G__10300;
        count__10297 = G__10301;
        i__10298 = G__10302;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__10295);
        if (temp__4126__auto__) {
          var seq__10295__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__10295__$1)) {
            var c__4584__auto__ = cljs.core.chunk_first(seq__10295__$1);
            var G__10303 = cljs.core.chunk_rest(seq__10295__$1);
            var G__10304 = c__4584__auto__;
            var G__10305 = cljs.core.count(c__4584__auto__);
            var G__10306 = 0;
            seq__10295 = G__10303;
            chunk__10296 = G__10304;
            count__10297 = G__10305;
            i__10298 = G__10306;
            continue;
          } else {
            var s = cljs.core.first(seq__10295__$1);
            cljs.core._write(writer, s);
            var G__10307 = cljs.core.next(seq__10295__$1);
            var G__10308 = null;
            var G__10309 = 0;
            var G__10310 = 0;
            seq__10295 = G__10307;
            chunk__10296 = G__10308;
            count__10297 = G__10309;
            i__10298 = G__10310;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__10311__i = 0, G__10311__a = new Array(arguments.length - 1);
      while (G__10311__i < G__10311__a.length) {
        G__10311__a[G__10311__i] = arguments[G__10311__i + 1];
        ++G__10311__i;
      }
      ss = new cljs.core.IndexedSeq(G__10311__a, 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__10312) {
    var writer = cljs.core.first(arglist__10312);
    var ss = cljs.core.rest(arglist__10312);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj10314 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj10314;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__10317 = '[\\\\"\b\f\n\r\t]';
    var G__10318 = "g";
    return RegExp(G__10317, G__10318);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3785__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3785__auto__)) {
          var and__3785__auto____$1 = function() {
            var G__10332 = obj;
            if (G__10332) {
              var bit__4478__auto__ = G__10332.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4478__auto__ || G__10332.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__10332.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10332);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10332);
            }
          }();
          if (and__3785__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__3785__auto____$1;
          }
        } else {
          return and__3785__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        pr_writer(cljs.core.meta(obj), writer, opts);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__10333 = obj;
            if (G__10333) {
              var bit__4471__auto__ = G__10333.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4471__auto__ || G__10333.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__10334 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__10335 = pr_writer;
                var G__10336 = writer;
                var G__10337 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__10334, G__10335, G__10336, G__10337) : cljs.core.print_map.call(null, G__10334, G__10335, G__10336, G__10337);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer(writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__10338 = obj;
                    return goog.isString(G__10338);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__10340 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__10340;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__10339 = obj;
                            if (G__10339) {
                              var bit__4478__auto__ = G__10339.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4478__auto__ || G__10339.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__10339.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10339);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10339);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__10345 = cljs.core.seq(cljs.core.next(objs));
  var chunk__10346 = null;
  var count__10347 = 0;
  var i__10348 = 0;
  while (true) {
    if (i__10348 < count__10347) {
      var obj = chunk__10346.cljs$core$IIndexed$_nth$arity$2(null, i__10348);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__10349 = seq__10345;
      var G__10350 = chunk__10346;
      var G__10351 = count__10347;
      var G__10352 = i__10348 + 1;
      seq__10345 = G__10349;
      chunk__10346 = G__10350;
      count__10347 = G__10351;
      i__10348 = G__10352;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__10345);
      if (temp__4126__auto__) {
        var seq__10345__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10345__$1)) {
          var c__4584__auto__ = cljs.core.chunk_first(seq__10345__$1);
          var G__10353 = cljs.core.chunk_rest(seq__10345__$1);
          var G__10354 = c__4584__auto__;
          var G__10355 = cljs.core.count(c__4584__auto__);
          var G__10356 = 0;
          seq__10345 = G__10353;
          chunk__10346 = G__10354;
          count__10347 = G__10355;
          i__10348 = G__10356;
          continue;
        } else {
          var obj = cljs.core.first(seq__10345__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__10357 = cljs.core.next(seq__10345__$1);
          var G__10358 = null;
          var G__10359 = 0;
          var G__10360 = 0;
          seq__10345 = G__10357;
          chunk__10346 = G__10358;
          count__10347 = G__10359;
          i__10348 = G__10360;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10361__i = 0, G__10361__a = new Array(arguments.length - 0);
      while (G__10361__i < G__10361__a.length) {
        G__10361__a[G__10361__i] = arguments[G__10361__i + 0];
        ++G__10361__i;
      }
      objs = new cljs.core.IndexedSeq(G__10361__a, 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__10362) {
    var objs = cljs.core.seq(arglist__10362);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10363__i = 0, G__10363__a = new Array(arguments.length - 0);
      while (G__10363__i < G__10363__a.length) {
        G__10363__a[G__10363__i] = arguments[G__10363__i + 0];
        ++G__10363__i;
      }
      objs = new cljs.core.IndexedSeq(G__10363__a, 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__10364) {
    var objs = cljs.core.seq(arglist__10364);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10365__i = 0, G__10365__a = new Array(arguments.length - 0);
      while (G__10365__i < G__10365__a.length) {
        G__10365__a[G__10365__i] = arguments[G__10365__i + 0];
        ++G__10365__i;
      }
      objs = new cljs.core.IndexedSeq(G__10365__a, 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__10366) {
    var objs = cljs.core.seq(arglist__10366);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10367__i = 0, G__10367__a = new Array(arguments.length - 0);
      while (G__10367__i < G__10367__a.length) {
        G__10367__a[G__10367__i] = arguments[G__10367__i + 0];
        ++G__10367__i;
      }
      objs = new cljs.core.IndexedSeq(G__10367__a, 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__10368) {
    var objs = cljs.core.seq(arglist__10368);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10369__i = 0, G__10369__a = new Array(arguments.length - 0);
      while (G__10369__i < G__10369__a.length) {
        G__10369__a[G__10369__i] = arguments[G__10369__i + 0];
        ++G__10369__i;
      }
      objs = new cljs.core.IndexedSeq(G__10369__a, 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__10370) {
    var objs = cljs.core.seq(arglist__10370);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10371__i = 0, G__10371__a = new Array(arguments.length - 0);
      while (G__10371__i < G__10371__a.length) {
        G__10371__a[G__10371__i] = arguments[G__10371__i + 0];
        ++G__10371__i;
      }
      objs = new cljs.core.IndexedSeq(G__10371__a, 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__10372) {
    var objs = cljs.core.seq(arglist__10372);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10373__i = 0, G__10373__a = new Array(arguments.length - 0);
      while (G__10373__i < G__10373__a.length) {
        G__10373__a[G__10373__i] = arguments[G__10373__i + 0];
        ++G__10373__i;
      }
      objs = new cljs.core.IndexedSeq(G__10373__a, 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__10374) {
    var objs = cljs.core.seq(arglist__10374);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10375__i = 0, G__10375__a = new Array(arguments.length - 0);
      while (G__10375__i < G__10375__a.length) {
        G__10375__a[G__10375__i] = arguments[G__10375__i + 0];
        ++G__10375__i;
      }
      objs = new cljs.core.IndexedSeq(G__10375__a, 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__10376) {
    var objs = cljs.core.seq(arglist__10376);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__10383_10389 = cljs.core.key(e);
    var G__10384_10390 = w;
    var G__10385_10391 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10383_10389, G__10384_10390, G__10385_10391) : print_one.call(null, G__10383_10389, G__10384_10390, G__10385_10391);
    cljs.core._write(w, " ");
    var G__10386 = cljs.core.val(e);
    var G__10387 = w;
    var G__10388 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10386, G__10387, G__10388) : print_one.call(null, G__10386, G__10387, G__10388);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__10392__i = 0, G__10392__a = new Array(arguments.length - 2);
      while (G__10392__i < G__10392__a.length) {
        G__10392__a[G__10392__i] = arguments[G__10392__i + 2];
        ++G__10392__i;
      }
      args = new cljs.core.IndexedSeq(G__10392__a, 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__10393) {
    var iref = cljs.core.first(arglist__10393);
    arglist__10393 = cljs.core.next(arglist__10393);
    var f = cljs.core.first(arglist__10393);
    var args = cljs.core.rest(arglist__10393);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__10396 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10396) : cljs.core.atom.call(null, G__10396);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__10398 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10398) : cljs.core.deref.call(null, G__10398);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__10399_SHARP_, p2__10400_SHARP_) {
    var ret = function() {
      var G__10403 = p1__10399_SHARP_;
      var G__10404 = p2__10400_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10403, G__10404) : rf.call(null, G__10403, G__10404);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__10407 = null;
      var G__10407__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10407__1 = function(result) {
        var G__10406 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10406) : rf.call(null, G__10406);
      };
      var G__10407__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__10407 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10407__0.call(this);
          case 1:
            return G__10407__1.call(this, result);
          case 2:
            return G__10407__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10407.cljs$core$IFn$_invoke$arity$0 = G__10407__0;
      G__10407.cljs$core$IFn$_invoke$arity$1 = G__10407__1;
      G__10407.cljs$core$IFn$_invoke$arity$2 = G__10407__2;
      return G__10407;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__10416 = null;
          var G__10416__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10416__1 = function(result) {
            var G__10412 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10412) : rf.call(null, G__10412);
          };
          var G__10416__2 = function(result, input) {
            var prior = function() {
              var G__10413 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10413) : cljs.core.deref.call(null, G__10413);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__10414 = result;
              var G__10415 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10414, G__10415) : rf.call(null, G__10414, G__10415);
            }
          };
          G__10416 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10416__0.call(this);
              case 1:
                return G__10416__1.call(this, result);
              case 2:
                return G__10416__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10416.cljs$core$IFn$_invoke$arity$0 = G__10416__0;
          G__10416.cljs$core$IFn$_invoke$arity$1 = G__10416__1;
          G__10416.cljs$core$IFn$_invoke$arity$2 = G__10416__2;
          return G__10416;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4775__auto__ = this;
  return cljs.core.es6_iterator(this__4775__auto__);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10418_SHARP_, p2__10417_SHARP_) {
    var G__10420 = p2__10417_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__10420) : proc.call(null, G__10420);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj10422 = {};
  return obj10422;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = cljs.core._clj__GT_js[function() {
        var G__10426 = x__4441__auto__;
        return goog.typeOf(G__10426);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = cljs.core._key__GT_js[function() {
        var G__10430 = x__4441__auto__;
        return goog.typeOf(G__10430);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__10433 = k;
    if (G__10433) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__10433.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__10433.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10433);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10433);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__10434 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__10434) : cljs.core.clj__GT_js.call(null, G__10434);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__10450 = x;
      if (G__10450) {
        var bit__4478__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3797__auto__ = bit__4478__auto__;
          if (cljs.core.truth_(or__3797__auto__)) {
            return or__3797__auto__;
          } else {
            return G__10450.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__10450.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10450);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10450);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj10452 = {};
              return obj10452;
            }();
            var seq__10453_10463 = cljs.core.seq(x);
            var chunk__10454_10464 = null;
            var count__10455_10465 = 0;
            var i__10456_10466 = 0;
            while (true) {
              if (i__10456_10466 < count__10455_10465) {
                var vec__10457_10467 = chunk__10454_10464.cljs$core$IIndexed$_nth$arity$2(null, i__10456_10466);
                var k_10468 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10457_10467, 0, null);
                var v_10469 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10457_10467, 1, null);
                m[cljs.core.key__GT_js(k_10468)] = clj__GT_js(v_10469);
                var G__10470 = seq__10453_10463;
                var G__10471 = chunk__10454_10464;
                var G__10472 = count__10455_10465;
                var G__10473 = i__10456_10466 + 1;
                seq__10453_10463 = G__10470;
                chunk__10454_10464 = G__10471;
                count__10455_10465 = G__10472;
                i__10456_10466 = G__10473;
                continue;
              } else {
                var temp__4126__auto___10474 = cljs.core.seq(seq__10453_10463);
                if (temp__4126__auto___10474) {
                  var seq__10453_10475__$1 = temp__4126__auto___10474;
                  if (cljs.core.chunked_seq_QMARK_(seq__10453_10475__$1)) {
                    var c__4584__auto___10476 = cljs.core.chunk_first(seq__10453_10475__$1);
                    var G__10477 = cljs.core.chunk_rest(seq__10453_10475__$1);
                    var G__10478 = c__4584__auto___10476;
                    var G__10479 = cljs.core.count(c__4584__auto___10476);
                    var G__10480 = 0;
                    seq__10453_10463 = G__10477;
                    chunk__10454_10464 = G__10478;
                    count__10455_10465 = G__10479;
                    i__10456_10466 = G__10480;
                    continue;
                  } else {
                    var vec__10458_10481 = cljs.core.first(seq__10453_10475__$1);
                    var k_10482 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10458_10481, 0, null);
                    var v_10483 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10458_10481, 1, null);
                    m[cljs.core.key__GT_js(k_10482)] = clj__GT_js(v_10483);
                    var G__10484 = cljs.core.next(seq__10453_10475__$1);
                    var G__10485 = null;
                    var G__10486 = 0;
                    var G__10487 = 0;
                    seq__10453_10463 = G__10484;
                    chunk__10454_10464 = G__10485;
                    count__10455_10465 = G__10486;
                    i__10456_10466 = G__10487;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__10459_10488 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clj__GT_js, x));
              var chunk__10460_10489 = null;
              var count__10461_10490 = 0;
              var i__10462_10491 = 0;
              while (true) {
                if (i__10462_10491 < count__10461_10490) {
                  var x_10492__$1 = chunk__10460_10489.cljs$core$IIndexed$_nth$arity$2(null, i__10462_10491);
                  arr.push(x_10492__$1);
                  var G__10493 = seq__10459_10488;
                  var G__10494 = chunk__10460_10489;
                  var G__10495 = count__10461_10490;
                  var G__10496 = i__10462_10491 + 1;
                  seq__10459_10488 = G__10493;
                  chunk__10460_10489 = G__10494;
                  count__10461_10490 = G__10495;
                  i__10462_10491 = G__10496;
                  continue;
                } else {
                  var temp__4126__auto___10497 = cljs.core.seq(seq__10459_10488);
                  if (temp__4126__auto___10497) {
                    var seq__10459_10498__$1 = temp__4126__auto___10497;
                    if (cljs.core.chunked_seq_QMARK_(seq__10459_10498__$1)) {
                      var c__4584__auto___10499 = cljs.core.chunk_first(seq__10459_10498__$1);
                      var G__10500 = cljs.core.chunk_rest(seq__10459_10498__$1);
                      var G__10501 = c__4584__auto___10499;
                      var G__10502 = cljs.core.count(c__4584__auto___10499);
                      var G__10503 = 0;
                      seq__10459_10488 = G__10500;
                      chunk__10460_10489 = G__10501;
                      count__10461_10490 = G__10502;
                      i__10462_10491 = G__10503;
                      continue;
                    } else {
                      var x_10504__$1 = cljs.core.first(seq__10459_10498__$1);
                      arr.push(x_10504__$1);
                      var G__10505 = cljs.core.next(seq__10459_10498__$1);
                      var G__10506 = null;
                      var G__10507 = 0;
                      var G__10508 = 0;
                      seq__10459_10488 = G__10505;
                      chunk__10460_10489 = G__10506;
                      count__10461_10490 = G__10507;
                      i__10462_10491 = G__10508;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj10510 = {};
  return obj10510;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = cljs.core._js__GT_clj[function() {
        var G__10514 = x__4441__auto__;
        return goog.typeOf(G__10514);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var js__GT_clj__2 = function() {
    var G__10571__delegate = function(x, opts) {
      var map__10544 = opts;
      var map__10544__$1 = cljs.core.seq_QMARK_(map__10544) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__10544) : map__10544;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10544__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__10544, map__10544__$1, keywordize_keys, keyfn) {
        return function thisfn(x__$1) {
          if (function() {
            var G__10560 = x__$1;
            if (G__10560) {
              var bit__4478__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__3797__auto__ = bit__4478__auto__;
                if (cljs.core.truth_(or__3797__auto__)) {
                  return or__3797__auto__;
                } else {
                  return G__10560.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__10560.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__10560);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__10560);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
              } else {
                if (x__$1 instanceof Array) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4553__auto__ = function(map__10544, map__10544__$1, keywordize_keys, keyfn) {
                        return function iter__10561(s__10562) {
                          return new cljs.core.LazySeq(null, function(map__10544, map__10544__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__10562__$1 = s__10562;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__10562__$1);
                                if (temp__4126__auto__) {
                                  var s__10562__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__10562__$2)) {
                                    var c__4551__auto__ = cljs.core.chunk_first(s__10562__$2);
                                    var size__4552__auto__ = cljs.core.count(c__4551__auto__);
                                    var b__10564 = cljs.core.chunk_buffer(size__4552__auto__);
                                    if (function() {
                                      var i__10563 = 0;
                                      while (true) {
                                        if (i__10563 < size__4552__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4551__auto__, i__10563);
                                          cljs.core.chunk_append(b__10564, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__10569 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__10569) : keyfn.call(null, G__10569);
                                          }(), thisfn(x__$1[k])], null));
                                          var G__10572 = i__10563 + 1;
                                          i__10563 = G__10572;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__10564), iter__10561(cljs.core.chunk_rest(s__10562__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__10564), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__10562__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__10570 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__10570) : keyfn.call(null, G__10570);
                                    }(), thisfn(x__$1[k])], null), iter__10561(cljs.core.rest(s__10562__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__10544, map__10544__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__10544, map__10544__$1, keywordize_keys, keyfn);
                      return iter__4553__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__10544, map__10544__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__10571 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__10573__i = 0, G__10573__a = new Array(arguments.length - 1);
        while (G__10573__i < G__10573__a.length) {
          G__10573__a[G__10573__i] = arguments[G__10573__i + 1];
          ++G__10573__i;
        }
        opts = new cljs.core.IndexedSeq(G__10573__a, 0);
      }
      return G__10571__delegate.call(this, x, opts);
    };
    G__10571.cljs$lang$maxFixedArity = 1;
    G__10571.cljs$lang$applyTo = function(arglist__10574) {
      var x = cljs.core.first(arglist__10574);
      var opts = cljs.core.rest(arglist__10574);
      return G__10571__delegate(x, opts);
    };
    G__10571.cljs$core$IFn$_invoke$arity$variadic = G__10571__delegate;
    return G__10571;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        var G__10575 = null;
        if (arguments.length > 1) {
          var G__10576__i = 0, G__10576__a = new Array(arguments.length - 1);
          while (G__10576__i < G__10576__a.length) {
            G__10576__a[G__10576__i] = arguments[G__10576__i + 1];
            ++G__10576__i;
          }
          G__10575 = new cljs.core.IndexedSeq(G__10576__a, 0);
        }
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__10575);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = function() {
    var G__10579 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10579) : cljs.core.atom.call(null, G__10579);
  }();
  return function(mem) {
    return function() {
      var G__10581__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__10580 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10580) : cljs.core.deref.call(null, G__10580);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__10581 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__10582__i = 0, G__10582__a = new Array(arguments.length - 0);
          while (G__10582__i < G__10582__a.length) {
            G__10582__a[G__10582__i] = arguments[G__10582__i + 0];
            ++G__10582__i;
          }
          args = new cljs.core.IndexedSeq(G__10582__a, 0);
        }
        return G__10581__delegate.call(this, args);
      };
      G__10581.cljs$lang$maxFixedArity = 0;
      G__10581.cljs$lang$applyTo = function(arglist__10583) {
        var args = cljs.core.seq(arglist__10583);
        return G__10581__delegate(args);
      };
      G__10581.cljs$core$IFn$_invoke$arity$variadic = G__10581__delegate;
      return G__10581;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__10585 = ret;
        f = G__10585;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__10586__delegate = function(f, args) {
      return trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__10586 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__10587__i = 0, G__10587__a = new Array(arguments.length - 1);
        while (G__10587__i < G__10587__a.length) {
          G__10587__a[G__10587__i] = arguments[G__10587__i + 1];
          ++G__10587__i;
        }
        args = new cljs.core.IndexedSeq(G__10587__a, 0);
      }
      return G__10586__delegate.call(this, f, args);
    };
    G__10586.cljs$lang$maxFixedArity = 1;
    G__10586.cljs$lang$applyTo = function(arglist__10588) {
      var f = cljs.core.first(arglist__10588);
      var args = cljs.core.rest(arglist__10588);
      return G__10586__delegate(f, args);
    };
    G__10586.cljs$core$IFn$_invoke$arity$variadic = G__10586__delegate;
    return G__10586;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        var G__10589 = null;
        if (arguments.length > 1) {
          var G__10590__i = 0, G__10590__a = new Array(arguments.length - 1);
          while (G__10590__i < G__10590__a.length) {
            G__10590__a[G__10590__i] = arguments[G__10590__i + 1];
            ++G__10590__i;
          }
          G__10589 = new cljs.core.IndexedSeq(G__10590__a, 0);
        }
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__10589);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  var G__10593 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__10593) : Math.floor.call(null, G__10593);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__10595 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10595) : f.call(null, G__10595);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__10597 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10597) : cljs.core.atom.call(null, G__10597);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__10598__i = 0, G__10598__a = new Array(arguments.length - 1);
      while (G__10598__i < G__10598__a.length) {
        G__10598__a[G__10598__i] = arguments[G__10598__i + 1];
        ++G__10598__i;
      }
      args = new cljs.core.IndexedSeq(G__10598__a, 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__10599) {
    var f = cljs.core.first(arglist__10599);
    var args = cljs.core.rest(arglist__10599);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__10664 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10664) : cljs.core.deref.call(null, G__10664);
    }(), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3797__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__3797__auto__) {
      return or__3797__auto__;
    } else {
      var or__3797__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3797__auto____$1) {
        return or__3797__auto____$1;
      } else {
        var and__3785__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__3785__auto__) {
          var and__3785__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__3785__auto____$1) {
            var and__3785__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__3785__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__10689 = isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__10687 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__10687) : child.call(null, G__10687);
                  }(), function() {
                    var G__10688 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__10688) : parent.call(null, G__10688);
                  }());
                  var G__10690 = i + 1;
                  ret = G__10689;
                  i = G__10690;
                  continue;
                }
                break;
              }
            } else {
              return and__3785__auto____$2;
            }
          } else {
            return and__3785__auto____$1;
          }
        } else {
          return and__3785__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10694 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10694) : cljs.core.deref.call(null, G__10694);
    }(), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10698 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10698) : cljs.core.deref.call(null, G__10698);
    }(), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10702 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10702) : cljs.core.deref.call(null, G__10702);
    }(), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__10711 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__10711) : targets.call(null, G__10711);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__10712 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__10712) : sources.call(null, G__10712);
        }()));
      };
    }(tp, td, ta);
    var or__3797__auto__ = cljs.core.contains_QMARK_(function() {
      var G__10716 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__10716) : tp.call(null, G__10716);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__10717 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__10717) : ta.call(null, G__10717);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__10718 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__10718) : ta.call(null, G__10718);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__10725 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10725) : parentMap.call(null, G__10725);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10726 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10726) : parentMap.call(null, G__10726);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__10719_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__10719_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__10719_SHARP_), cljs.core.second(p1__10719_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__10727 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10727) : parentMap.call(null, G__10727);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__10720_SHARP_, p2__10721_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__10720_SHARP_, p2__10721_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__10730 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10730) : cljs.core.deref.call(null, G__10730);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__10731 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10731) : cljs.core.deref.call(null, G__10731);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__10747 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10747) : cljs.core.deref.call(null, G__10747);
  }().call(null, x);
  var or__3797__auto__ = cljs.core.truth_(function() {
    var and__3785__auto__ = xprefs;
    if (cljs.core.truth_(and__3785__auto__)) {
      var G__10749 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__10749) : xprefs.call(null, G__10749);
    } else {
      return and__3785__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3797__auto__)) {
    return or__3797__auto__;
  } else {
    var or__3797__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__10750 = cljs.core.rest(ps);
          ps = G__10750;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3797__auto____$1)) {
      return or__3797__auto____$1;
    } else {
      var or__3797__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__10751 = cljs.core.rest(ps);
            ps = G__10751;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3797__auto____$2)) {
        return or__3797__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3797__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__3797__auto__)) {
    return or__3797__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__10765) {
    var vec__10766 = p__10765;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10766, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10766, 1, null);
    var e = vec__10766;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__10767 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10767) : cljs.core.deref.call(null, G__10767);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3797__auto__ = be == null;
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__10768 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10768) : cljs.core.deref.call(null, G__10768);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10769 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10769) : cljs.core.deref.call(null, G__10769);
    }(), function() {
      var G__10770 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10770) : cljs.core.deref.call(null, G__10770);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj10772 = {};
  return obj10772;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3785__auto__ = mf;
    if (and__3785__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4441__auto__ = mf == null ? null : mf;
    return function() {
      var or__3797__auto__ = cljs.core._reset[function() {
        var G__10776 = x__4441__auto__;
        return goog.typeOf(G__10776);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._reset["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3785__auto__ = mf;
    if (and__3785__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4441__auto__ = mf == null ? null : mf;
    return function() {
      var or__3797__auto__ = cljs.core._add_method[function() {
        var G__10780 = x__4441__auto__;
        return goog.typeOf(G__10780);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._add_method["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3785__auto__ = mf;
    if (and__3785__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4441__auto__ = mf == null ? null : mf;
    return function() {
      var or__3797__auto__ = cljs.core._remove_method[function() {
        var G__10784 = x__4441__auto__;
        return goog.typeOf(G__10784);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._remove_method["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3785__auto__ = mf;
    if (and__3785__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4441__auto__ = mf == null ? null : mf;
    return function() {
      var or__3797__auto__ = cljs.core._prefer_method[function() {
        var G__10788 = x__4441__auto__;
        return goog.typeOf(G__10788);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3785__auto__ = mf;
    if (and__3785__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4441__auto__ = mf == null ? null : mf;
    return function() {
      var or__3797__auto__ = cljs.core._get_method[function() {
        var G__10792 = x__4441__auto__;
        return goog.typeOf(G__10792);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._get_method["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3785__auto__ = mf;
    if (and__3785__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4441__auto__ = mf == null ? null : mf;
    return function() {
      var or__3797__auto__ = cljs.core._methods[function() {
        var G__10796 = x__4441__auto__;
        return goog.typeOf(G__10796);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._methods["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3785__auto__ = mf;
    if (and__3785__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4441__auto__ = mf == null ? null : mf;
    return function() {
      var or__3797__auto__ = cljs.core._prefers[function() {
        var G__10800 = x__4441__auto__;
        return goog.typeOf(G__10800);
      }()];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core._prefers["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__10802 = this$__$1;
  return goog.getUid(G__10802);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10803 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10803) : cljs.core.deref.call(null, G__10803);
  }(), function() {
    var G__10804 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10804) : cljs.core.deref.call(null, G__10804);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__10805 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10805) : cljs.core.deref.call(null, G__10805);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__10806 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10806) : cljs.core.deref.call(null, G__10806);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__10807 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10807) : cljs.core.deref.call(null, G__10807);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__10808 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10808) : cljs.core.deref.call(null, G__10808);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__11649 = null;
  var G__11649__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__11649__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10809 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__10809) : self__.dispatch_fn.call(null, G__10809);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10810 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__10810) : target_fn.call(null, G__10810);
  };
  var G__11649__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10811 = a;
      var G__10812 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__10811, G__10812) : self__.dispatch_fn.call(null, G__10811, G__10812);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10813 = a;
    var G__10814 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__10813, G__10814) : target_fn.call(null, G__10813, G__10814);
  };
  var G__11649__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10815 = a;
      var G__10816 = b;
      var G__10817 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__10815, G__10816, G__10817) : self__.dispatch_fn.call(null, G__10815, G__10816, G__10817);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10818 = a;
    var G__10819 = b;
    var G__10820 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__10818, G__10819, G__10820) : target_fn.call(null, G__10818, G__10819, G__10820);
  };
  var G__11649__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10821 = a;
      var G__10822 = b;
      var G__10823 = c;
      var G__10824 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__10821, G__10822, G__10823, G__10824) : self__.dispatch_fn.call(null, G__10821, G__10822, G__10823, G__10824);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10825 = a;
    var G__10826 = b;
    var G__10827 = c;
    var G__10828 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__10825, G__10826, G__10827, G__10828) : target_fn.call(null, G__10825, G__10826, G__10827, G__10828);
  };
  var G__11649__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10829 = a;
      var G__10830 = b;
      var G__10831 = c;
      var G__10832 = d;
      var G__10833 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__10829, G__10830, G__10831, G__10832, G__10833) : self__.dispatch_fn.call(null, G__10829, G__10830, G__10831, G__10832, G__10833);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10834 = a;
    var G__10835 = b;
    var G__10836 = c;
    var G__10837 = d;
    var G__10838 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__10834, G__10835, G__10836, G__10837, G__10838) : target_fn.call(null, G__10834, G__10835, G__10836, G__10837, G__10838);
  };
  var G__11649__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10839 = a;
      var G__10840 = b;
      var G__10841 = c;
      var G__10842 = d;
      var G__10843 = e;
      var G__10844 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__10839, G__10840, G__10841, G__10842, G__10843, G__10844) : self__.dispatch_fn.call(null, G__10839, G__10840, G__10841, G__10842, G__10843, G__10844);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10845 = a;
    var G__10846 = b;
    var G__10847 = c;
    var G__10848 = d;
    var G__10849 = e;
    var G__10850 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__10845, G__10846, G__10847, G__10848, G__10849, G__10850) : target_fn.call(null, G__10845, G__10846, G__10847, G__10848, G__10849, G__10850);
  };
  var G__11649__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10851 = a;
      var G__10852 = b;
      var G__10853 = c;
      var G__10854 = d;
      var G__10855 = e;
      var G__10856 = f;
      var G__10857 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__10851, G__10852, G__10853, G__10854, G__10855, G__10856, G__10857) : self__.dispatch_fn.call(null, G__10851, G__10852, G__10853, G__10854, G__10855, G__10856, G__10857);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10858 = a;
    var G__10859 = b;
    var G__10860 = c;
    var G__10861 = d;
    var G__10862 = e;
    var G__10863 = f;
    var G__10864 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__10858, G__10859, G__10860, G__10861, G__10862, G__10863, G__10864) : target_fn.call(null, G__10858, G__10859, G__10860, G__10861, G__10862, G__10863, G__10864);
  };
  var G__11649__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10865 = a;
      var G__10866 = b;
      var G__10867 = c;
      var G__10868 = d;
      var G__10869 = e;
      var G__10870 = f;
      var G__10871 = g;
      var G__10872 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__10865, G__10866, G__10867, G__10868, G__10869, G__10870, G__10871, G__10872) : self__.dispatch_fn.call(null, G__10865, G__10866, G__10867, G__10868, G__10869, G__10870, G__10871, G__10872);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10873 = a;
    var G__10874 = b;
    var G__10875 = c;
    var G__10876 = d;
    var G__10877 = e;
    var G__10878 = f;
    var G__10879 = g;
    var G__10880 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__10873, G__10874, G__10875, G__10876, G__10877, G__10878, G__10879, G__10880) : target_fn.call(null, G__10873, G__10874, G__10875, G__10876, G__10877, G__10878, G__10879, G__10880);
  };
  var G__11649__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10881 = a;
      var G__10882 = b;
      var G__10883 = c;
      var G__10884 = d;
      var G__10885 = e;
      var G__10886 = f;
      var G__10887 = g;
      var G__10888 = h;
      var G__10889 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__10881, G__10882, G__10883, G__10884, G__10885, G__10886, G__10887, G__10888, G__10889) : self__.dispatch_fn.call(null, G__10881, G__10882, G__10883, G__10884, G__10885, G__10886, G__10887, G__10888, G__10889);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10890 = a;
    var G__10891 = b;
    var G__10892 = c;
    var G__10893 = d;
    var G__10894 = e;
    var G__10895 = f;
    var G__10896 = g;
    var G__10897 = h;
    var G__10898 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__10890, G__10891, G__10892, G__10893, G__10894, G__10895, G__10896, G__10897, G__10898) : target_fn.call(null, G__10890, G__10891, G__10892, G__10893, G__10894, G__10895, G__10896, G__10897, G__10898);
  };
  var G__11649__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10899 = a;
      var G__10900 = b;
      var G__10901 = c;
      var G__10902 = d;
      var G__10903 = e;
      var G__10904 = f;
      var G__10905 = g;
      var G__10906 = h;
      var G__10907 = i;
      var G__10908 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__10899, G__10900, G__10901, G__10902, G__10903, G__10904, G__10905, G__10906, G__10907, G__10908) : self__.dispatch_fn.call(null, G__10899, G__10900, G__10901, G__10902, G__10903, G__10904, G__10905, G__10906, G__10907, G__10908);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10909 = a;
    var G__10910 = b;
    var G__10911 = c;
    var G__10912 = d;
    var G__10913 = e;
    var G__10914 = f;
    var G__10915 = g;
    var G__10916 = h;
    var G__10917 = i;
    var G__10918 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__10909, G__10910, G__10911, G__10912, G__10913, G__10914, G__10915, G__10916, G__10917, G__10918) : target_fn.call(null, G__10909, G__10910, G__10911, G__10912, G__10913, G__10914, G__10915, G__10916, G__10917, G__10918);
  };
  var G__11649__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10919 = a;
      var G__10920 = b;
      var G__10921 = c;
      var G__10922 = d;
      var G__10923 = e;
      var G__10924 = f;
      var G__10925 = g;
      var G__10926 = h;
      var G__10927 = i;
      var G__10928 = j;
      var G__10929 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__10919, G__10920, G__10921, G__10922, G__10923, G__10924, G__10925, G__10926, G__10927, G__10928, G__10929) : self__.dispatch_fn.call(null, G__10919, G__10920, G__10921, G__10922, G__10923, G__10924, G__10925, G__10926, G__10927, G__10928, G__10929);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10930 = a;
    var G__10931 = b;
    var G__10932 = c;
    var G__10933 = d;
    var G__10934 = e;
    var G__10935 = f;
    var G__10936 = g;
    var G__10937 = h;
    var G__10938 = i;
    var G__10939 = j;
    var G__10940 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__10930, G__10931, G__10932, G__10933, G__10934, G__10935, G__10936, G__10937, G__10938, G__10939, G__10940) : target_fn.call(null, G__10930, G__10931, G__10932, G__10933, G__10934, G__10935, G__10936, G__10937, G__10938, G__10939, G__10940);
  };
  var G__11649__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10941 = a;
      var G__10942 = b;
      var G__10943 = c;
      var G__10944 = d;
      var G__10945 = e;
      var G__10946 = f;
      var G__10947 = g;
      var G__10948 = h;
      var G__10949 = i;
      var G__10950 = j;
      var G__10951 = k;
      var G__10952 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__10941, G__10942, G__10943, G__10944, G__10945, G__10946, G__10947, G__10948, G__10949, G__10950, G__10951, G__10952) : self__.dispatch_fn.call(null, G__10941, G__10942, G__10943, G__10944, G__10945, G__10946, G__10947, G__10948, G__10949, G__10950, G__10951, G__10952);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10953 = a;
    var G__10954 = b;
    var G__10955 = c;
    var G__10956 = d;
    var G__10957 = e;
    var G__10958 = f;
    var G__10959 = g;
    var G__10960 = h;
    var G__10961 = i;
    var G__10962 = j;
    var G__10963 = k;
    var G__10964 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__10953, G__10954, G__10955, G__10956, G__10957, G__10958, G__10959, G__10960, G__10961, G__10962, G__10963, G__10964) : target_fn.call(null, G__10953, G__10954, G__10955, G__10956, G__10957, G__10958, G__10959, G__10960, G__10961, G__10962, G__10963, G__10964);
  };
  var G__11649__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10965 = a;
      var G__10966 = b;
      var G__10967 = c;
      var G__10968 = d;
      var G__10969 = e;
      var G__10970 = f;
      var G__10971 = g;
      var G__10972 = h;
      var G__10973 = i;
      var G__10974 = j;
      var G__10975 = k;
      var G__10976 = l;
      var G__10977 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__10965, G__10966, G__10967, G__10968, G__10969, G__10970, G__10971, G__10972, G__10973, G__10974, G__10975, G__10976, G__10977) : self__.dispatch_fn.call(null, G__10965, G__10966, G__10967, G__10968, G__10969, G__10970, G__10971, G__10972, G__10973, G__10974, G__10975, G__10976, G__10977);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10978 = a;
    var G__10979 = b;
    var G__10980 = c;
    var G__10981 = d;
    var G__10982 = e;
    var G__10983 = f;
    var G__10984 = g;
    var G__10985 = h;
    var G__10986 = i;
    var G__10987 = j;
    var G__10988 = k;
    var G__10989 = l;
    var G__10990 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__10978, G__10979, G__10980, G__10981, G__10982, G__10983, G__10984, G__10985, G__10986, G__10987, G__10988, G__10989, G__10990) : target_fn.call(null, G__10978, G__10979, G__10980, G__10981, G__10982, G__10983, G__10984, G__10985, G__10986, G__10987, G__10988, G__10989, G__10990);
  };
  var G__11649__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10991 = a;
      var G__10992 = b;
      var G__10993 = c;
      var G__10994 = d;
      var G__10995 = e;
      var G__10996 = f;
      var G__10997 = g;
      var G__10998 = h;
      var G__10999 = i;
      var G__11000 = j;
      var G__11001 = k;
      var G__11002 = l;
      var G__11003 = m;
      var G__11004 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__10991, G__10992, G__10993, G__10994, G__10995, G__10996, G__10997, G__10998, G__10999, G__11000, G__11001, G__11002, G__11003, G__11004) : self__.dispatch_fn.call(null, G__10991, G__10992, G__10993, G__10994, G__10995, G__10996, G__10997, G__10998, G__10999, G__11000, G__11001, G__11002, G__11003, G__11004);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11005 = a;
    var G__11006 = b;
    var G__11007 = c;
    var G__11008 = d;
    var G__11009 = e;
    var G__11010 = f;
    var G__11011 = g;
    var G__11012 = h;
    var G__11013 = i;
    var G__11014 = j;
    var G__11015 = k;
    var G__11016 = l;
    var G__11017 = m;
    var G__11018 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__11005, G__11006, G__11007, G__11008, G__11009, G__11010, G__11011, G__11012, G__11013, G__11014, G__11015, G__11016, G__11017, G__11018) : target_fn.call(null, G__11005, G__11006, G__11007, G__11008, G__11009, G__11010, G__11011, G__11012, G__11013, G__11014, G__11015, G__11016, G__11017, G__11018);
  };
  var G__11649__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11019 = a;
      var G__11020 = b;
      var G__11021 = c;
      var G__11022 = d;
      var G__11023 = e;
      var G__11024 = f;
      var G__11025 = g;
      var G__11026 = h;
      var G__11027 = i;
      var G__11028 = j;
      var G__11029 = k;
      var G__11030 = l;
      var G__11031 = m;
      var G__11032 = n;
      var G__11033 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__11019, G__11020, G__11021, G__11022, G__11023, G__11024, G__11025, G__11026, G__11027, G__11028, G__11029, G__11030, G__11031, G__11032, G__11033) : self__.dispatch_fn.call(null, G__11019, G__11020, G__11021, G__11022, G__11023, G__11024, G__11025, G__11026, G__11027, G__11028, G__11029, G__11030, G__11031, G__11032, G__11033);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11034 = a;
    var G__11035 = b;
    var G__11036 = c;
    var G__11037 = d;
    var G__11038 = e;
    var G__11039 = f;
    var G__11040 = g;
    var G__11041 = h;
    var G__11042 = i;
    var G__11043 = j;
    var G__11044 = k;
    var G__11045 = l;
    var G__11046 = m;
    var G__11047 = n;
    var G__11048 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__11034, G__11035, G__11036, G__11037, G__11038, G__11039, G__11040, G__11041, G__11042, G__11043, G__11044, G__11045, G__11046, G__11047, G__11048) : target_fn.call(null, G__11034, G__11035, G__11036, G__11037, G__11038, G__11039, G__11040, G__11041, G__11042, G__11043, G__11044, G__11045, G__11046, G__11047, G__11048);
  };
  var G__11649__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11049 = a;
      var G__11050 = b;
      var G__11051 = c;
      var G__11052 = d;
      var G__11053 = e;
      var G__11054 = f;
      var G__11055 = g;
      var G__11056 = h;
      var G__11057 = i;
      var G__11058 = j;
      var G__11059 = k;
      var G__11060 = l;
      var G__11061 = m;
      var G__11062 = n;
      var G__11063 = o;
      var G__11064 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__11049, G__11050, G__11051, G__11052, G__11053, G__11054, G__11055, G__11056, G__11057, G__11058, G__11059, G__11060, G__11061, G__11062, G__11063, G__11064) : self__.dispatch_fn.call(null, G__11049, G__11050, G__11051, G__11052, G__11053, G__11054, G__11055, G__11056, G__11057, G__11058, G__11059, G__11060, G__11061, G__11062, G__11063, G__11064);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11065 = a;
    var G__11066 = b;
    var G__11067 = c;
    var G__11068 = d;
    var G__11069 = e;
    var G__11070 = f;
    var G__11071 = g;
    var G__11072 = h;
    var G__11073 = i;
    var G__11074 = j;
    var G__11075 = k;
    var G__11076 = l;
    var G__11077 = m;
    var G__11078 = n;
    var G__11079 = o;
    var G__11080 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__11065, G__11066, G__11067, G__11068, G__11069, G__11070, G__11071, G__11072, G__11073, G__11074, G__11075, G__11076, G__11077, G__11078, G__11079, G__11080) : target_fn.call(null, G__11065, G__11066, G__11067, G__11068, G__11069, G__11070, G__11071, G__11072, G__11073, G__11074, G__11075, G__11076, G__11077, G__11078, G__11079, G__11080);
  };
  var G__11649__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11081 = a;
      var G__11082 = b;
      var G__11083 = c;
      var G__11084 = d;
      var G__11085 = e;
      var G__11086 = f;
      var G__11087 = g;
      var G__11088 = h;
      var G__11089 = i;
      var G__11090 = j;
      var G__11091 = k;
      var G__11092 = l;
      var G__11093 = m;
      var G__11094 = n;
      var G__11095 = o;
      var G__11096 = p;
      var G__11097 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__11081, G__11082, G__11083, G__11084, G__11085, G__11086, G__11087, G__11088, G__11089, G__11090, G__11091, G__11092, G__11093, G__11094, G__11095, G__11096, G__11097) : self__.dispatch_fn.call(null, G__11081, G__11082, G__11083, G__11084, G__11085, G__11086, G__11087, G__11088, G__11089, G__11090, G__11091, G__11092, G__11093, G__11094, G__11095, G__11096, G__11097);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11098 = a;
    var G__11099 = b;
    var G__11100 = c;
    var G__11101 = d;
    var G__11102 = e;
    var G__11103 = f;
    var G__11104 = g;
    var G__11105 = h;
    var G__11106 = i;
    var G__11107 = j;
    var G__11108 = k;
    var G__11109 = l;
    var G__11110 = m;
    var G__11111 = n;
    var G__11112 = o;
    var G__11113 = p;
    var G__11114 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__11098, G__11099, G__11100, G__11101, G__11102, G__11103, G__11104, G__11105, G__11106, G__11107, G__11108, G__11109, G__11110, G__11111, G__11112, G__11113, G__11114) : target_fn.call(null, G__11098, G__11099, G__11100, G__11101, G__11102, G__11103, G__11104, G__11105, G__11106, G__11107, G__11108, G__11109, G__11110, G__11111, G__11112, G__11113, G__11114);
  };
  var G__11649__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11115 = a;
      var G__11116 = b;
      var G__11117 = c;
      var G__11118 = d;
      var G__11119 = e;
      var G__11120 = f;
      var G__11121 = g;
      var G__11122 = h;
      var G__11123 = i;
      var G__11124 = j;
      var G__11125 = k;
      var G__11126 = l;
      var G__11127 = m;
      var G__11128 = n;
      var G__11129 = o;
      var G__11130 = p;
      var G__11131 = q;
      var G__11132 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__11115, G__11116, G__11117, G__11118, G__11119, G__11120, G__11121, G__11122, G__11123, G__11124, G__11125, G__11126, G__11127, G__11128, G__11129, G__11130, G__11131, G__11132) : self__.dispatch_fn.call(null, G__11115, G__11116, G__11117, G__11118, G__11119, G__11120, G__11121, G__11122, G__11123, G__11124, G__11125, G__11126, G__11127, G__11128, G__11129, G__11130, G__11131, G__11132);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11133 = a;
    var G__11134 = b;
    var G__11135 = c;
    var G__11136 = d;
    var G__11137 = e;
    var G__11138 = f;
    var G__11139 = g;
    var G__11140 = h;
    var G__11141 = i;
    var G__11142 = j;
    var G__11143 = k;
    var G__11144 = l;
    var G__11145 = m;
    var G__11146 = n;
    var G__11147 = o;
    var G__11148 = p;
    var G__11149 = q;
    var G__11150 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__11133, G__11134, G__11135, G__11136, G__11137, G__11138, G__11139, G__11140, G__11141, G__11142, G__11143, G__11144, G__11145, G__11146, G__11147, G__11148, G__11149, G__11150) : target_fn.call(null, G__11133, G__11134, G__11135, G__11136, G__11137, G__11138, G__11139, G__11140, G__11141, G__11142, G__11143, G__11144, G__11145, G__11146, G__11147, G__11148, G__11149, G__11150);
  };
  var G__11649__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11151 = a;
      var G__11152 = b;
      var G__11153 = c;
      var G__11154 = d;
      var G__11155 = e;
      var G__11156 = f;
      var G__11157 = g;
      var G__11158 = h;
      var G__11159 = i;
      var G__11160 = j;
      var G__11161 = k;
      var G__11162 = l;
      var G__11163 = m;
      var G__11164 = n;
      var G__11165 = o;
      var G__11166 = p;
      var G__11167 = q;
      var G__11168 = r;
      var G__11169 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__11151, G__11152, G__11153, G__11154, G__11155, G__11156, G__11157, G__11158, G__11159, G__11160, G__11161, G__11162, G__11163, G__11164, G__11165, G__11166, G__11167, G__11168, G__11169) : self__.dispatch_fn.call(null, G__11151, G__11152, G__11153, G__11154, G__11155, G__11156, G__11157, G__11158, G__11159, G__11160, G__11161, G__11162, G__11163, G__11164, G__11165, G__11166, G__11167, 
      G__11168, G__11169);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11170 = a;
    var G__11171 = b;
    var G__11172 = c;
    var G__11173 = d;
    var G__11174 = e;
    var G__11175 = f;
    var G__11176 = g;
    var G__11177 = h;
    var G__11178 = i;
    var G__11179 = j;
    var G__11180 = k;
    var G__11181 = l;
    var G__11182 = m;
    var G__11183 = n;
    var G__11184 = o;
    var G__11185 = p;
    var G__11186 = q;
    var G__11187 = r;
    var G__11188 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__11170, G__11171, G__11172, G__11173, G__11174, G__11175, G__11176, G__11177, G__11178, G__11179, G__11180, G__11181, G__11182, G__11183, G__11184, G__11185, G__11186, G__11187, G__11188) : target_fn.call(null, G__11170, G__11171, G__11172, G__11173, G__11174, G__11175, G__11176, G__11177, G__11178, G__11179, G__11180, G__11181, G__11182, G__11183, G__11184, G__11185, G__11186, G__11187, G__11188);
  };
  var G__11649__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11189 = a;
      var G__11190 = b;
      var G__11191 = c;
      var G__11192 = d;
      var G__11193 = e;
      var G__11194 = f;
      var G__11195 = g;
      var G__11196 = h;
      var G__11197 = i;
      var G__11198 = j;
      var G__11199 = k;
      var G__11200 = l;
      var G__11201 = m;
      var G__11202 = n;
      var G__11203 = o;
      var G__11204 = p;
      var G__11205 = q;
      var G__11206 = r;
      var G__11207 = s;
      var G__11208 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__11189, G__11190, G__11191, G__11192, G__11193, G__11194, G__11195, G__11196, G__11197, G__11198, G__11199, G__11200, G__11201, G__11202, G__11203, G__11204, G__11205, G__11206, G__11207, G__11208) : self__.dispatch_fn.call(null, G__11189, G__11190, G__11191, G__11192, G__11193, G__11194, G__11195, G__11196, G__11197, G__11198, G__11199, G__11200, G__11201, G__11202, G__11203, G__11204, 
      G__11205, G__11206, G__11207, G__11208);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11209 = a;
    var G__11210 = b;
    var G__11211 = c;
    var G__11212 = d;
    var G__11213 = e;
    var G__11214 = f;
    var G__11215 = g;
    var G__11216 = h;
    var G__11217 = i;
    var G__11218 = j;
    var G__11219 = k;
    var G__11220 = l;
    var G__11221 = m;
    var G__11222 = n;
    var G__11223 = o;
    var G__11224 = p;
    var G__11225 = q;
    var G__11226 = r;
    var G__11227 = s;
    var G__11228 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__11209, G__11210, G__11211, G__11212, G__11213, G__11214, G__11215, G__11216, G__11217, G__11218, G__11219, G__11220, G__11221, G__11222, G__11223, G__11224, G__11225, G__11226, G__11227, G__11228) : target_fn.call(null, G__11209, G__11210, G__11211, G__11212, G__11213, G__11214, G__11215, G__11216, G__11217, G__11218, G__11219, G__11220, G__11221, G__11222, G__11223, G__11224, G__11225, G__11226, G__11227, 
    G__11228);
  };
  var G__11649__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__11649 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11649__1.call(this, self__);
      case 2:
        return G__11649__2.call(this, self__, a);
      case 3:
        return G__11649__3.call(this, self__, a, b);
      case 4:
        return G__11649__4.call(this, self__, a, b, c);
      case 5:
        return G__11649__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11649__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11649__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11649__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11649__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11649__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11649__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11649__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11649__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11649__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11649__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11649__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11649__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11649__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11649__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11649__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11649__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11649__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11649.cljs$core$IFn$_invoke$arity$1 = G__11649__1;
  G__11649.cljs$core$IFn$_invoke$arity$2 = G__11649__2;
  G__11649.cljs$core$IFn$_invoke$arity$3 = G__11649__3;
  G__11649.cljs$core$IFn$_invoke$arity$4 = G__11649__4;
  G__11649.cljs$core$IFn$_invoke$arity$5 = G__11649__5;
  G__11649.cljs$core$IFn$_invoke$arity$6 = G__11649__6;
  G__11649.cljs$core$IFn$_invoke$arity$7 = G__11649__7;
  G__11649.cljs$core$IFn$_invoke$arity$8 = G__11649__8;
  G__11649.cljs$core$IFn$_invoke$arity$9 = G__11649__9;
  G__11649.cljs$core$IFn$_invoke$arity$10 = G__11649__10;
  G__11649.cljs$core$IFn$_invoke$arity$11 = G__11649__11;
  G__11649.cljs$core$IFn$_invoke$arity$12 = G__11649__12;
  G__11649.cljs$core$IFn$_invoke$arity$13 = G__11649__13;
  G__11649.cljs$core$IFn$_invoke$arity$14 = G__11649__14;
  G__11649.cljs$core$IFn$_invoke$arity$15 = G__11649__15;
  G__11649.cljs$core$IFn$_invoke$arity$16 = G__11649__16;
  G__11649.cljs$core$IFn$_invoke$arity$17 = G__11649__17;
  G__11649.cljs$core$IFn$_invoke$arity$18 = G__11649__18;
  G__11649.cljs$core$IFn$_invoke$arity$19 = G__11649__19;
  G__11649.cljs$core$IFn$_invoke$arity$20 = G__11649__20;
  G__11649.cljs$core$IFn$_invoke$arity$21 = G__11649__21;
  G__11649.cljs$core$IFn$_invoke$arity$22 = G__11649__22;
  return G__11649;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args10801) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10801)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11229 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__11229) : self__.dispatch_fn.call(null, G__11229);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11230 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__11230) : target_fn.call(null, G__11230);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11231 = a;
    var G__11232 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__11231, G__11232) : self__.dispatch_fn.call(null, G__11231, G__11232);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11233 = a;
  var G__11234 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__11233, G__11234) : target_fn.call(null, G__11233, G__11234);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11235 = a;
    var G__11236 = b;
    var G__11237 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__11235, G__11236, G__11237) : self__.dispatch_fn.call(null, G__11235, G__11236, G__11237);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11238 = a;
  var G__11239 = b;
  var G__11240 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__11238, G__11239, G__11240) : target_fn.call(null, G__11238, G__11239, G__11240);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11241 = a;
    var G__11242 = b;
    var G__11243 = c;
    var G__11244 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__11241, G__11242, G__11243, G__11244) : self__.dispatch_fn.call(null, G__11241, G__11242, G__11243, G__11244);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11245 = a;
  var G__11246 = b;
  var G__11247 = c;
  var G__11248 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__11245, G__11246, G__11247, G__11248) : target_fn.call(null, G__11245, G__11246, G__11247, G__11248);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11249 = a;
    var G__11250 = b;
    var G__11251 = c;
    var G__11252 = d;
    var G__11253 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__11249, G__11250, G__11251, G__11252, G__11253) : self__.dispatch_fn.call(null, G__11249, G__11250, G__11251, G__11252, G__11253);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11254 = a;
  var G__11255 = b;
  var G__11256 = c;
  var G__11257 = d;
  var G__11258 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__11254, G__11255, G__11256, G__11257, G__11258) : target_fn.call(null, G__11254, G__11255, G__11256, G__11257, G__11258);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11259 = a;
    var G__11260 = b;
    var G__11261 = c;
    var G__11262 = d;
    var G__11263 = e;
    var G__11264 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__11259, G__11260, G__11261, G__11262, G__11263, G__11264) : self__.dispatch_fn.call(null, G__11259, G__11260, G__11261, G__11262, G__11263, G__11264);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11265 = a;
  var G__11266 = b;
  var G__11267 = c;
  var G__11268 = d;
  var G__11269 = e;
  var G__11270 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__11265, G__11266, G__11267, G__11268, G__11269, G__11270) : target_fn.call(null, G__11265, G__11266, G__11267, G__11268, G__11269, G__11270);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11271 = a;
    var G__11272 = b;
    var G__11273 = c;
    var G__11274 = d;
    var G__11275 = e;
    var G__11276 = f;
    var G__11277 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__11271, G__11272, G__11273, G__11274, G__11275, G__11276, G__11277) : self__.dispatch_fn.call(null, G__11271, G__11272, G__11273, G__11274, G__11275, G__11276, G__11277);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11278 = a;
  var G__11279 = b;
  var G__11280 = c;
  var G__11281 = d;
  var G__11282 = e;
  var G__11283 = f;
  var G__11284 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__11278, G__11279, G__11280, G__11281, G__11282, G__11283, G__11284) : target_fn.call(null, G__11278, G__11279, G__11280, G__11281, G__11282, G__11283, G__11284);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11285 = a;
    var G__11286 = b;
    var G__11287 = c;
    var G__11288 = d;
    var G__11289 = e;
    var G__11290 = f;
    var G__11291 = g;
    var G__11292 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__11285, G__11286, G__11287, G__11288, G__11289, G__11290, G__11291, G__11292) : self__.dispatch_fn.call(null, G__11285, G__11286, G__11287, G__11288, G__11289, G__11290, G__11291, G__11292);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11293 = a;
  var G__11294 = b;
  var G__11295 = c;
  var G__11296 = d;
  var G__11297 = e;
  var G__11298 = f;
  var G__11299 = g;
  var G__11300 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__11293, G__11294, G__11295, G__11296, G__11297, G__11298, G__11299, G__11300) : target_fn.call(null, G__11293, G__11294, G__11295, G__11296, G__11297, G__11298, G__11299, G__11300);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11301 = a;
    var G__11302 = b;
    var G__11303 = c;
    var G__11304 = d;
    var G__11305 = e;
    var G__11306 = f;
    var G__11307 = g;
    var G__11308 = h;
    var G__11309 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__11301, G__11302, G__11303, G__11304, G__11305, G__11306, G__11307, G__11308, G__11309) : self__.dispatch_fn.call(null, G__11301, G__11302, G__11303, G__11304, G__11305, G__11306, G__11307, G__11308, G__11309);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11310 = a;
  var G__11311 = b;
  var G__11312 = c;
  var G__11313 = d;
  var G__11314 = e;
  var G__11315 = f;
  var G__11316 = g;
  var G__11317 = h;
  var G__11318 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__11310, G__11311, G__11312, G__11313, G__11314, G__11315, G__11316, G__11317, G__11318) : target_fn.call(null, G__11310, G__11311, G__11312, G__11313, G__11314, G__11315, G__11316, G__11317, G__11318);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11319 = a;
    var G__11320 = b;
    var G__11321 = c;
    var G__11322 = d;
    var G__11323 = e;
    var G__11324 = f;
    var G__11325 = g;
    var G__11326 = h;
    var G__11327 = i;
    var G__11328 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__11319, G__11320, G__11321, G__11322, G__11323, G__11324, G__11325, G__11326, G__11327, G__11328) : self__.dispatch_fn.call(null, G__11319, G__11320, G__11321, G__11322, G__11323, G__11324, G__11325, G__11326, G__11327, G__11328);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11329 = a;
  var G__11330 = b;
  var G__11331 = c;
  var G__11332 = d;
  var G__11333 = e;
  var G__11334 = f;
  var G__11335 = g;
  var G__11336 = h;
  var G__11337 = i;
  var G__11338 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__11329, G__11330, G__11331, G__11332, G__11333, G__11334, G__11335, G__11336, G__11337, G__11338) : target_fn.call(null, G__11329, G__11330, G__11331, G__11332, G__11333, G__11334, G__11335, G__11336, G__11337, G__11338);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11339 = a;
    var G__11340 = b;
    var G__11341 = c;
    var G__11342 = d;
    var G__11343 = e;
    var G__11344 = f;
    var G__11345 = g;
    var G__11346 = h;
    var G__11347 = i;
    var G__11348 = j;
    var G__11349 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__11339, G__11340, G__11341, G__11342, G__11343, G__11344, G__11345, G__11346, G__11347, G__11348, G__11349) : self__.dispatch_fn.call(null, G__11339, G__11340, G__11341, G__11342, G__11343, G__11344, G__11345, G__11346, G__11347, G__11348, G__11349);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11350 = a;
  var G__11351 = b;
  var G__11352 = c;
  var G__11353 = d;
  var G__11354 = e;
  var G__11355 = f;
  var G__11356 = g;
  var G__11357 = h;
  var G__11358 = i;
  var G__11359 = j;
  var G__11360 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__11350, G__11351, G__11352, G__11353, G__11354, G__11355, G__11356, G__11357, G__11358, G__11359, G__11360) : target_fn.call(null, G__11350, G__11351, G__11352, G__11353, G__11354, G__11355, G__11356, G__11357, G__11358, G__11359, G__11360);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11361 = a;
    var G__11362 = b;
    var G__11363 = c;
    var G__11364 = d;
    var G__11365 = e;
    var G__11366 = f;
    var G__11367 = g;
    var G__11368 = h;
    var G__11369 = i;
    var G__11370 = j;
    var G__11371 = k;
    var G__11372 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__11361, G__11362, G__11363, G__11364, G__11365, G__11366, G__11367, G__11368, G__11369, G__11370, G__11371, G__11372) : self__.dispatch_fn.call(null, G__11361, G__11362, G__11363, G__11364, G__11365, G__11366, G__11367, G__11368, G__11369, G__11370, G__11371, G__11372);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11373 = a;
  var G__11374 = b;
  var G__11375 = c;
  var G__11376 = d;
  var G__11377 = e;
  var G__11378 = f;
  var G__11379 = g;
  var G__11380 = h;
  var G__11381 = i;
  var G__11382 = j;
  var G__11383 = k;
  var G__11384 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__11373, G__11374, G__11375, G__11376, G__11377, G__11378, G__11379, G__11380, G__11381, G__11382, G__11383, G__11384) : target_fn.call(null, G__11373, G__11374, G__11375, G__11376, G__11377, G__11378, G__11379, G__11380, G__11381, G__11382, G__11383, G__11384);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11385 = a;
    var G__11386 = b;
    var G__11387 = c;
    var G__11388 = d;
    var G__11389 = e;
    var G__11390 = f;
    var G__11391 = g;
    var G__11392 = h;
    var G__11393 = i;
    var G__11394 = j;
    var G__11395 = k;
    var G__11396 = l;
    var G__11397 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__11385, G__11386, G__11387, G__11388, G__11389, G__11390, G__11391, G__11392, G__11393, G__11394, G__11395, G__11396, G__11397) : self__.dispatch_fn.call(null, G__11385, G__11386, G__11387, G__11388, G__11389, G__11390, G__11391, G__11392, G__11393, G__11394, G__11395, G__11396, G__11397);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11398 = a;
  var G__11399 = b;
  var G__11400 = c;
  var G__11401 = d;
  var G__11402 = e;
  var G__11403 = f;
  var G__11404 = g;
  var G__11405 = h;
  var G__11406 = i;
  var G__11407 = j;
  var G__11408 = k;
  var G__11409 = l;
  var G__11410 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__11398, G__11399, G__11400, G__11401, G__11402, G__11403, G__11404, G__11405, G__11406, G__11407, G__11408, G__11409, G__11410) : target_fn.call(null, G__11398, G__11399, G__11400, G__11401, G__11402, G__11403, G__11404, G__11405, G__11406, G__11407, G__11408, G__11409, G__11410);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11411 = a;
    var G__11412 = b;
    var G__11413 = c;
    var G__11414 = d;
    var G__11415 = e;
    var G__11416 = f;
    var G__11417 = g;
    var G__11418 = h;
    var G__11419 = i;
    var G__11420 = j;
    var G__11421 = k;
    var G__11422 = l;
    var G__11423 = m;
    var G__11424 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__11411, G__11412, G__11413, G__11414, G__11415, G__11416, G__11417, G__11418, G__11419, G__11420, G__11421, G__11422, G__11423, G__11424) : self__.dispatch_fn.call(null, G__11411, G__11412, G__11413, G__11414, G__11415, G__11416, G__11417, G__11418, G__11419, G__11420, G__11421, G__11422, G__11423, G__11424);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11425 = a;
  var G__11426 = b;
  var G__11427 = c;
  var G__11428 = d;
  var G__11429 = e;
  var G__11430 = f;
  var G__11431 = g;
  var G__11432 = h;
  var G__11433 = i;
  var G__11434 = j;
  var G__11435 = k;
  var G__11436 = l;
  var G__11437 = m;
  var G__11438 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__11425, G__11426, G__11427, G__11428, G__11429, G__11430, G__11431, G__11432, G__11433, G__11434, G__11435, G__11436, G__11437, G__11438) : target_fn.call(null, G__11425, G__11426, G__11427, G__11428, G__11429, G__11430, G__11431, G__11432, G__11433, G__11434, G__11435, G__11436, G__11437, G__11438);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11439 = a;
    var G__11440 = b;
    var G__11441 = c;
    var G__11442 = d;
    var G__11443 = e;
    var G__11444 = f;
    var G__11445 = g;
    var G__11446 = h;
    var G__11447 = i;
    var G__11448 = j;
    var G__11449 = k;
    var G__11450 = l;
    var G__11451 = m;
    var G__11452 = n;
    var G__11453 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__11439, G__11440, G__11441, G__11442, G__11443, G__11444, G__11445, G__11446, G__11447, G__11448, G__11449, G__11450, G__11451, G__11452, G__11453) : self__.dispatch_fn.call(null, G__11439, G__11440, G__11441, G__11442, G__11443, G__11444, G__11445, G__11446, G__11447, G__11448, G__11449, G__11450, G__11451, G__11452, G__11453);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11454 = a;
  var G__11455 = b;
  var G__11456 = c;
  var G__11457 = d;
  var G__11458 = e;
  var G__11459 = f;
  var G__11460 = g;
  var G__11461 = h;
  var G__11462 = i;
  var G__11463 = j;
  var G__11464 = k;
  var G__11465 = l;
  var G__11466 = m;
  var G__11467 = n;
  var G__11468 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__11454, G__11455, G__11456, G__11457, G__11458, G__11459, G__11460, G__11461, G__11462, G__11463, G__11464, G__11465, G__11466, G__11467, G__11468) : target_fn.call(null, G__11454, G__11455, G__11456, G__11457, G__11458, G__11459, G__11460, G__11461, G__11462, G__11463, G__11464, G__11465, G__11466, G__11467, G__11468);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11469 = a;
    var G__11470 = b;
    var G__11471 = c;
    var G__11472 = d;
    var G__11473 = e;
    var G__11474 = f;
    var G__11475 = g;
    var G__11476 = h;
    var G__11477 = i;
    var G__11478 = j;
    var G__11479 = k;
    var G__11480 = l;
    var G__11481 = m;
    var G__11482 = n;
    var G__11483 = o;
    var G__11484 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__11469, G__11470, G__11471, G__11472, G__11473, G__11474, G__11475, G__11476, G__11477, G__11478, G__11479, G__11480, G__11481, G__11482, G__11483, G__11484) : self__.dispatch_fn.call(null, G__11469, G__11470, G__11471, G__11472, G__11473, G__11474, G__11475, G__11476, G__11477, G__11478, G__11479, G__11480, G__11481, G__11482, G__11483, G__11484);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11485 = a;
  var G__11486 = b;
  var G__11487 = c;
  var G__11488 = d;
  var G__11489 = e;
  var G__11490 = f;
  var G__11491 = g;
  var G__11492 = h;
  var G__11493 = i;
  var G__11494 = j;
  var G__11495 = k;
  var G__11496 = l;
  var G__11497 = m;
  var G__11498 = n;
  var G__11499 = o;
  var G__11500 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__11485, G__11486, G__11487, G__11488, G__11489, G__11490, G__11491, G__11492, G__11493, G__11494, G__11495, G__11496, G__11497, G__11498, G__11499, G__11500) : target_fn.call(null, G__11485, G__11486, G__11487, G__11488, G__11489, G__11490, G__11491, G__11492, G__11493, G__11494, G__11495, G__11496, G__11497, G__11498, G__11499, G__11500);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11501 = a;
    var G__11502 = b;
    var G__11503 = c;
    var G__11504 = d;
    var G__11505 = e;
    var G__11506 = f;
    var G__11507 = g;
    var G__11508 = h;
    var G__11509 = i;
    var G__11510 = j;
    var G__11511 = k;
    var G__11512 = l;
    var G__11513 = m;
    var G__11514 = n;
    var G__11515 = o;
    var G__11516 = p;
    var G__11517 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__11501, G__11502, G__11503, G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512, G__11513, G__11514, G__11515, G__11516, G__11517) : self__.dispatch_fn.call(null, G__11501, G__11502, G__11503, G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512, G__11513, G__11514, G__11515, G__11516, G__11517);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11518 = a;
  var G__11519 = b;
  var G__11520 = c;
  var G__11521 = d;
  var G__11522 = e;
  var G__11523 = f;
  var G__11524 = g;
  var G__11525 = h;
  var G__11526 = i;
  var G__11527 = j;
  var G__11528 = k;
  var G__11529 = l;
  var G__11530 = m;
  var G__11531 = n;
  var G__11532 = o;
  var G__11533 = p;
  var G__11534 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__11518, G__11519, G__11520, G__11521, G__11522, G__11523, G__11524, G__11525, G__11526, G__11527, G__11528, G__11529, G__11530, G__11531, G__11532, G__11533, G__11534) : target_fn.call(null, G__11518, G__11519, G__11520, G__11521, G__11522, G__11523, G__11524, G__11525, G__11526, G__11527, G__11528, G__11529, G__11530, G__11531, G__11532, G__11533, G__11534);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11535 = a;
    var G__11536 = b;
    var G__11537 = c;
    var G__11538 = d;
    var G__11539 = e;
    var G__11540 = f;
    var G__11541 = g;
    var G__11542 = h;
    var G__11543 = i;
    var G__11544 = j;
    var G__11545 = k;
    var G__11546 = l;
    var G__11547 = m;
    var G__11548 = n;
    var G__11549 = o;
    var G__11550 = p;
    var G__11551 = q;
    var G__11552 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, G__11541, G__11542, G__11543, G__11544, G__11545, G__11546, G__11547, G__11548, G__11549, G__11550, G__11551, G__11552) : self__.dispatch_fn.call(null, G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, G__11541, G__11542, G__11543, G__11544, G__11545, G__11546, G__11547, G__11548, G__11549, G__11550, G__11551, G__11552);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11553 = a;
  var G__11554 = b;
  var G__11555 = c;
  var G__11556 = d;
  var G__11557 = e;
  var G__11558 = f;
  var G__11559 = g;
  var G__11560 = h;
  var G__11561 = i;
  var G__11562 = j;
  var G__11563 = k;
  var G__11564 = l;
  var G__11565 = m;
  var G__11566 = n;
  var G__11567 = o;
  var G__11568 = p;
  var G__11569 = q;
  var G__11570 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__11553, G__11554, G__11555, G__11556, G__11557, G__11558, G__11559, G__11560, G__11561, G__11562, G__11563, G__11564, G__11565, G__11566, G__11567, G__11568, G__11569, G__11570) : target_fn.call(null, G__11553, G__11554, G__11555, G__11556, G__11557, G__11558, G__11559, G__11560, G__11561, G__11562, G__11563, G__11564, G__11565, G__11566, G__11567, G__11568, G__11569, G__11570);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11571 = a;
    var G__11572 = b;
    var G__11573 = c;
    var G__11574 = d;
    var G__11575 = e;
    var G__11576 = f;
    var G__11577 = g;
    var G__11578 = h;
    var G__11579 = i;
    var G__11580 = j;
    var G__11581 = k;
    var G__11582 = l;
    var G__11583 = m;
    var G__11584 = n;
    var G__11585 = o;
    var G__11586 = p;
    var G__11587 = q;
    var G__11588 = r;
    var G__11589 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__11571, G__11572, G__11573, G__11574, G__11575, G__11576, G__11577, G__11578, G__11579, G__11580, G__11581, G__11582, G__11583, G__11584, G__11585, G__11586, G__11587, G__11588, G__11589) : self__.dispatch_fn.call(null, G__11571, G__11572, G__11573, G__11574, G__11575, G__11576, G__11577, G__11578, G__11579, G__11580, G__11581, G__11582, G__11583, G__11584, G__11585, G__11586, G__11587, 
    G__11588, G__11589);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11590 = a;
  var G__11591 = b;
  var G__11592 = c;
  var G__11593 = d;
  var G__11594 = e;
  var G__11595 = f;
  var G__11596 = g;
  var G__11597 = h;
  var G__11598 = i;
  var G__11599 = j;
  var G__11600 = k;
  var G__11601 = l;
  var G__11602 = m;
  var G__11603 = n;
  var G__11604 = o;
  var G__11605 = p;
  var G__11606 = q;
  var G__11607 = r;
  var G__11608 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__11590, G__11591, G__11592, G__11593, G__11594, G__11595, G__11596, G__11597, G__11598, G__11599, G__11600, G__11601, G__11602, G__11603, G__11604, G__11605, G__11606, G__11607, G__11608) : target_fn.call(null, G__11590, G__11591, G__11592, G__11593, G__11594, G__11595, G__11596, G__11597, G__11598, G__11599, G__11600, G__11601, G__11602, G__11603, G__11604, G__11605, G__11606, G__11607, G__11608);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11609 = a;
    var G__11610 = b;
    var G__11611 = c;
    var G__11612 = d;
    var G__11613 = e;
    var G__11614 = f;
    var G__11615 = g;
    var G__11616 = h;
    var G__11617 = i;
    var G__11618 = j;
    var G__11619 = k;
    var G__11620 = l;
    var G__11621 = m;
    var G__11622 = n;
    var G__11623 = o;
    var G__11624 = p;
    var G__11625 = q;
    var G__11626 = r;
    var G__11627 = s;
    var G__11628 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__11609, G__11610, G__11611, G__11612, G__11613, G__11614, G__11615, G__11616, G__11617, G__11618, G__11619, G__11620, G__11621, G__11622, G__11623, G__11624, G__11625, G__11626, G__11627, G__11628) : self__.dispatch_fn.call(null, G__11609, G__11610, G__11611, G__11612, G__11613, G__11614, G__11615, G__11616, G__11617, G__11618, G__11619, G__11620, G__11621, G__11622, G__11623, G__11624, 
    G__11625, G__11626, G__11627, G__11628);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11629 = a;
  var G__11630 = b;
  var G__11631 = c;
  var G__11632 = d;
  var G__11633 = e;
  var G__11634 = f;
  var G__11635 = g;
  var G__11636 = h;
  var G__11637 = i;
  var G__11638 = j;
  var G__11639 = k;
  var G__11640 = l;
  var G__11641 = m;
  var G__11642 = n;
  var G__11643 = o;
  var G__11644 = p;
  var G__11645 = q;
  var G__11646 = r;
  var G__11647 = s;
  var G__11648 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__11629, G__11630, G__11631, G__11632, G__11633, G__11634, G__11635, G__11636, G__11637, G__11638, G__11639, G__11640, G__11641, G__11642, G__11643, G__11644, G__11645, G__11646, G__11647, G__11648) : target_fn.call(null, G__11629, G__11630, G__11631, G__11632, G__11633, G__11634, G__11635, G__11636, G__11637, G__11638, G__11639, G__11640, G__11641, G__11642, G__11643, G__11644, G__11645, G__11646, G__11647, 
  G__11648);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__11650 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__11650);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write(writer__4385__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.pr_writer_ex_info = function pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, data) {
    return ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var ex_info__3 = function(msg, data, cause) {
    cljs.core.ExceptionInfo.prototype = function() {
      var G__11655 = msg;
      return Error(G__11655);
    }();
    cljs.core.ExceptionInfo.prototype.name = "ExceptionInfo";
    cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
    cljs.core.ExceptionInfo.prototype.toString = cljs.core.pr_str_STAR_;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
      var obj__$1 = this;
      return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
    };
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, data);
      case 3:
        return ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__11660 = x;
      var G__11661 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__11660, G__11661) : pred.call(null, G__11660, G__11661);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__11662 = y;
        var G__11663 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__11662, G__11663) : pred.call(null, G__11662, G__11663);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("hoard.util");
goog.require("cljs.core");
hoard.util.hidden = function hidden(is_hidden) {
  if (cljs.core.truth_(is_hidden)) {
    return{"display":"none"};
  } else {
    return{};
  }
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
/*
 Portions of this code are from the Dojo Toolkit, received by
 The Closure Library Authors under the BSD license. All other code is
 Copyright 2005-2009 The Closure Library Authors. All Rights Reserved.

The "New" BSD License:

Copyright (c) 2005-2009, The Dojo Foundation
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 Neither the name of the Dojo Foundation nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
goog.provide("goog.dom.query");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.functions");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.query = function() {
  var cssCaseBug = goog.userAgent.WEBKIT && goog.dom.getDocument().compatMode == "BackCompat";
  var childNodesName = !!goog.dom.getDocument().firstChild["children"] ? "children" : "childNodes";
  var specials = "\x3e~+";
  var caseSensitive = false;
  var getQueryParts = function(query) {
    if (specials.indexOf(query.slice(-1)) >= 0) {
      query += " * ";
    } else {
      query += " ";
    }
    var ts = function(s, e) {
      return goog.string.trim(query.slice(s, e));
    };
    var queryParts = [];
    var inBrackets = -1, inParens = -1, inMatchFor = -1, inPseudo = -1, inClass = -1, inId = -1, inTag = -1, lc = "", cc = "", pStart;
    var x = 0, ql = query.length, currentPart = null, cp = null;
    var endTag = function() {
      if (inTag >= 0) {
        var tv = inTag == x ? null : ts(inTag, x);
        if (specials.indexOf(tv) < 0) {
          currentPart.tag = tv;
        } else {
          currentPart.oper = tv;
        }
        inTag = -1;
      }
    };
    var endId = function() {
      if (inId >= 0) {
        currentPart.id = ts(inId, x).replace(/\\/g, "");
        inId = -1;
      }
    };
    var endClass = function() {
      if (inClass >= 0) {
        currentPart.classes.push(ts(inClass + 1, x).replace(/\\/g, ""));
        inClass = -1;
      }
    };
    var endAll = function() {
      endId();
      endTag();
      endClass();
    };
    var endPart = function() {
      endAll();
      if (inPseudo >= 0) {
        currentPart.pseudos.push({name:ts(inPseudo + 1, x)});
      }
      currentPart.loops = currentPart.pseudos.length || currentPart.attrs.length || currentPart.classes.length;
      currentPart.oquery = currentPart.query = ts(pStart, x);
      currentPart.otag = currentPart.tag = currentPart.oper ? null : currentPart.tag || "*";
      if (currentPart.tag) {
        currentPart.tag = currentPart.tag.toUpperCase();
      }
      if (queryParts.length && queryParts[queryParts.length - 1].oper) {
        currentPart.infixOper = queryParts.pop();
        currentPart.query = currentPart.infixOper.query + " " + currentPart.query;
      }
      queryParts.push(currentPart);
      currentPart = null;
    };
    for (;lc = cc, cc = query.charAt(x), x < ql;x++) {
      if (lc == "\\") {
        continue;
      }
      if (!currentPart) {
        pStart = x;
        currentPart = {query:null, pseudos:[], attrs:[], classes:[], tag:null, oper:null, id:null, getTag:function() {
          return caseSensitive ? this.otag : this.tag;
        }};
        inTag = x;
      }
      if (inBrackets >= 0) {
        if (cc == "]") {
          if (!cp.attr) {
            cp.attr = ts(inBrackets + 1, x);
          } else {
            cp.matchFor = ts(inMatchFor || inBrackets + 1, x);
          }
          var cmf = cp.matchFor;
          if (cmf) {
            if (cmf.charAt(0) == '"' || cmf.charAt(0) == "'") {
              cp.matchFor = cmf.slice(1, -1);
            }
          }
          currentPart.attrs.push(cp);
          cp = null;
          inBrackets = inMatchFor = -1;
        } else {
          if (cc == "\x3d") {
            var addToCc = "|~^$*".indexOf(lc) >= 0 ? lc : "";
            cp.type = addToCc + cc;
            cp.attr = ts(inBrackets + 1, x - addToCc.length);
            inMatchFor = x + 1;
          }
        }
      } else {
        if (inParens >= 0) {
          if (cc == ")") {
            if (inPseudo >= 0) {
              cp.value = ts(inParens + 1, x);
            }
            inPseudo = inParens = -1;
          }
        } else {
          if (cc == "#") {
            endAll();
            inId = x + 1;
          } else {
            if (cc == ".") {
              endAll();
              inClass = x;
            } else {
              if (cc == ":") {
                endAll();
                inPseudo = x;
              } else {
                if (cc == "[") {
                  endAll();
                  inBrackets = x;
                  cp = {};
                } else {
                  if (cc == "(") {
                    if (inPseudo >= 0) {
                      cp = {name:ts(inPseudo + 1, x), value:null};
                      currentPart.pseudos.push(cp);
                    }
                    inParens = x;
                  } else {
                    if (cc == " " && lc != cc) {
                      endPart();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return queryParts;
  };
  var agree = function(first, second) {
    if (!first) {
      return second;
    }
    if (!second) {
      return first;
    }
    return function() {
      return first.apply(window, arguments) && second.apply(window, arguments);
    };
  };
  function getArr(i, opt_arr) {
    var r = opt_arr || [];
    if (i) {
      r.push(i);
    }
    return r;
  }
  var isElement = function(n) {
    return 1 == n.nodeType;
  };
  var blank = "";
  var getAttr = function(elem, attr) {
    if (!elem) {
      return blank;
    }
    if (attr == "class") {
      return elem.className || blank;
    }
    if (attr == "for") {
      return elem.htmlFor || blank;
    }
    if (attr == "style") {
      return elem.style.cssText || blank;
    }
    return(caseSensitive ? elem.getAttribute(attr) : elem.getAttribute(attr, 2)) || blank;
  };
  var attrs = {"*\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) >= 0;
    };
  }, "^\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) == 0;
    };
  }, "$\x3d":function(attr, value) {
    var tval = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea.lastIndexOf(value) == ea.length - value.length;
    };
  }, "~\x3d":function(attr, value) {
    var tval = " " + value + " ";
    return function(elem) {
      var ea = " " + getAttr(elem, attr) + " ";
      return ea.indexOf(tval) >= 0;
    };
  }, "|\x3d":function(attr, value) {
    value = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea == value || ea.indexOf(value + "-") == 0;
    };
  }, "\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr) == value;
    };
  }};
  var noNextElementSibling = typeof goog.dom.getDocument().firstChild.nextElementSibling == "undefined";
  var nSibling = !noNextElementSibling ? "nextElementSibling" : "nextSibling";
  var pSibling = !noNextElementSibling ? "previousElementSibling" : "previousSibling";
  var simpleNodeTest = noNextElementSibling ? isElement : goog.functions.TRUE;
  var _lookLeft = function(node) {
    while (node = node[pSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var _lookRight = function(node) {
    while (node = node[nSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var getNodeIndex = function(node) {
    var root = node.parentNode;
    var i = 0, tret = root[childNodesName], ci = node["_i"] || -1, cl = root["_l"] || -1;
    if (!tret) {
      return-1;
    }
    var l = tret.length;
    if (cl == l && ci >= 0 && cl >= 0) {
      return ci;
    }
    root["_l"] = l;
    ci = -1;
    var te = root["firstElementChild"] || root["firstChild"];
    for (;te;te = te[nSibling]) {
      if (simpleNodeTest(te)) {
        te["_i"] = ++i;
        if (node === te) {
          ci = i;
        }
      }
    }
    return ci;
  };
  var isEven = function(elem) {
    return!(getNodeIndex(elem) % 2);
  };
  var isOdd = function(elem) {
    return getNodeIndex(elem) % 2;
  };
  var pseudos = {"checked":function(name, condition) {
    return function(elem) {
      return elem.checked || elem.attributes["checked"];
    };
  }, "first-child":function() {
    return _lookLeft;
  }, "last-child":function() {
    return _lookRight;
  }, "only-child":function(name, condition) {
    return function(node) {
      if (!_lookLeft(node)) {
        return false;
      }
      if (!_lookRight(node)) {
        return false;
      }
      return true;
    };
  }, "empty":function(name, condition) {
    return function(elem) {
      var cn = elem.childNodes;
      var cnl = elem.childNodes.length;
      for (var x = cnl - 1;x >= 0;x--) {
        var nt = cn[x].nodeType;
        if (nt === 1 || nt == 3) {
          return false;
        }
      }
      return true;
    };
  }, "contains":function(name, condition) {
    var cz = condition.charAt(0);
    if (cz == '"' || cz == "'") {
      condition = condition.slice(1, -1);
    }
    return function(elem) {
      return elem.innerHTML.indexOf(condition) >= 0;
    };
  }, "not":function(name, condition) {
    var p = getQueryParts(condition)[0];
    var ignores = {el:1};
    if (p.tag != "*") {
      ignores.tag = 1;
    }
    if (!p.classes.length) {
      ignores.classes = 1;
    }
    var ntf = getSimpleFilterFunc(p, ignores);
    return function(elem) {
      return!ntf(elem);
    };
  }, "nth-child":function(name, condition) {
    function pi(n) {
      return parseInt(n, 10);
    }
    if (condition == "odd") {
      return isOdd;
    } else {
      if (condition == "even") {
        return isEven;
      }
    }
    if (condition.indexOf("n") != -1) {
      var tparts = condition.split("n", 2);
      var pred = tparts[0] ? tparts[0] == "-" ? -1 : pi(tparts[0]) : 1;
      var idx = tparts[1] ? pi(tparts[1]) : 0;
      var lb = 0, ub = -1;
      if (pred > 0) {
        if (idx < 0) {
          idx = idx % pred && pred + idx % pred;
        } else {
          if (idx > 0) {
            if (idx >= pred) {
              lb = idx - idx % pred;
            }
            idx = idx % pred;
          }
        }
      } else {
        if (pred < 0) {
          pred *= -1;
          if (idx > 0) {
            ub = idx;
            idx = idx % pred;
          }
        }
      }
      if (pred > 0) {
        return function(elem) {
          var i = getNodeIndex(elem);
          return i >= lb && (ub < 0 || i <= ub) && i % pred == idx;
        };
      } else {
        condition = idx;
      }
    }
    var ncount = pi(condition);
    return function(elem) {
      return getNodeIndex(elem) == ncount;
    };
  }};
  var defaultGetter = goog.userAgent.IE ? function(cond) {
    var clc = cond.toLowerCase();
    if (clc == "class") {
      cond = "className";
    }
    return function(elem) {
      return caseSensitive ? elem.getAttribute(cond) : elem[cond] || elem[clc];
    };
  } : function(cond) {
    return function(elem) {
      return elem && elem.getAttribute && elem.hasAttribute(cond);
    };
  };
  var getSimpleFilterFunc = function(query, ignores) {
    if (!query) {
      return goog.functions.TRUE;
    }
    ignores = ignores || {};
    var ff = null;
    if (!ignores.el) {
      ff = agree(ff, isElement);
    }
    if (!ignores.tag) {
      if (query.tag != "*") {
        ff = agree(ff, function(elem) {
          return elem && elem.tagName == query.getTag();
        });
      }
    }
    if (!ignores.classes) {
      goog.array.forEach(query.classes, function(cname, idx, arr) {
        var re = new RegExp("(?:^|\\s)" + cname + "(?:\\s|$)");
        ff = agree(ff, function(elem) {
          return re.test(elem.className);
        });
        ff.count = idx;
      });
    }
    if (!ignores.pseudos) {
      goog.array.forEach(query.pseudos, function(pseudo) {
        var pn = pseudo.name;
        if (pseudos[pn]) {
          ff = agree(ff, pseudos[pn](pn, pseudo.value));
        }
      });
    }
    if (!ignores.attrs) {
      goog.array.forEach(query.attrs, function(attr) {
        var matcher;
        var a = attr.attr;
        if (attr.type && attrs[attr.type]) {
          matcher = attrs[attr.type](a, attr.matchFor);
        } else {
          if (a.length) {
            matcher = defaultGetter(a);
          }
        }
        if (matcher) {
          ff = agree(ff, matcher);
        }
      });
    }
    if (!ignores.id) {
      if (query.id) {
        ff = agree(ff, function(elem) {
          return!!elem && elem.id == query.id;
        });
      }
    }
    if (!ff) {
      if (!("default" in ignores)) {
        ff = goog.functions.TRUE;
      }
    }
    return ff;
  };
  var nextSiblingIterator = function(filterFunc) {
    return function(node, ret, bag) {
      while (node = node[nSibling]) {
        if (noNextElementSibling && !isElement(node)) {
          continue;
        }
        if ((!bag || _isUnique(node, bag)) && filterFunc(node)) {
          ret.push(node);
        }
        break;
      }
      return ret;
    };
  };
  var nextSiblingsIterator = function(filterFunc) {
    return function(root, ret, bag) {
      var te = root[nSibling];
      while (te) {
        if (simpleNodeTest(te)) {
          if (bag && !_isUnique(te, bag)) {
            break;
          }
          if (filterFunc(te)) {
            ret.push(te);
          }
        }
        te = te[nSibling];
      }
      return ret;
    };
  };
  var _childElements = function(filterFunc) {
    filterFunc = filterFunc || goog.functions.TRUE;
    return function(root, ret, bag) {
      var te, x = 0, tret = root[childNodesName];
      while (te = tret[x++]) {
        if (simpleNodeTest(te) && (!bag || _isUnique(te, bag)) && filterFunc(te, x)) {
          ret.push(te);
        }
      }
      return ret;
    };
  };
  var _isDescendant = function(node, root) {
    var pn = node.parentNode;
    while (pn) {
      if (pn == root) {
        break;
      }
      pn = pn.parentNode;
    }
    return!!pn;
  };
  var _getElementsFuncCache = {};
  var getElementsFunc = function(query) {
    var retFunc = _getElementsFuncCache[query.query];
    if (retFunc) {
      return retFunc;
    }
    var io = query.infixOper;
    var oper = io ? io.oper : "";
    var filterFunc = getSimpleFilterFunc(query, {el:1});
    var qt = query.tag;
    var wildcardTag = "*" == qt;
    var ecs = goog.dom.getDocument()["getElementsByClassName"];
    if (!oper) {
      if (query.id) {
        filterFunc = !query.loops && wildcardTag ? goog.functions.TRUE : getSimpleFilterFunc(query, {el:1, id:1});
        retFunc = function(root, arr) {
          var te = goog.dom.getDomHelper(root).getElement(query.id);
          if (!te || !filterFunc(te)) {
            return;
          }
          if (9 == root.nodeType) {
            return getArr(te, arr);
          } else {
            if (_isDescendant(te, root)) {
              return getArr(te, arr);
            }
          }
        };
      } else {
        if (ecs && /\{\s*\[native code\]\s*\}/.test(String(ecs)) && query.classes.length && !cssCaseBug) {
          filterFunc = getSimpleFilterFunc(query, {el:1, classes:1, id:1});
          var classesString = query.classes.join(" ");
          retFunc = function(root, arr) {
            var ret = getArr(0, arr), te, x = 0;
            var tret = root.getElementsByClassName(classesString);
            while (te = tret[x++]) {
              if (filterFunc(te, root)) {
                ret.push(te);
              }
            }
            return ret;
          };
        } else {
          if (!wildcardTag && !query.loops) {
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                ret.push(te);
              }
              return ret;
            };
          } else {
            filterFunc = getSimpleFilterFunc(query, {el:1, tag:1, id:1});
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                if (filterFunc(te, root)) {
                  ret.push(te);
                }
              }
              return ret;
            };
          }
        }
      }
    } else {
      var skipFilters = {el:1};
      if (wildcardTag) {
        skipFilters.tag = 1;
      }
      filterFunc = getSimpleFilterFunc(query, skipFilters);
      if ("+" == oper) {
        retFunc = nextSiblingIterator(filterFunc);
      } else {
        if ("~" == oper) {
          retFunc = nextSiblingsIterator(filterFunc);
        } else {
          if ("\x3e" == oper) {
            retFunc = _childElements(filterFunc);
          }
        }
      }
    }
    return _getElementsFuncCache[query.query] = retFunc;
  };
  var filterDown = function(root, queryParts) {
    var candidates = getArr(root), qp, x, te, qpl = queryParts.length, bag, ret;
    for (var i = 0;i < qpl;i++) {
      ret = [];
      qp = queryParts[i];
      x = candidates.length - 1;
      if (x > 0) {
        bag = {};
        ret.nozip = true;
      }
      var gef = getElementsFunc(qp);
      for (var j = 0;te = candidates[j];j++) {
        gef(te, ret, bag);
      }
      if (!ret.length) {
        break;
      }
      candidates = ret;
    }
    return ret;
  };
  var _queryFuncCacheDOM = {}, _queryFuncCacheQSA = {};
  var getStepQueryFunc = function(query) {
    var qparts = getQueryParts(goog.string.trim(query));
    if (qparts.length == 1) {
      var tef = getElementsFunc(qparts[0]);
      return function(root) {
        var r = tef(root, []);
        if (r) {
          r.nozip = true;
        }
        return r;
      };
    }
    return function(root) {
      return filterDown(root, qparts);
    };
  };
  var qsa = "querySelectorAll";
  var qsaAvail = !!goog.dom.getDocument()[qsa] && (!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("526"));
  var getQueryFunc = function(query, opt_forceDOM) {
    if (qsaAvail) {
      var qsaCached = _queryFuncCacheQSA[query];
      if (qsaCached && !opt_forceDOM) {
        return qsaCached;
      }
    }
    var domCached = _queryFuncCacheDOM[query];
    if (domCached) {
      return domCached;
    }
    var qcz = query.charAt(0);
    var nospace = -1 == query.indexOf(" ");
    if (query.indexOf("#") >= 0 && nospace) {
      opt_forceDOM = true;
    }
    var useQSA = qsaAvail && !opt_forceDOM && specials.indexOf(qcz) == -1 && (!goog.userAgent.IE || query.indexOf(":") == -1) && !(cssCaseBug && query.indexOf(".") >= 0) && query.indexOf(":contains") == -1 && query.indexOf("|\x3d") == -1;
    if (useQSA) {
      var tq = specials.indexOf(query.charAt(query.length - 1)) >= 0 ? query + " *" : query;
      return _queryFuncCacheQSA[query] = function(root) {
        try {
          if (!(9 == root.nodeType || nospace)) {
            throw "";
          }
          var r = root[qsa](tq);
          if (goog.userAgent.IE) {
            r.commentStrip = true;
          } else {
            r.nozip = true;
          }
          return r;
        } catch (e) {
          return getQueryFunc(query, true)(root);
        }
      };
    } else {
      var parts = query.split(/\s*,\s*/);
      return _queryFuncCacheDOM[query] = parts.length < 2 ? getStepQueryFunc(query) : function(root) {
        var pindex = 0, ret = [], tp;
        while (tp = parts[pindex++]) {
          ret = ret.concat(getStepQueryFunc(tp)(root));
        }
        return ret;
      };
    }
  };
  var _zipIdx = 0;
  var _nodeUID = goog.userAgent.IE ? function(node) {
    if (caseSensitive) {
      return node.getAttribute("_uid") || node.setAttribute("_uid", ++_zipIdx) || _zipIdx;
    } else {
      return node.uniqueID;
    }
  } : function(node) {
    return node["_uid"] || (node["_uid"] = ++_zipIdx);
  };
  var _isUnique = function(node, bag) {
    if (!bag) {
      return 1;
    }
    var id = _nodeUID(node);
    if (!bag[id]) {
      return bag[id] = 1;
    }
    return 0;
  };
  var _zipIdxName = "_zipIdx";
  var _zip = function(arr) {
    if (arr && arr.nozip) {
      return arr;
    }
    var ret = [];
    if (!arr || !arr.length) {
      return ret;
    }
    if (arr[0]) {
      ret.push(arr[0]);
    }
    if (arr.length < 2) {
      return ret;
    }
    _zipIdx++;
    if (goog.userAgent.IE && caseSensitive) {
      var szidx = _zipIdx + "";
      arr[0].setAttribute(_zipIdxName, szidx);
      for (var x = 1, te;te = arr[x];x++) {
        if (arr[x].getAttribute(_zipIdxName) != szidx) {
          ret.push(te);
        }
        te.setAttribute(_zipIdxName, szidx);
      }
    } else {
      if (goog.userAgent.IE && arr.commentStrip) {
        try {
          for (var x = 1, te;te = arr[x];x++) {
            if (isElement(te)) {
              ret.push(te);
            }
          }
        } catch (e) {
        }
      } else {
        if (arr[0]) {
          arr[0][_zipIdxName] = _zipIdx;
        }
        for (var x = 1, te;te = arr[x];x++) {
          if (arr[x][_zipIdxName] != _zipIdx) {
            ret.push(te);
          }
          te[_zipIdxName] = _zipIdx;
        }
      }
    }
    return ret;
  };
  var query = function(query, root) {
    if (!query) {
      return[];
    }
    if (query.constructor == Array) {
      return(query);
    }
    if (!goog.isString(query)) {
      return[query];
    }
    if (goog.isString(root)) {
      root = goog.dom.getElement(root);
      if (!root) {
        return[];
      }
    }
    root = root || goog.dom.getDocument();
    var od = root.ownerDocument || root.documentElement;
    caseSensitive = root.contentType && root.contentType == "application/xml" || goog.userAgent.OPERA && (root.doctype || od.toString() == "[object XMLDocument]") || !!od && (goog.userAgent.IE ? od.xml : root.xmlVersion || od.xmlVersion);
    var r = getQueryFunc(query)(root);
    if (r && r.nozip) {
      return r;
    }
    return _zip(r);
  };
  query.pseudos = pseudos;
  return query;
}();
goog.exportSymbol("goog.dom.query", goog.dom.query);
goog.exportSymbol("goog.dom.query.pseudos", goog.dom.query.pseudos);
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.log");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6, DIRECT:7};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport", 7:"DirectTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion", DIRECT_TRANSPORT_SYNC_MODE:"directSyncMode"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.log.getLogger("goog.net.xpc");
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc.TransportNames");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[this.transportType] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframePollingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return!this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.log.fine(goog.net.xpc.logger, "error retrieving peer frames");
  }
  return{};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.log.fine(goog.net.xpc.logger, "transport connect called");
  if (!this.initialized_) {
    goog.log.fine(goog.net.xpc.logger, "initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "constructing sender frame: " + id);
  var ifr = goog.dom.createElement("iframe");
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "Inner peer reconnect triggered.");
  this.channel_.updateChannelNameAndCatalog(goog.net.xpc.getRandomString(10));
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect") {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.log.fine(goog.net.xpc.logger, "foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.log.fine(goog.net.xpc.logger, "local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.log.fine(goog.net.xpc.logger, "local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.log.fine(goog.net.xpc.logger, "SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.log.fine(goog.net.xpc.logger, "delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.log.warning(goog.net.xpc.logger, "got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.log.warning(goog.net.xpc.logger, "got ack with wrong sequence");
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframePollingTransport.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.log.info(goog.net.xpc.logger, "receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.log.fine(goog.net.xpc.logger, "starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  this.sendUri_ = url;
  this.sendFrame_ = windowObj;
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.color.names");
goog.color.names = {"aliceblue":"#f0f8ff", "antiquewhite":"#faebd7", "aqua":"#00ffff", "aquamarine":"#7fffd4", "azure":"#f0ffff", "beige":"#f5f5dc", "bisque":"#ffe4c4", "black":"#000000", "blanchedalmond":"#ffebcd", "blue":"#0000ff", "blueviolet":"#8a2be2", "brown":"#a52a2a", "burlywood":"#deb887", "cadetblue":"#5f9ea0", "chartreuse":"#7fff00", "chocolate":"#d2691e", "coral":"#ff7f50", "cornflowerblue":"#6495ed", "cornsilk":"#fff8dc", "crimson":"#dc143c", "cyan":"#00ffff", "darkblue":"#00008b", "darkcyan":"#008b8b", 
"darkgoldenrod":"#b8860b", "darkgray":"#a9a9a9", "darkgreen":"#006400", "darkgrey":"#a9a9a9", "darkkhaki":"#bdb76b", "darkmagenta":"#8b008b", "darkolivegreen":"#556b2f", "darkorange":"#ff8c00", "darkorchid":"#9932cc", "darkred":"#8b0000", "darksalmon":"#e9967a", "darkseagreen":"#8fbc8f", "darkslateblue":"#483d8b", "darkslategray":"#2f4f4f", "darkslategrey":"#2f4f4f", "darkturquoise":"#00ced1", "darkviolet":"#9400d3", "deeppink":"#ff1493", "deepskyblue":"#00bfff", "dimgray":"#696969", "dimgrey":"#696969", 
"dodgerblue":"#1e90ff", "firebrick":"#b22222", "floralwhite":"#fffaf0", "forestgreen":"#228b22", "fuchsia":"#ff00ff", "gainsboro":"#dcdcdc", "ghostwhite":"#f8f8ff", "gold":"#ffd700", "goldenrod":"#daa520", "gray":"#808080", "green":"#008000", "greenyellow":"#adff2f", "grey":"#808080", "honeydew":"#f0fff0", "hotpink":"#ff69b4", "indianred":"#cd5c5c", "indigo":"#4b0082", "ivory":"#fffff0", "khaki":"#f0e68c", "lavender":"#e6e6fa", "lavenderblush":"#fff0f5", "lawngreen":"#7cfc00", "lemonchiffon":"#fffacd", 
"lightblue":"#add8e6", "lightcoral":"#f08080", "lightcyan":"#e0ffff", "lightgoldenrodyellow":"#fafad2", "lightgray":"#d3d3d3", "lightgreen":"#90ee90", "lightgrey":"#d3d3d3", "lightpink":"#ffb6c1", "lightsalmon":"#ffa07a", "lightseagreen":"#20b2aa", "lightskyblue":"#87cefa", "lightslategray":"#778899", "lightslategrey":"#778899", "lightsteelblue":"#b0c4de", "lightyellow":"#ffffe0", "lime":"#00ff00", "limegreen":"#32cd32", "linen":"#faf0e6", "magenta":"#ff00ff", "maroon":"#800000", "mediumaquamarine":"#66cdaa", 
"mediumblue":"#0000cd", "mediumorchid":"#ba55d3", "mediumpurple":"#9370db", "mediumseagreen":"#3cb371", "mediumslateblue":"#7b68ee", "mediumspringgreen":"#00fa9a", "mediumturquoise":"#48d1cc", "mediumvioletred":"#c71585", "midnightblue":"#191970", "mintcream":"#f5fffa", "mistyrose":"#ffe4e1", "moccasin":"#ffe4b5", "navajowhite":"#ffdead", "navy":"#000080", "oldlace":"#fdf5e6", "olive":"#808000", "olivedrab":"#6b8e23", "orange":"#ffa500", "orangered":"#ff4500", "orchid":"#da70d6", "palegoldenrod":"#eee8aa", 
"palegreen":"#98fb98", "paleturquoise":"#afeeee", "palevioletred":"#db7093", "papayawhip":"#ffefd5", "peachpuff":"#ffdab9", "peru":"#cd853f", "pink":"#ffc0cb", "plum":"#dda0dd", "powderblue":"#b0e0e6", "purple":"#800080", "red":"#ff0000", "rosybrown":"#bc8f8f", "royalblue":"#4169e1", "saddlebrown":"#8b4513", "salmon":"#fa8072", "sandybrown":"#f4a460", "seagreen":"#2e8b57", "seashell":"#fff5ee", "sienna":"#a0522d", "silver":"#c0c0c0", "skyblue":"#87ceeb", "slateblue":"#6a5acd", "slategray":"#708090", 
"slategrey":"#708090", "snow":"#fffafa", "springgreen":"#00ff7f", "steelblue":"#4682b4", "tan":"#d2b48c", "teal":"#008080", "thistle":"#d8bfd8", "tomato":"#ff6347", "turquoise":"#40e0d0", "violet":"#ee82ee", "wheat":"#f5deb3", "white":"#ffffff", "whitesmoke":"#f5f5f5", "yellow":"#ffff00", "yellowgreen":"#9acd32"};
goog.provide("goog.color");
goog.provide("goog.color.Hsl");
goog.provide("goog.color.Hsv");
goog.provide("goog.color.Rgb");
goog.require("goog.color.names");
goog.require("goog.math");
goog.color.Rgb;
goog.color.Hsv;
goog.color.Hsl;
goog.color.parse = function(str) {
  var result = {};
  str = String(str);
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  if (goog.color.isValidHexColor_(maybeHex)) {
    result.hex = goog.color.normalizeHex(maybeHex);
    result.type = "hex";
    return result;
  } else {
    var rgb = goog.color.isValidRgbColor_(str);
    if (rgb.length) {
      result.hex = goog.color.rgbArrayToHex(rgb);
      result.type = "rgb";
      return result;
    } else {
      if (goog.color.names) {
        var hex = goog.color.names[str.toLowerCase()];
        if (hex) {
          result.hex = hex;
          result.type = "named";
          return result;
        }
      }
    }
  }
  throw Error(str + " is not a valid color string");
};
goog.color.isValidColor = function(str) {
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  return!!(goog.color.isValidHexColor_(maybeHex) || goog.color.isValidRgbColor_(str).length || goog.color.names && goog.color.names[str.toLowerCase()]);
};
goog.color.parseRgb = function(str) {
  var rgb = goog.color.isValidRgbColor_(str);
  if (!rgb.length) {
    throw Error(str + " is not a valid RGB color");
  }
  return rgb;
};
goog.color.hexToRgbStyle = function(hexColor) {
  return goog.color.rgbStyle_(goog.color.hexToRgb(hexColor));
};
goog.color.hexTripletRe_ = /#(.)(.)(.)/;
goog.color.normalizeHex = function(hexColor) {
  if (!goog.color.isValidHexColor_(hexColor)) {
    throw Error("'" + hexColor + "' is not a valid hex color");
  }
  if (hexColor.length == 4) {
    hexColor = hexColor.replace(goog.color.hexTripletRe_, "#$1$1$2$2$3$3");
  }
  return hexColor.toLowerCase();
};
goog.color.hexToRgb = function(hexColor) {
  hexColor = goog.color.normalizeHex(hexColor);
  var r = parseInt(hexColor.substr(1, 2), 16);
  var g = parseInt(hexColor.substr(3, 2), 16);
  var b = parseInt(hexColor.substr(5, 2), 16);
  return[r, g, b];
};
goog.color.rgbToHex = function(r, g, b) {
  r = Number(r);
  g = Number(g);
  b = Number(b);
  if (isNaN(r) || r < 0 || r > 255 || isNaN(g) || g < 0 || g > 255 || isNaN(b) || b < 0 || b > 255) {
    throw Error('"(' + r + "," + g + "," + b + '") is not a valid RGB color');
  }
  var hexR = goog.color.prependZeroIfNecessaryHelper(r.toString(16));
  var hexG = goog.color.prependZeroIfNecessaryHelper(g.toString(16));
  var hexB = goog.color.prependZeroIfNecessaryHelper(b.toString(16));
  return "#" + hexR + hexG + hexB;
};
goog.color.rgbArrayToHex = function(rgb) {
  return goog.color.rgbToHex(rgb[0], rgb[1], rgb[2]);
};
goog.color.rgbToHsl = function(r, g, b) {
  var normR = r / 255;
  var normG = g / 255;
  var normB = b / 255;
  var max = Math.max(normR, normG, normB);
  var min = Math.min(normR, normG, normB);
  var h = 0;
  var s = 0;
  var l = .5 * (max + min);
  if (max != min) {
    if (max == normR) {
      h = 60 * (normG - normB) / (max - min);
    } else {
      if (max == normG) {
        h = 60 * (normB - normR) / (max - min) + 120;
      } else {
        if (max == normB) {
          h = 60 * (normR - normG) / (max - min) + 240;
        }
      }
    }
    if (0 < l && l <= .5) {
      s = (max - min) / (2 * l);
    } else {
      s = (max - min) / (2 - 2 * l);
    }
  }
  return[Math.round(h + 360) % 360, s, l];
};
goog.color.rgbArrayToHsl = function(rgb) {
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hueToRgb_ = function(v1, v2, vH) {
  if (vH < 0) {
    vH += 1;
  } else {
    if (vH > 1) {
      vH -= 1;
    }
  }
  if (6 * vH < 1) {
    return v1 + (v2 - v1) * 6 * vH;
  } else {
    if (2 * vH < 1) {
      return v2;
    } else {
      if (3 * vH < 2) {
        return v1 + (v2 - v1) * (2 / 3 - vH) * 6;
      }
    }
  }
  return v1;
};
goog.color.hslToRgb = function(h, s, l) {
  var r = 0;
  var g = 0;
  var b = 0;
  var normH = h / 360;
  if (s == 0) {
    r = g = b = l * 255;
  } else {
    var temp1 = 0;
    var temp2 = 0;
    if (l < .5) {
      temp2 = l * (1 + s);
    } else {
      temp2 = l + s - s * l;
    }
    temp1 = 2 * l - temp2;
    r = 255 * goog.color.hueToRgb_(temp1, temp2, normH + 1 / 3);
    g = 255 * goog.color.hueToRgb_(temp1, temp2, normH);
    b = 255 * goog.color.hueToRgb_(temp1, temp2, normH - 1 / 3);
  }
  return[Math.round(r), Math.round(g), Math.round(b)];
};
goog.color.hslArrayToRgb = function(hsl) {
  return goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]);
};
goog.color.validHexColorRe_ = /^#(?:[0-9a-f]{3}){1,2}$/i;
goog.color.isValidHexColor_ = function(str) {
  return goog.color.validHexColorRe_.test(str);
};
goog.color.normalizedHexColorRe_ = /^#[0-9a-f]{6}$/;
goog.color.isNormalizedHexColor_ = function(str) {
  return goog.color.normalizedHexColorRe_.test(str);
};
goog.color.rgbColorRe_ = /^(?:rgb)?\((0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2})\)$/i;
goog.color.isValidRgbColor_ = function(str) {
  var regExpResultArray = str.match(goog.color.rgbColorRe_);
  if (regExpResultArray) {
    var r = Number(regExpResultArray[1]);
    var g = Number(regExpResultArray[2]);
    var b = Number(regExpResultArray[3]);
    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
      return[r, g, b];
    }
  }
  return[];
};
goog.color.prependZeroIfNecessaryHelper = function(hex) {
  return hex.length == 1 ? "0" + hex : hex;
};
goog.color.prependHashIfNecessaryHelper = function(str) {
  return str.charAt(0) == "#" ? str : "#" + str;
};
goog.color.rgbStyle_ = function(rgb) {
  return "rgb(" + rgb.join(",") + ")";
};
goog.color.hsvToRgb = function(h, s, brightness) {
  var red = 0;
  var green = 0;
  var blue = 0;
  if (s == 0) {
    red = brightness;
    green = brightness;
    blue = brightness;
  } else {
    var sextant = Math.floor(h / 60);
    var remainder = h / 60 - sextant;
    var val1 = brightness * (1 - s);
    var val2 = brightness * (1 - s * remainder);
    var val3 = brightness * (1 - s * (1 - remainder));
    switch(sextant) {
      case 1:
        red = val2;
        green = brightness;
        blue = val1;
        break;
      case 2:
        red = val1;
        green = brightness;
        blue = val3;
        break;
      case 3:
        red = val1;
        green = val2;
        blue = brightness;
        break;
      case 4:
        red = val3;
        green = val1;
        blue = brightness;
        break;
      case 5:
        red = brightness;
        green = val1;
        blue = val2;
        break;
      case 6:
      ;
      case 0:
        red = brightness;
        green = val3;
        blue = val1;
        break;
    }
  }
  return[Math.floor(red), Math.floor(green), Math.floor(blue)];
};
goog.color.rgbToHsv = function(red, green, blue) {
  var max = Math.max(Math.max(red, green), blue);
  var min = Math.min(Math.min(red, green), blue);
  var hue;
  var saturation;
  var value = max;
  if (min == max) {
    hue = 0;
    saturation = 0;
  } else {
    var delta = max - min;
    saturation = delta / max;
    if (red == max) {
      hue = (green - blue) / delta;
    } else {
      if (green == max) {
        hue = 2 + (blue - red) / delta;
      } else {
        hue = 4 + (red - green) / delta;
      }
    }
    hue *= 60;
    if (hue < 0) {
      hue += 360;
    }
    if (hue > 360) {
      hue -= 360;
    }
  }
  return[hue, saturation, value];
};
goog.color.rgbArrayToHsv = function(rgb) {
  return goog.color.rgbToHsv(rgb[0], rgb[1], rgb[2]);
};
goog.color.hsvArrayToRgb = function(hsv) {
  return goog.color.hsvToRgb(hsv[0], hsv[1], hsv[2]);
};
goog.color.hexToHsl = function(hex) {
  var rgb = goog.color.hexToRgb(hex);
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hslToHex = function(h, s, l) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(h, s, l));
};
goog.color.hslArrayToHex = function(hsl) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]));
};
goog.color.hexToHsv = function(hex) {
  return goog.color.rgbArrayToHsv(goog.color.hexToRgb(hex));
};
goog.color.hsvToHex = function(h, s, v) {
  return goog.color.rgbArrayToHex(goog.color.hsvToRgb(h, s, v));
};
goog.color.hsvArrayToHex = function(hsv) {
  return goog.color.hsvToHex(hsv[0], hsv[1], hsv[2]);
};
goog.color.hslDistance = function(hsl1, hsl2) {
  var sl1, sl2;
  if (hsl1[2] <= .5) {
    sl1 = hsl1[1] * hsl1[2];
  } else {
    sl1 = hsl1[1] * (1 - hsl1[2]);
  }
  if (hsl2[2] <= .5) {
    sl2 = hsl2[1] * hsl2[2];
  } else {
    sl2 = hsl2[1] * (1 - hsl2[2]);
  }
  var h1 = hsl1[0] / 360;
  var h2 = hsl2[0] / 360;
  var dh = (h1 - h2) * 2 * Math.PI;
  return(hsl1[2] - hsl2[2]) * (hsl1[2] - hsl2[2]) + sl1 * sl1 + sl2 * sl2 - 2 * sl1 * sl2 * Math.cos(dh);
};
goog.color.blend = function(rgb1, rgb2, factor) {
  factor = goog.math.clamp(factor, 0, 1);
  return[Math.round(factor * rgb1[0] + (1 - factor) * rgb2[0]), Math.round(factor * rgb1[1] + (1 - factor) * rgb2[1]), Math.round(factor * rgb1[2] + (1 - factor) * rgb2[2])];
};
goog.color.darken = function(rgb, factor) {
  var black = [0, 0, 0];
  return goog.color.blend(black, rgb, factor);
};
goog.color.lighten = function(rgb, factor) {
  var white = [255, 255, 255];
  return goog.color.blend(white, rgb, factor);
};
goog.color.highContrast = function(prime, suggestions) {
  var suggestionsWithDiff = [];
  for (var i = 0;i < suggestions.length;i++) {
    suggestionsWithDiff.push({color:suggestions[i], diff:goog.color.yiqBrightnessDiff_(suggestions[i], prime) + goog.color.colorDiff_(suggestions[i], prime)});
  }
  suggestionsWithDiff.sort(function(a, b) {
    return b.diff - a.diff;
  });
  return suggestionsWithDiff[0].color;
};
goog.color.yiqBrightness_ = function(rgb) {
  return Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1E3);
};
goog.color.yiqBrightnessDiff_ = function(rgb1, rgb2) {
  return Math.abs(goog.color.yiqBrightness_(rgb1) - goog.color.yiqBrightness_(rgb2));
};
goog.color.colorDiff_ = function(rgb1, rgb2) {
  return Math.abs(rgb1[0] - rgb2[0]) + Math.abs(rgb1[1] - rgb2[1]) + Math.abs(rgb1[2] - rgb2[2]);
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.fx.Transition");
goog.provide("goog.fx.Transition.EventType");
goog.fx.Transition = function() {
};
goog.fx.Transition.EventType = {PLAY:"play", BEGIN:"begin", RESUME:"resume", END:"end", STOP:"stop", FINISH:"finish", PAUSE:"pause"};
goog.fx.Transition.prototype.play;
goog.fx.Transition.prototype.stop;
goog.provide("goog.fx.TransitionBase");
goog.provide("goog.fx.TransitionBase.State");
goog.require("goog.events.EventTarget");
goog.require("goog.fx.Transition");
goog.require("goog.fx.Transition.EventType");
goog.fx.TransitionBase = function() {
  goog.fx.TransitionBase.base(this, "constructor");
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
  this.startTime = null;
  this.endTime = null;
};
goog.inherits(goog.fx.TransitionBase, goog.events.EventTarget);
goog.fx.TransitionBase.State = {STOPPED:0, PAUSED:-1, PLAYING:1};
goog.fx.TransitionBase.prototype.play = goog.abstractMethod;
goog.fx.TransitionBase.prototype.stop = goog.abstractMethod;
goog.fx.TransitionBase.prototype.pause = goog.abstractMethod;
goog.fx.TransitionBase.prototype.getStateInternal = function() {
  return this.state_;
};
goog.fx.TransitionBase.prototype.setStatePlaying = function() {
  this.state_ = goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.setStatePaused = function() {
  this.state_ = goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.setStateStopped = function() {
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.isPlaying = function() {
  return this.state_ == goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.isPaused = function() {
  return this.state_ == goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.isStopped = function() {
  return this.state_ == goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.onBegin = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.BEGIN);
};
goog.fx.TransitionBase.prototype.onEnd = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.END);
};
goog.fx.TransitionBase.prototype.onFinish = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.FINISH);
};
goog.fx.TransitionBase.prototype.onPause = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PAUSE);
};
goog.fx.TransitionBase.prototype.onPlay = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PLAY);
};
goog.fx.TransitionBase.prototype.onResume = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.RESUME);
};
goog.fx.TransitionBase.prototype.onStop = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.STOP);
};
goog.fx.TransitionBase.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(type);
};
goog.provide("goog.async.AnimationDelay");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.functions");
goog.async.AnimationDelay = function(listener, opt_window, opt_handler) {
  goog.async.AnimationDelay.base(this, "constructor");
  this.listener_ = listener;
  this.handler_ = opt_handler;
  this.win_ = opt_window || window;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.AnimationDelay, goog.Disposable);
goog.async.AnimationDelay.prototype.id_ = null;
goog.async.AnimationDelay.prototype.usingListeners_ = false;
goog.async.AnimationDelay.TIMEOUT = 20;
goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_ = "MozBeforePaint";
goog.async.AnimationDelay.prototype.start = function() {
  this.stop();
  this.usingListeners_ = false;
  var raf = this.getRaf_();
  var cancelRaf = this.getCancelRaf_();
  if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
    this.id_ = goog.events.listen(this.win_, goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_, this.callback_);
    this.win_.mozRequestAnimationFrame(null);
    this.usingListeners_ = true;
  } else {
    if (raf && cancelRaf) {
      this.id_ = raf.call(this.win_, this.callback_);
    } else {
      this.id_ = this.win_.setTimeout(goog.functions.lock(this.callback_), goog.async.AnimationDelay.TIMEOUT);
    }
  }
};
goog.async.AnimationDelay.prototype.stop = function() {
  if (this.isActive()) {
    var raf = this.getRaf_();
    var cancelRaf = this.getCancelRaf_();
    if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
      goog.events.unlistenByKey(this.id_);
    } else {
      if (raf && cancelRaf) {
        cancelRaf.call(this.win_, (this.id_));
      } else {
        this.win_.clearTimeout((this.id_));
      }
    }
  }
  this.id_ = null;
};
goog.async.AnimationDelay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.AnimationDelay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.AnimationDelay.prototype.isActive = function() {
  return this.id_ != null;
};
goog.async.AnimationDelay.prototype.doAction_ = function() {
  if (this.usingListeners_ && this.id_) {
    goog.events.unlistenByKey(this.id_);
  }
  this.id_ = null;
  this.listener_.call(this.handler_, goog.now());
};
goog.async.AnimationDelay.prototype.disposeInternal = function() {
  this.stop();
  goog.async.AnimationDelay.base(this, "disposeInternal");
};
goog.async.AnimationDelay.prototype.getRaf_ = function() {
  var win = this.win_;
  return win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || null;
};
goog.async.AnimationDelay.prototype.getCancelRaf_ = function() {
  var win = this.win_;
  return win.cancelRequestAnimationFrame || win.webkitCancelRequestAnimationFrame || win.mozCancelRequestAnimationFrame || win.oCancelRequestAnimationFrame || win.msCancelRequestAnimationFrame || null;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.fx.anim");
goog.provide("goog.fx.anim.Animated");
goog.require("goog.async.AnimationDelay");
goog.require("goog.async.Delay");
goog.require("goog.object");
goog.fx.anim.Animated = function() {
};
goog.fx.anim.Animated.prototype.onAnimationFrame;
goog.fx.anim.TIMEOUT = goog.async.AnimationDelay.TIMEOUT;
goog.fx.anim.activeAnimations_ = {};
goog.fx.anim.animationWindow_ = null;
goog.fx.anim.animationDelay_ = null;
goog.fx.anim.registerAnimation = function(animation) {
  var uid = goog.getUid(animation);
  if (!(uid in goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.activeAnimations_[uid] = animation;
  }
  goog.fx.anim.requestAnimationFrame_();
};
goog.fx.anim.unregisterAnimation = function(animation) {
  var uid = goog.getUid(animation);
  delete goog.fx.anim.activeAnimations_[uid];
  if (goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.cancelAnimationFrame_();
  }
};
goog.fx.anim.tearDown = function() {
  goog.fx.anim.animationWindow_ = null;
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.activeAnimations_ = {};
};
goog.fx.anim.setAnimationWindow = function(animationWindow) {
  var hasTimer = goog.fx.anim.animationDelay_ && goog.fx.anim.animationDelay_.isActive();
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.animationWindow_ = animationWindow;
  if (hasTimer) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.fx.anim.requestAnimationFrame_ = function() {
  if (!goog.fx.anim.animationDelay_) {
    if (goog.fx.anim.animationWindow_) {
      goog.fx.anim.animationDelay_ = new goog.async.AnimationDelay(function(now) {
        goog.fx.anim.cycleAnimations_(now);
      }, goog.fx.anim.animationWindow_);
    } else {
      goog.fx.anim.animationDelay_ = new goog.async.Delay(function() {
        goog.fx.anim.cycleAnimations_(goog.now());
      }, goog.fx.anim.TIMEOUT);
    }
  }
  var delay = goog.fx.anim.animationDelay_;
  if (!delay.isActive()) {
    delay.start();
  }
};
goog.fx.anim.cancelAnimationFrame_ = function() {
  if (goog.fx.anim.animationDelay_) {
    goog.fx.anim.animationDelay_.stop();
  }
};
goog.fx.anim.cycleAnimations_ = function(now) {
  goog.object.forEach(goog.fx.anim.activeAnimations_, function(anim) {
    anim.onAnimationFrame(now);
  });
  if (!goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.provide("goog.fx.Animation");
goog.provide("goog.fx.Animation.EventType");
goog.provide("goog.fx.Animation.State");
goog.provide("goog.fx.AnimationEvent");
goog.require("goog.array");
goog.require("goog.events.Event");
goog.require("goog.fx.Transition");
goog.require("goog.fx.Transition.EventType");
goog.require("goog.fx.TransitionBase.State");
goog.require("goog.fx.anim");
goog.require("goog.fx.anim.Animated");
goog.fx.Animation = function(start, end, duration, opt_acc) {
  goog.fx.Animation.base(this, "constructor");
  if (!goog.isArray(start) || !goog.isArray(end)) {
    throw Error("Start and end parameters must be arrays");
  }
  if (start.length != end.length) {
    throw Error("Start and end points must be the same length");
  }
  this.startPoint = start;
  this.endPoint = end;
  this.duration = duration;
  this.accel_ = opt_acc;
  this.coords = [];
  this.useRightPositioningForRtl_ = false;
};
goog.inherits(goog.fx.Animation, goog.fx.TransitionBase);
goog.fx.Animation.prototype.enableRightPositioningForRtl = function(useRightPositioningForRtl) {
  this.useRightPositioningForRtl_ = useRightPositioningForRtl;
};
goog.fx.Animation.prototype.isRightPositioningForRtlEnabled = function() {
  return this.useRightPositioningForRtl_;
};
goog.fx.Animation.EventType = {PLAY:goog.fx.Transition.EventType.PLAY, BEGIN:goog.fx.Transition.EventType.BEGIN, RESUME:goog.fx.Transition.EventType.RESUME, END:goog.fx.Transition.EventType.END, STOP:goog.fx.Transition.EventType.STOP, FINISH:goog.fx.Transition.EventType.FINISH, PAUSE:goog.fx.Transition.EventType.PAUSE, ANIMATE:"animate", DESTROY:"destroy"};
goog.fx.Animation.TIMEOUT = goog.fx.anim.TIMEOUT;
goog.fx.Animation.State = goog.fx.TransitionBase.State;
goog.fx.Animation.setAnimationWindow = function(animationWindow) {
  goog.fx.anim.setAnimationWindow(animationWindow);
};
goog.fx.Animation.prototype.fps_ = 0;
goog.fx.Animation.prototype.progress = 0;
goog.fx.Animation.prototype.lastFrame = null;
goog.fx.Animation.prototype.play = function(opt_restart) {
  if (opt_restart || this.isStopped()) {
    this.progress = 0;
    this.coords = this.startPoint;
  } else {
    if (this.isPlaying()) {
      return false;
    }
  }
  goog.fx.anim.unregisterAnimation(this);
  var now = (goog.now());
  this.startTime = now;
  if (this.isPaused()) {
    this.startTime -= this.duration * this.progress;
  }
  this.endTime = this.startTime + this.duration;
  this.lastFrame = this.startTime;
  if (!this.progress) {
    this.onBegin();
  }
  this.onPlay();
  if (this.isPaused()) {
    this.onResume();
  }
  this.setStatePlaying();
  goog.fx.anim.registerAnimation(this);
  this.cycle(now);
  return true;
};
goog.fx.Animation.prototype.stop = function(opt_gotoEnd) {
  goog.fx.anim.unregisterAnimation(this);
  this.setStateStopped();
  if (!!opt_gotoEnd) {
    this.progress = 1;
  }
  this.updateCoords_(this.progress);
  this.onStop();
  this.onEnd();
};
goog.fx.Animation.prototype.pause = function() {
  if (this.isPlaying()) {
    goog.fx.anim.unregisterAnimation(this);
    this.setStatePaused();
    this.onPause();
  }
};
goog.fx.Animation.prototype.getProgress = function() {
  return this.progress;
};
goog.fx.Animation.prototype.setProgress = function(progress) {
  this.progress = progress;
  if (this.isPlaying()) {
    var now = goog.now();
    this.startTime = now - this.duration * this.progress;
    this.endTime = this.startTime + this.duration;
  }
};
goog.fx.Animation.prototype.disposeInternal = function() {
  if (!this.isStopped()) {
    this.stop(false);
  }
  this.onDestroy();
  goog.fx.Animation.base(this, "disposeInternal");
};
goog.fx.Animation.prototype.destroy = function() {
  this.dispose();
};
goog.fx.Animation.prototype.onAnimationFrame = function(now) {
  this.cycle(now);
};
goog.fx.Animation.prototype.cycle = function(now) {
  this.progress = (now - this.startTime) / (this.endTime - this.startTime);
  if (this.progress >= 1) {
    this.progress = 1;
  }
  this.fps_ = 1E3 / (now - this.lastFrame);
  this.lastFrame = now;
  this.updateCoords_(this.progress);
  if (this.progress == 1) {
    this.setStateStopped();
    goog.fx.anim.unregisterAnimation(this);
    this.onFinish();
    this.onEnd();
  } else {
    if (this.isPlaying()) {
      this.onAnimate();
    }
  }
};
goog.fx.Animation.prototype.updateCoords_ = function(t) {
  if (goog.isFunction(this.accel_)) {
    t = this.accel_(t);
  }
  this.coords = new Array(this.startPoint.length);
  for (var i = 0;i < this.startPoint.length;i++) {
    this.coords[i] = (this.endPoint[i] - this.startPoint[i]) * t + this.startPoint[i];
  }
};
goog.fx.Animation.prototype.onAnimate = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.ANIMATE);
};
goog.fx.Animation.prototype.onDestroy = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.DESTROY);
};
goog.fx.Animation.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(new goog.fx.AnimationEvent(type, this));
};
goog.fx.AnimationEvent = function(type, anim) {
  goog.fx.AnimationEvent.base(this, "constructor", type);
  this.coords = anim.coords;
  this.x = anim.coords[0];
  this.y = anim.coords[1];
  this.z = anim.coords[2];
  this.duration = anim.duration;
  this.progress = anim.getProgress();
  this.fps = anim.fps_;
  this.state = anim.getStateInternal();
  this.anim = anim;
};
goog.inherits(goog.fx.AnimationEvent, goog.events.Event);
goog.fx.AnimationEvent.prototype.coordsAsInts = function() {
  return goog.array.map(this.coords, Math.round);
};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet(("area,base,br,col,command," + "embed,hr,img,input,keygen,link,meta,param,source,track,wbr").split(","));
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  var safeStyle = new goog.html.SafeStyle;
  safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return safeStyle;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-.%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.VALUE_RE_ = /^[-.%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"\u202a", RLE:"\u202b", PDF:"\u202c", LRM:"\u200e", RLM:"\u200f"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0, UNKNOWN:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff" + "\u200e\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";
goog.i18n.bidi.rtlChars_ = "\u0591-\u07ff\u200f\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return!goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05f3");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /\d/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  } else {
    url = goog.html.SafeUrl.normalize_(url);
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.normalize_ = function(url) {
  try {
    var normalized = encodeURI(url);
  } catch (e) {
    return goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return normalized.replace(goog.html.SafeUrl.NORMALIZE_MATCHER_, function(match) {
    return goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_[match];
  });
};
goog.html.SafeUrl.NORMALIZE_MATCHER_ = /[()']|%5B|%5D|%25/g;
goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_ = {"'":"%27", "(":"%28", ")":"%29", "%5B":"[", "%5D":"]", "%25":"%"};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet("link", "script", "style");
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toLowerCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (value == null) {
        continue;
      }
      if (value instanceof goog.string.Const) {
        value = goog.string.Const.unwrap(value);
      } else {
        if (name.toLowerCase() == "style") {
          value = goog.html.SafeHtml.getStyleValue_(value);
        } else {
          if (/^on/i.test(name)) {
            throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
                throw Error('Attribute "' + name + '" requires goog.string.Const or goog.html.SafeUrl value, "' + value + '" given.');
              }
            }
          }
        }
      }
      goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
      result += " " + name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
    }
  }
  var content = opt_content;
  if (!goog.isDef(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  var safeHtml = new goog.html.SafeHtml;
  safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  safeHtml.dir_ = dir;
  return safeHtml;
};
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return!!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return!!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("goog.testing.watchers");
goog.testing.watchers.resetWatchers_ = [];
goog.testing.watchers.signalClockReset = function() {
  var watchers = goog.testing.watchers.resetWatchers_;
  for (var i = 0;i < watchers.length;i++) {
    goog.testing.watchers.resetWatchers_[i]();
  }
};
goog.testing.watchers.watchClockReset = function(fn) {
  goog.testing.watchers.resetWatchers_.push(fn);
};
goog.provide("goog.async.run");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.require("goog.testing.watchers");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.push(new goog.async.run.WorkItem_(callback, opt_context));
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve();
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function() {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = [];
if (goog.DEBUG) {
  goog.async.run.resetQueue_ = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = [];
  };
  goog.testing.watchers.watchClockReset(goog.async.run.resetQueue_);
}
goog.async.run.processWorkQueue = function() {
  while (goog.async.run.workQueue_.length) {
    var workItems = goog.async.run.workQueue_;
    goog.async.run.workQueue_ = [];
    for (var i = 0;i < workItems.length;i++) {
      var workItem = workItems[i];
      try {
        workItem.fn.call(workItem.scope);
      } catch (e) {
        goog.async.throwException(e);
      }
    }
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.async.run.WorkItem_ = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  try {
    var self = this;
    resolver.call(opt_context, function(value) {
      self.resolve_(goog.Promise.State_.FULFILLED, value);
    }, function(reason) {
      self.resolve_(goog.Promise.State_.REJECTED, reason);
    });
  } catch (e) {
    this.resolve_(goog.Promise.State_.REJECTED, e);
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_;
goog.Promise.resolve = function(opt_value) {
  return new goog.Promise(function(resolve, reject) {
    resolve(opt_value);
  });
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenAlways = function(onResolved, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var callback = function() {
    try {
      onResolved.call(opt_context);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  };
  this.addCallbackEntry_({child:null, onRejected:callback, onFulfilled:callback});
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childIndex = -1;
  for (var i = 0, entry;entry = this.callbackEntries_[i];i++) {
    var child = entry.child;
    if (child) {
      childCount++;
      if (child == childPromise) {
        childIndex = i;
      }
      if (childIndex >= 0 && childCount > 1) {
        break;
      }
    }
  }
  if (childIndex >= 0) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];
      this.executeCallback_(callbackEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if ((!this.callbackEntries_ || !this.callbackEntries_.length) && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  if (!this.callbackEntries_) {
    this.callbackEntries_ = [];
  }
  this.callbackEntries_.push(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = {child:null, onFulfilled:null, onRejected:null};
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_((callbackEntry));
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  } else {
    if (goog.Thenable.isImplementedBy(x)) {
      x = (x);
      this.state_ = goog.Promise.State_.BLOCKED;
      x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);
      return;
    } else {
      if (goog.isObject(x)) {
        try {
          var then = x["then"];
          if (goog.isFunction(then)) {
            this.tryThen_(x, then);
            return;
          }
        } catch (e) {
          state = goog.Promise.State_.REJECTED;
          x = e;
        }
      }
    }
  }
  this.result_ = x;
  this.state_ = state;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.prototype.tryThen_ = function(thenable, then) {
  this.state_ = goog.Promise.State_.BLOCKED;
  var promise = this;
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      promise.unblockAndFulfill_(value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      promise.unblockAndReject_(reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.executeCallbacks_ = function() {
  while (this.callbackEntries_ && this.callbackEntries_.length) {
    var entries = this.callbackEntries_;
    this.callbackEntries_ = [];
    for (var i = 0;i < entries.length;i++) {
      if (goog.Promise.LONG_STACK_TRACES) {
        this.currentStep_++;
      }
      this.executeCallback_(entries[i], this.state_, this.result_);
    }
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled(result);
  } else {
    this.removeUnhandledRejection_();
    callbackEntry.onRejected(result);
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res)) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.net.xpc.DirectTransport");
goog.require("goog.Timer");
goog.require("goog.async.Deferred");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.object");
goog.scope(function() {
  var CfgFields = goog.net.xpc.CfgFields;
  var CrossPageChannelRole = goog.net.xpc.CrossPageChannelRole;
  var Deferred = goog.async.Deferred;
  var EventHandler = goog.events.EventHandler;
  var Timer = goog.Timer;
  var Transport = goog.net.xpc.Transport;
  goog.net.xpc.DirectTransport = function(channel, opt_domHelper) {
    goog.net.xpc.DirectTransport.base(this, "constructor", opt_domHelper);
    this.channel_ = channel;
    this.eventHandler_ = new EventHandler(this);
    this.registerDisposable(this.eventHandler_);
    this.maybeAttemptToConnectTimer_ = new Timer(DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_, this.getWindow());
    this.registerDisposable(this.maybeAttemptToConnectTimer_);
    this.setupAckReceived_ = new Deferred;
    this.setupAckSent_ = new Deferred;
    this.connected_ = new Deferred;
    this.endpointId_ = goog.net.xpc.getRandomString(10);
    this.peerEndpointId_ = null;
    this.asyncSendsMap_ = {};
    this.originalChannelName_ = this.channel_.name;
    this.channel_.updateChannelNameAndCatalog(DirectTransport.getRoledChannelName_(this.channel_.name, this.channel_.getRole()));
    this.initialized_ = false;
    this.connected_.awaitDeferred(this.setupAckReceived_);
    this.connected_.awaitDeferred(this.setupAckSent_);
    this.connected_.addCallback(this.notifyConnected_, this);
    this.connected_.callback(true);
    this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, Timer.TICK, this.maybeAttemptToConnect_);
    goog.log.info(goog.net.xpc.logger, "DirectTransport created. role\x3d" + this.channel_.getRole());
  };
  goog.inherits(goog.net.xpc.DirectTransport, Transport);
  var DirectTransport = goog.net.xpc.DirectTransport;
  DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_ = 100;
  DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ = 0;
  DirectTransport.isSupported = function(peerWindow) {
    try {
      return window.document.domain == peerWindow.document.domain;
    } catch (e) {
      return false;
    }
  };
  DirectTransport.activeCount_ = {};
  DirectTransport.GLOBAL_TRANPORT_PATH_ = "crosswindowmessaging.channel";
  DirectTransport.MESSAGE_DELIMITER_ = ",";
  DirectTransport.initialize_ = function(listenWindow) {
    var uid = goog.getUid(listenWindow);
    var value = DirectTransport.activeCount_[uid] || 0;
    if (value == 0) {
      var globalProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, listenWindow);
      if (globalProxy == null) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, DirectTransport.messageReceivedHandler_, listenWindow);
      }
    }
    DirectTransport.activeCount_[uid]++;
  };
  DirectTransport.getRoledChannelName_ = function(channelName, role) {
    return channelName + "_" + role;
  };
  DirectTransport.messageReceivedHandler_ = function(literal) {
    var msg = DirectTransport.Message_.fromLiteral(literal);
    var channelName = msg.channelName;
    var service = msg.service;
    var payload = msg.payload;
    goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
    var channel = goog.net.xpc.channels[channelName];
    if (channel) {
      channel.xpcDeliver(service, payload);
      return true;
    }
    var transportMessageType = DirectTransport.parseTransportPayload_(payload)[0];
    for (var staleChannelName in goog.net.xpc.channels) {
      var staleChannel = goog.net.xpc.channels[staleChannelName];
      if (staleChannel.getRole() == CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && transportMessageType == goog.net.xpc.SETUP) {
        staleChannel.updateChannelNameAndCatalog(channelName);
        staleChannel.xpcDeliver(service, payload);
        return true;
      }
    }
    goog.log.info(goog.net.xpc.logger, "channel name mismatch; message ignored.");
    return false;
  };
  DirectTransport.prototype.transportType = goog.net.xpc.TransportTypes.DIRECT;
  DirectTransport.prototype.transportServiceHandler = function(payload) {
    var transportParts = DirectTransport.parseTransportPayload_(payload);
    var transportMessageType = transportParts[0];
    var peerEndpointId = transportParts[1];
    switch(transportMessageType) {
      case goog.net.xpc.SETUP_ACK_:
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
        break;
      case goog.net.xpc.SETUP:
        this.sendSetupAckMessage_();
        if (this.peerEndpointId_ != null && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
        break;
    }
  };
  DirectTransport.prototype.sendSetupMessage_ = function() {
    var payload = goog.net.xpc.SETUP;
    payload += DirectTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  };
  DirectTransport.prototype.sendSetupAckMessage_ = function() {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    if (!this.setupAckSent_.hasFired()) {
      this.setupAckSent_.callback(true);
    }
  };
  DirectTransport.prototype.connect = function() {
    var win = this.getWindow();
    if (win) {
      DirectTransport.initialize_(win);
      this.initialized_ = true;
      this.maybeAttemptToConnect_();
    } else {
      goog.log.fine(goog.net.xpc.logger, "connect(): no window to initialize.");
    }
  };
  DirectTransport.prototype.maybeAttemptToConnect_ = function() {
    var outerRole = this.channel_.getRole() == CrossPageChannelRole.OUTER;
    if (this.channel_.isConnected()) {
      this.maybeAttemptToConnectTimer_.stop();
      return;
    }
    this.maybeAttemptToConnectTimer_.start();
    this.sendSetupMessage_();
  };
  DirectTransport.prototype.send = function(service, payload) {
    if (!this.channel_.getPeerWindowObject()) {
      goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
      return;
    }
    var channelName = DirectTransport.getRoledChannelName_(this.originalChannelName_, this.getPeerRole_());
    var message = new DirectTransport.Message_(channelName, service, payload);
    if (this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE]) {
      this.executeScheduledSend_(message);
    } else {
      this.asyncSendsMap_[goog.getUid(message)] = Timer.callOnce(goog.bind(this.executeScheduledSend_, this, message), 0);
    }
  };
  DirectTransport.prototype.executeScheduledSend_ = function(message) {
    var messageId = goog.getUid(message);
    if (this.asyncSendsMap_[messageId]) {
      delete this.asyncSendsMap_[messageId];
    }
    try {
      var peerProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, this.channel_.getPeerWindowObject());
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Can't access other window, ignoring.", error);
      return;
    }
    if (goog.isNull(peerProxy)) {
      goog.log.warning(goog.net.xpc.logger, "Peer window had no global function.");
      return;
    }
    try {
      peerProxy(message.toLiteral());
      goog.log.info(goog.net.xpc.logger, "send(): channelName\x3d" + message.channelName + " service\x3d" + message.service + " payload\x3d" + message.payload);
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Error performing call, ignoring.", error);
    }
  };
  DirectTransport.prototype.getPeerRole_ = function() {
    var role = this.channel_.getRole();
    return role == goog.net.xpc.CrossPageChannelRole.OUTER ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  };
  DirectTransport.prototype.notifyConnected_ = function() {
    this.channel_.notifyConnected(this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE] ? DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ : 0);
  };
  DirectTransport.prototype.disposeInternal = function() {
    if (this.initialized_) {
      var listenWindow = this.getWindow();
      var uid = goog.getUid(listenWindow);
      var value = --DirectTransport.activeCount_[uid];
      if (value == 1) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, null, listenWindow);
      }
    }
    if (this.asyncSendsMap_) {
      goog.object.forEach(this.asyncSendsMap_, function(timerId) {
        Timer.clear(timerId);
      });
      this.asyncSendsMap_ = null;
    }
    if (this.setupAckReceived_) {
      this.setupAckReceived_.cancel();
      delete this.setupAckReceived_;
    }
    if (this.setupAckSent_) {
      this.setupAckSent_.cancel();
      delete this.setupAckSent_;
    }
    if (this.connected_) {
      this.connected_.cancel();
      delete this.connected_;
    }
    DirectTransport.base(this, "disposeInternal");
  };
  DirectTransport.parseTransportPayload_ = function(payload) {
    var transportParts = (payload.split(DirectTransport.MESSAGE_DELIMITER_));
    transportParts[1] = transportParts[1] || null;
    return transportParts;
  };
  DirectTransport.Message_ = function(channelName, service, payload) {
    this.channelName = channelName;
    this.service = service;
    this.payload = payload;
  };
  DirectTransport.Message_.prototype.toLiteral = function() {
    return{"channelName":this.channelName, "service":this.service, "payload":this.payload};
  };
  DirectTransport.Message_.fromLiteral = function(literal) {
    return new DirectTransport.Message_(literal["channelName"], literal["service"], literal["payload"]);
  };
});
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.debug");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.messaging.AbstractChannel.base(this, "constructor");
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.log.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return{callback:callback, objectPayload:objectPayload};
    }
  }
  goog.log.warning(this.logger, 'Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      goog.log.warning(this.logger, "Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.messaging.AbstractChannel.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.net.xpc.FrameElementMethodTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.dom.safe");
goog.require("goog.events");
goog.require("goog.html.SafeHtml");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframeRelayTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement("div");
    goog.dom.safe.setInnerHtml(div, goog.html.SafeHtml.create("iframe", {"onload":goog.string.Const.from("this.xpcOnload()")}));
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement("iframe");
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframeRelayTransport.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.net.xpc.NativeMessagingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.log.info(goog.net.xpc.logger, "NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, msgEvt.getBrowserEvent().origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)) {
      staleChannel.updateChannelNameAndCatalog(channelName);
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2) && protocolVersion == 2) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || this.channel_.isConnected() || this.isDisposed()) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.log.warning(goog.net.xpc.logger, "Peer window had no postMessage function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.log.fine(goog.net.xpc.logger, "send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.log.warning(goog.net.xpc.logger, "Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.net.xpc.NativeMessagingTransport.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.net.xpc.NixTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.log.error(goog.net.xpc.logger, "Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.log.error(goog.net.xpc.logger, "NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.net.xpc.NixTransport.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dispose");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventType");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.ChannelStates");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.DirectTransport");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.net.xpc.UriCfgFields");
goog.require("goog.string");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.net.xpc.CrossPageChannel.base(this, "constructor");
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  if (!goog.events.getListener(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_)) {
    goog.events.listenOnce(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_);
  }
  goog.log.info(goog.net.xpc.logger, "CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return!!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  var CfgFields = goog.net.xpc.CfgFields;
  if (!this.cfg_[CfgFields.TRANSPORT]) {
    this.cfg_[CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.DIRECT:
      if (this.peerWindowObject_ && goog.net.xpc.DirectTransport.isSupported((this.peerWindowObject_))) {
        this.transport_ = new goog.net.xpc.DirectTransport(this, this.domHelper_);
      } else {
        goog.log.info(goog.net.xpc.logger, "DirectTransport not supported for this window, peer window in" + " different security context or not set yet.");
      }
      break;
  }
  if (this.transport_) {
    goog.log.info(goog.net.xpc.logger, "Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.log.info(goog.net.xpc.logger, "createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement("IFRAME");
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnceWithScope(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
  }
  return(iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.log.info(goog.net.xpc.logger, "continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (goog.isDef(opt_delay)) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected_ = goog.net.xpc.CrossPageChannel.prototype.notifyConnected;
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.log.info(goog.net.xpc.logger, "Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.log.error(goog.net.xpc.logger, "Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.log.error(goog.net.xpc.logger, "Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.log.warning(goog.net.xpc.logger, 'Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed()) {
    goog.log.warning(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Disposed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.log.info(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (goog.isNumber(role)) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog = function(name) {
  goog.log.fine(goog.net.xpc.logger, "changing channel name to " + name);
  delete goog.net.xpc.channels[this.name];
  this.name = name;
  goog.net.xpc.channels[name] = this;
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptySafe(opt_origin) || goog.string.isEmptySafe(peerHostname) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.net.xpc.CrossPageChannel.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj13328 = {};
  return obj13328;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3785__auto__ = port;
    if (and__3785__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4441__auto__ = port == null ? null : port;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj13330 = {};
  return obj13330;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3785__auto__ = port;
    if (and__3785__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4441__auto__ = port == null ? null : port;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj13332 = {};
  return obj13332;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3785__auto__ = chan;
    if (and__3785__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4441__auto__ = chan == null ? null : chan;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3785__auto__ = chan;
    if (and__3785__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4441__auto__ = chan == null ? null : chan;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj13334 = {};
  return obj13334;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3785__auto__ = h;
    if (and__3785__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4441__auto__ = h == null ? null : h;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3785__auto__ = h;
    if (and__3785__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4441__auto__ = h == null ? null : h;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj13336 = {};
  return obj13336;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3785__auto__ = b;
    if (and__3785__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4441__auto__ = b == null ? null : b;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3785__auto__ = b;
    if (and__3785__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4441__auto__ = b == null ? null : b;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function add_BANG__STAR_(b, itm) {
  if (function() {
    var and__3785__auto__ = b;
    if (and__3785__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4441__auto__ = b == null ? null : b;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function() {
  var add_BANG_ = null;
  var add_BANG___1 = function(b) {
    return b;
  };
  var add_BANG___2 = function(b, itm) {
    if (!(itm == null)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
    }
    return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
  };
  add_BANG_ = function(b, itm) {
    switch(arguments.length) {
      case 1:
        return add_BANG___1.call(this, b);
      case 2:
        return add_BANG___2.call(this, b, itm);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_BANG_.cljs$core$IFn$_invoke$arity$1 = add_BANG___1;
  add_BANG_.cljs$core$IFn$_invoke$arity$2 = add_BANG___2;
  return add_BANG_;
}();
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj13338 = {};
  return obj13338;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t13286 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t13286 = function(f, fn_handler, meta13287) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta13287 = meta13287;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t13286.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t13286.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t13286.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t13286.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13288) {
      var self__ = this;
      var _13288__$1 = this;
      return self__.meta13287;
    };
    cljs.core.async.impl.ioc_helpers.t13286.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13288, meta13287__$1) {
      var self__ = this;
      var _13288__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t13286(self__.f, self__.fn_handler, meta13287__$1);
    };
    cljs.core.async.impl.ioc_helpers.t13286.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t13286.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t13286";
    cljs.core.async.impl.ioc_helpers.t13286.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.ioc-helpers/t13286");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t13286 = function __GT_t13286(f__$1, fn_handler__$1, meta13287) {
      return new cljs.core.async.impl.ioc_helpers.t13286(f__$1, fn_handler__$1, meta13287);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t13286(f, fn_handler, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 19, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 30, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 27, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"], 
  null));
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e13290) {
    if (e13290 instanceof Object) {
      var ex = e13290;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e13290;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_13293_13295 = state;
    statearr_13293_13295[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_13293_13295[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_13294_13296 = state;
    statearr_13294_13296[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13294_13296[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_13299_13301 = state;
    statearr_13299_13301[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_13299_13301[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_13300_13302 = state;
    statearr_13300_13302[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13300_13302[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4400__auto__, k__4401__auto__) {
  var self__ = this;
  var this__4400__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4400__auto____$1, k__4401__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4402__auto__, k13304, else__4403__auto__) {
  var self__ = this;
  var this__4402__auto____$1 = this;
  var G__13306 = k13304 instanceof cljs.core.Keyword ? k13304.fqn : null;
  switch(G__13306) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k13304, else__4403__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4414__auto__, writer__4415__auto__, opts__4416__auto__) {
  var self__ = this;
  var this__4414__auto____$1 = this;
  var pr_pair__4417__auto__ = function(this__4414__auto____$1) {
    return function(keyval__4418__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4415__auto__, cljs.core.pr_writer, "", " ", "", opts__4416__auto__, keyval__4418__auto__);
    };
  }(this__4414__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4415__auto__, pr_pair__4417__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4416__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4398__auto__) {
  var self__ = this;
  var this__4398__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4394__auto__) {
  var self__ = this;
  var this__4394__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4404__auto__) {
  var self__ = this;
  var this__4404__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4395__auto__) {
  var self__ = this;
  var this__4395__auto____$1 = this;
  var h__4218__auto__ = self__.__hash;
  if (!(h__4218__auto__ == null)) {
    return h__4218__auto__;
  } else {
    var h__4218__auto____$1 = cljs.core.hash_imap.call(null, this__4395__auto____$1);
    self__.__hash = h__4218__auto____$1;
    return h__4218__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4396__auto__, other__4397__auto__) {
  var self__ = this;
  var this__4396__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = other__4397__auto__;
    if (cljs.core.truth_(and__3785__auto__)) {
      return this__4396__auto____$1.constructor === other__4397__auto__.constructor && cljs.core.equiv_map.call(null, this__4396__auto____$1, other__4397__auto__);
    } else {
      return and__3785__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4409__auto__, k__4410__auto__) {
  var self__ = this;
  var this__4409__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4410__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4409__auto____$1), self__.__meta), k__4410__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4410__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4407__auto__, k__4408__auto__, G__13303) {
  var self__ = this;
  var this__4407__auto____$1 = this;
  var pred__13307 = cljs.core.keyword_identical_QMARK_;
  var expr__13308 = k__4408__auto__;
  if (cljs.core.truth_(pred__13307.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__13308))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__13303, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13307.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__13308))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__13303, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13307.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__13308))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__13303, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__13307.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__13308))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__13303, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__13307.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__13308))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__13303, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4408__auto__, G__13303), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4412__auto__) {
  var self__ = this;
  var this__4412__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4399__auto__, G__13303) {
  var self__ = this;
  var this__4399__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__13303, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4405__auto__, entry__4406__auto__) {
  var self__ = this;
  var this__4405__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4406__auto__)) {
    return cljs.core._assoc.call(null, this__4405__auto____$1, cljs.core._nth.call(null, entry__4406__auto__, 0), cljs.core._nth.call(null, entry__4406__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4405__auto____$1, entry__4406__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4434__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4434__auto__, writer__4435__auto__) {
  return cljs.core._write.call(null, writer__4435__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__13305) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__13305), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__13305), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__13305), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__13305), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__13305), null, cljs.core.dissoc.call(null, G__13305, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_13312 = state;
  statearr_13312[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_13312;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = exception;
      if (cljs.core.truth_(and__3785__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3785__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3785__auto__ = exception;
        if (cljs.core.truth_(and__3785__auto__)) {
          var and__3785__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3785__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3785__auto____$1;
          }
        } else {
          return and__3785__auto__;
        }
      }())) {
        var statearr_13318 = state;
        statearr_13318[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_13318[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_13318[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_13318[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_13318;
      } else {
        if (cljs.core.truth_(function() {
          var and__3785__auto__ = exception;
          if (cljs.core.truth_(and__3785__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3785__auto__;
          }
        }())) {
          var statearr_13319_13323 = state;
          statearr_13319_13323[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__13324 = state;
          state = G__13324;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3785__auto__ = exception;
            if (cljs.core.truth_(and__3785__auto__)) {
              var and__3785__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3785__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3785__auto____$1;
              }
            } else {
              return and__3785__auto__;
            }
          }())) {
            var statearr_13320 = state;
            statearr_13320[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_13320[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_13320;
          } else {
            if (cljs.core.truth_(function() {
              var and__3785__auto__ = cljs.core.not.call(null, exception);
              if (and__3785__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3785__auto__;
              }
            }())) {
              var statearr_13321 = state;
              statearr_13321[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_13321[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_13321;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_13322 = state;
                statearr_13322[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_13322[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_13322;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("goog.dom.vendor");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getPrefixedPropertyName = function(propertyName, opt_object) {
  if (opt_object && propertyName in opt_object) {
    return propertyName;
  }
  var prefix = goog.dom.vendor.getVendorJsPrefix();
  if (prefix) {
    prefix = prefix.toLowerCase();
    var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
    return!goog.isDef(opt_object) || prefixedPropertyName in opt_object ? prefixedPropertyName : null;
  }
  return null;
};
goog.dom.vendor.getPrefixedEventType = function(eventType) {
  var prefix = goog.dom.vendor.getVendorJsPrefix() || "";
  return(prefix + eventType).toLowerCase();
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    var coord = arguments[i];
    box.top = Math.min(box.top, coord.y);
    box.right = Math.max(box.right, coord.x);
    box.bottom = Math.max(box.bottom, coord.y);
    box.left = Math.min(box.left, coord.x);
  }
  return box;
};
goog.math.Box.prototype.getWidth = function() {
  return this.right - this.left;
};
goog.math.Box.prototype.getHeight = function() {
  return this.bottom - this.top;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && a.right == b.right && a.bottom == b.bottom && a.left == b.left;
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && other.right <= box.right && other.top >= box.top && other.bottom <= box.bottom;
  }
  return other.x >= box.left && other.x <= box.right && other.y >= box.top && other.y <= box.bottom;
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom;
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && b.left <= a.right + padding && a.top <= b.bottom + padding && b.top <= a.bottom + padding;
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && a.width == b.width && a.top == b.top && a.height == b.height;
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && b.left <= a.left + a.width && a.top <= b.top + b.height && b.top <= a.top + a.height;
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || !intersection.height || !intersection.width) {
    return[a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && this.left + this.width >= another.left + another.width && this.top <= another.top && this.top + this.height >= another.top + another.height;
  } else {
    return another.x >= this.left && another.x <= this.left + this.width && another.y >= this.top && another.y <= this.top + this.height;
  }
};
goog.math.Rect.prototype.squaredDistance = function(point) {
  var dx = point.x < this.left ? this.left - point.x : Math.max(point.x - (this.left + this.width), 0);
  var dy = point.y < this.top ? this.top - point.y : Math.max(point.y - (this.top + this.height), 0);
  return dx * dx + dy * dy;
};
goog.math.Rect.prototype.distance = function(point) {
  return Math.sqrt(this.squaredDistance(point));
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.getTopLeft = function() {
  return new goog.math.Coordinate(this.left, this.top);
};
goog.math.Rect.prototype.getCenter = function() {
  return new goog.math.Coordinate(this.left + this.width / 2, this.top + this.height / 2);
};
goog.math.Rect.prototype.getBottomRight = function() {
  return new goog.math.Coordinate(this.left + this.width, this.top + this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS", false);
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    goog.object.forEach(style, goog.partial(goog.style.setStyle_, element));
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return prefixedStyle;
    }
  }
  return camelStyle;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || styles.getPropertyValue(property) || "";
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || goog.style.getCascadedStyle(element, style) || element.style && element.style[style];
};
goog.style.getComputedBoxSizing = function(element) {
  return goog.style.getStyle_(element, "boxSizing") || goog.style.getStyle_(element, "MozBoxSizing") || goog.style.getStyle_(element, "WebkitBoxSizing") || null;
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.getComputedTransform = function(element) {
  var property = goog.style.getVendorStyleName_(element, "transform");
  return goog.style.getStyle_(element, property) || goog.style.getStyle_(element, "transform");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  var buggyGeckoSubPixelPos = goog.userAgent.GECKO && (goog.userAgent.MAC || goog.userAgent.X11) && goog.userAgent.isVersionOrHigher("1.9");
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), buggyGeckoSubPixelPos);
  el.style.top = goog.style.getPixelStyleValue_((y), buggyGeckoSubPixelPos);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect;
  try {
    rect = el.getBoundingClientRect();
  } catch (e) {
    return{"left":0, "top":0, "right":0, "bottom":0};
  }
  if (goog.userAgent.IE && el.ownerDocument.body) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return(rect);
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && positionStyle == "static" && parent != doc.documentElement && parent != doc.body;
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || parent.scrollHeight > parent.clientHeight || positionStyle == "fixed" || positionStyle == "absolute" || positionStyle == "relative")) {
      return(parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) && (el != body && el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, container, opt_center) {
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  var relX = elementPos.x - containerPos.x - containerBorder.left;
  var relY = elementPos.y - containerPos.y - containerBorder.top;
  var spaceX = container.clientWidth - element.offsetWidth;
  var spaceY = container.clientHeight - element.offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, container, opt_center) {
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("1.9")) {
    var left = parseFloat(goog.style.getComputedStyle(el, "borderLeftWidth"));
    if (goog.style.isRightToLeft(el)) {
      var scrollbarWidth = el.offsetWidth - el.clientWidth - left - parseFloat(goog.style.getComputedStyle(el, "borderRightWidth"));
      left += scrollbarWidth;
    }
    return new goog.math.Coordinate(left, parseFloat(goog.style.getComputedStyle(el, "borderTopWidth")));
  }
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var box, doc = goog.dom.getOwnerDocument(el);
  var positionStyle = goog.style.getStyle_(el, "position");
  goog.asserts.assertObject(el, "Parameter is required");
  var BUGGY_GECKO_BOX_OBJECT = !goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS && goog.userAgent.GECKO && doc.getBoxObjectFor && !el.getBoundingClientRect && positionStyle == "absolute" && (box = doc.getBoxObjectFor(el)) && (box.screenX < 0 || box.screenY < 0);
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y;
  } else {
    if (doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT) {
      box = doc.getBoxObjectFor(el);
      var vpBox = doc.getBoxObjectFor(viewportElement);
      pos.x = box.screenX - vpBox.screenX;
      pos.y = box.screenY - vpBox.screenY;
    } else {
      var parent = el;
      do {
        pos.x += parent.offsetLeft;
        pos.y += parent.offsetTop;
        if (parent != el) {
          pos.x += parent.clientLeft || 0;
          pos.y += parent.clientTop || 0;
        }
        if (goog.userAgent.WEBKIT && goog.style.getComputedPosition(parent) == "fixed") {
          pos.x += doc.body.scrollLeft;
          pos.y += doc.body.scrollTop;
          break;
        }
        parent = parent.offsetParent;
      } while (parent && parent != el);
      if (goog.userAgent.OPERA || goog.userAgent.WEBKIT && positionStyle == "absolute") {
        pos.y -= doc.body.offsetTop;
      }
      for (parent = el;(parent = goog.style.getOffsetParent(parent)) && parent != doc.body && parent != viewportElement;) {
        pos.x -= parent.scrollLeft;
        if (!goog.userAgent.OPERA || parent.tagName != "TR") {
          pos.y -= parent.scrollTop;
        }
      }
    }
  }
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && currentWin != relativeWin && (currentEl = currentWin.frameElement) && (currentWin = currentWin.parent));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPositionForElement_ = function(el) {
  var pos;
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    var box = goog.style.getBoundingClientRect_(el);
    pos = new goog.math.Coordinate(box.left, box.top);
  } else {
    var scrollCoord = goog.dom.getDomHelper(el).getDocumentScroll();
    var pageCoord = goog.style.getPageOffset(el);
    pos = new goog.math.Coordinate(pageCoord.x - scrollCoord.x, pageCoord.y - scrollCoord.y);
  }
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher(12)) {
    return goog.math.Coordinate.sum(pos, goog.style.getCssTranslation(el));
  } else {
    return pos;
  }
};
goog.style.getClientPosition = function(el) {
  goog.asserts.assert(el);
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    return goog.style.getClientPositionForElement_((el));
  } else {
    var isAbstractedEvent = goog.isFunction(el.getBrowserEvent);
    var be = (el);
    var targetEvent = el;
    if (el.targetTouches) {
      targetEvent = el.targetTouches[0];
    } else {
      if (isAbstractedEvent && be.getBrowserEvent().targetTouches) {
        targetEvent = be.getBrowserEvent().targetTouches[0];
      }
    }
    return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);
  }
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, el.offsetLeft + dx, el.offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, (h));
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_, (element));
};
goog.style.evaluateWithTemporaryDisplay_ = function(fn, element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return fn(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var retVal = fn(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return retVal;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth;
  var offsetHeight = element.offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getTransformedSize = function(element) {
  if (!element.getBoundingClientRect) {
    return null;
  }
  var clientRect = goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_, element);
  return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  goog.style.setElementShown(el, display);
};
goog.style.setElementShown = function(el, isShown) {
  el.style.display = isShown ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  var doc = dh.getDocument();
  if (goog.userAgent.IE && doc.createStyleSheet) {
    styleSheet = doc.createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass("head")[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass("body")[0];
      head = dh.createDom("head");
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom("style");
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || styleSheet.owningElement || (styleSheet);
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE && goog.isDef(element.cssText)) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    if (goog.userAgent.GECKO) {
      style.display = goog.userAgent.isVersionOrHigher("1.9a") ? "inline-block" : "-moz-inline-box";
    } else {
      style.display = "inline-block";
    }
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    el.style[name] = value;
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        descendant.style[name] = value;
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() && ieCurrentStyle.width != "auto" && ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, stylePrefix + "Left"));
    var right = (goog.style.getComputedStyle(element, stylePrefix + "Right"));
    var top = (goog.style.getComputedStyle(element, stylePrefix + "Top"));
    var bottom = (goog.style.getComputedStyle(element, stylePrefix + "Bottom"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, "borderLeftWidth"));
    var right = (goog.style.getComputedStyle(element, "borderRightWidth"));
    var top = (goog.style.getComputedStyle(element, "borderTopWidth"));
    var bottom = (goog.style.getComputedStyle(element, "borderBottomWidth"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom("span", {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.split(/\s*:\s*/);
    if (keyValue.length == 2) {
      result[goog.string.toCamelCase(keyValue[0].toLowerCase())] = keyValue[1];
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement("div");
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement("div");
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var transform = goog.style.getComputedTransform(element);
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("goog.style.bidi");
goog.require("goog.dom");
goog.require("goog.style");
goog.require("goog.userAgent");
goog.style.bidi.getScrollLeft = function(element) {
  var isRtl = goog.style.isRightToLeft(element);
  if (isRtl && goog.userAgent.GECKO) {
    return-element.scrollLeft;
  } else {
    if (isRtl && !(goog.userAgent.IE && goog.userAgent.isVersionOrHigher("8"))) {
      var overflowX = goog.style.getComputedOverflowX(element);
      if (overflowX == "visible") {
        return element.scrollLeft;
      } else {
        return element.scrollWidth - element.clientWidth - element.scrollLeft;
      }
    }
  }
  return element.scrollLeft;
};
goog.style.bidi.getOffsetStart = function(element) {
  var offsetLeftForReal = element.offsetLeft;
  var bestParent = element.offsetParent;
  if (!bestParent && goog.style.getComputedPosition(element) == "fixed") {
    bestParent = goog.dom.getOwnerDocument(element).documentElement;
  }
  if (!bestParent) {
    return offsetLeftForReal;
  }
  if (goog.userAgent.GECKO) {
    var borderWidths = goog.style.getBorderBox(bestParent);
    offsetLeftForReal += borderWidths.left;
  } else {
    if (goog.userAgent.isDocumentModeOrHigher(8) && !goog.userAgent.isDocumentModeOrHigher(9)) {
      var borderWidths = goog.style.getBorderBox(bestParent);
      offsetLeftForReal -= borderWidths.left;
    }
  }
  if (goog.style.isRightToLeft(bestParent)) {
    var elementRightOffset = offsetLeftForReal + element.offsetWidth;
    return bestParent.clientWidth - elementRightOffset;
  }
  return offsetLeftForReal;
};
goog.style.bidi.setScrollOffset = function(element, offsetStart) {
  offsetStart = Math.max(offsetStart, 0);
  if (!goog.style.isRightToLeft(element)) {
    element.scrollLeft = offsetStart;
  } else {
    if (goog.userAgent.GECKO) {
      element.scrollLeft = -offsetStart;
    } else {
      if (!(goog.userAgent.IE && goog.userAgent.isVersionOrHigher("8"))) {
        element.scrollLeft = element.scrollWidth - offsetStart - element.clientWidth;
      } else {
        element.scrollLeft = offsetStart;
      }
    }
  }
};
goog.style.bidi.setPosition = function(elem, left, top, isRtl) {
  if (!goog.isNull(top)) {
    elem.style.top = top + "px";
  }
  if (isRtl) {
    elem.style.right = left + "px";
    elem.style.left = "";
  } else {
    elem.style.left = left + "px";
    elem.style.right = "";
  }
};
goog.provide("goog.fx.dom");
goog.provide("goog.fx.dom.BgColorTransform");
goog.provide("goog.fx.dom.ColorTransform");
goog.provide("goog.fx.dom.Fade");
goog.provide("goog.fx.dom.FadeIn");
goog.provide("goog.fx.dom.FadeInAndShow");
goog.provide("goog.fx.dom.FadeOut");
goog.provide("goog.fx.dom.FadeOutAndHide");
goog.provide("goog.fx.dom.PredefinedEffect");
goog.provide("goog.fx.dom.Resize");
goog.provide("goog.fx.dom.ResizeHeight");
goog.provide("goog.fx.dom.ResizeWidth");
goog.provide("goog.fx.dom.Scroll");
goog.provide("goog.fx.dom.Slide");
goog.provide("goog.fx.dom.SlideFrom");
goog.provide("goog.fx.dom.Swipe");
goog.require("goog.color");
goog.require("goog.events");
goog.require("goog.fx.Animation");
goog.require("goog.fx.Transition");
goog.require("goog.style");
goog.require("goog.style.bidi");
goog.fx.dom.PredefinedEffect = function(element, start, end, time, opt_acc) {
  goog.fx.Animation.call(this, start, end, time, opt_acc);
  this.element = element;
  this.rightToLeft_;
};
goog.inherits(goog.fx.dom.PredefinedEffect, goog.fx.Animation);
goog.fx.dom.PredefinedEffect.prototype.updateStyle = goog.nullFunction;
goog.fx.dom.PredefinedEffect.prototype.rightToLeft_;
goog.fx.dom.PredefinedEffect.prototype.isRightToLeft = function() {
  if (!goog.isDef(this.rightToLeft_)) {
    this.rightToLeft_ = goog.style.isRightToLeft(this.element);
  }
  return this.rightToLeft_;
};
goog.fx.dom.PredefinedEffect.prototype.onAnimate = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onAnimate.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onEnd = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onEnd.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onBegin = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onBegin.call(this);
};
goog.fx.dom.Slide = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Slide, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Slide.prototype.updateStyle = function() {
  var pos = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "right" : "left";
  this.element.style[pos] = Math.round(this.coords[0]) + "px";
  this.element.style.top = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.SlideFrom = function(element, end, time, opt_acc) {
  var offsetLeft = this.isRightPositioningForRtlEnabled() ? goog.style.bidi.getOffsetStart(element) : element.offsetLeft;
  var start = [offsetLeft, element.offsetTop];
  goog.fx.dom.Slide.call(this, element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.SlideFrom, goog.fx.dom.Slide);
goog.fx.dom.SlideFrom.prototype.onBegin = function() {
  var offsetLeft = this.isRightPositioningForRtlEnabled() ? goog.style.bidi.getOffsetStart(this.element) : this.element.offsetLeft;
  this.startPoint = [offsetLeft, this.element.offsetTop];
  goog.fx.dom.SlideFrom.superClass_.onBegin.call(this);
};
goog.fx.dom.Swipe = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
  this.maxWidth_ = Math.max(this.endPoint[0], this.startPoint[0]);
  this.maxHeight_ = Math.max(this.endPoint[1], this.startPoint[1]);
};
goog.inherits(goog.fx.dom.Swipe, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Swipe.prototype.updateStyle = function() {
  var x = this.coords[0];
  var y = this.coords[1];
  this.clip_(Math.round(x), Math.round(y), this.maxWidth_, this.maxHeight_);
  this.element.style.width = Math.round(x) + "px";
  var marginX = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "marginRight" : "marginLeft";
  this.element.style[marginX] = Math.round(x) - this.maxWidth_ + "px";
  this.element.style.marginTop = Math.round(y) - this.maxHeight_ + "px";
};
goog.fx.dom.Swipe.prototype.clip_ = function(x, y, w, h) {
  this.element.style.clip = "rect(" + (h - y) + "px " + w + "px " + h + "px " + (w - x) + "px)";
};
goog.fx.dom.Scroll = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Scroll, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Scroll.prototype.updateStyle = function() {
  if (this.isRightPositioningForRtlEnabled()) {
    goog.style.bidi.setScrollOffset(this.element, Math.round(this.coords[0]));
  } else {
    this.element.scrollLeft = Math.round(this.coords[0]);
  }
  this.element.scrollTop = Math.round(this.coords[1]);
};
goog.fx.dom.Resize = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Resize, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Resize.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
  this.element.style.height = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.ResizeWidth = function(element, start, end, time, opt_acc) {
  goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeWidth, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeWidth.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.ResizeHeight = function(element, start, end, time, opt_acc) {
  goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeHeight, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeHeight.prototype.updateStyle = function() {
  this.element.style.height = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.Fade = function(element, start, end, time, opt_acc) {
  if (goog.isNumber(start)) {
    start = [start];
  }
  if (goog.isNumber(end)) {
    end = [end];
  }
  goog.fx.dom.PredefinedEffect.call(this, element, start, end, time, opt_acc);
  if (start.length != 1 || end.length != 1) {
    throw Error("Start and end points must be 1D");
  }
};
goog.inherits(goog.fx.dom.Fade, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Fade.prototype.updateStyle = function() {
  goog.style.setOpacity(this.element, this.coords[0]);
};
goog.fx.dom.Fade.prototype.show = function() {
  this.element.style.display = "";
};
goog.fx.dom.Fade.prototype.hide = function() {
  this.element.style.display = "none";
};
goog.fx.dom.FadeOut = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOut, goog.fx.dom.Fade);
goog.fx.dom.FadeIn = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeIn, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOutAndHide, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeOutAndHide.superClass_.onBegin.call(this);
};
goog.fx.dom.FadeOutAndHide.prototype.onEnd = function() {
  this.hide();
  goog.fx.dom.FadeOutAndHide.superClass_.onEnd.call(this);
};
goog.fx.dom.FadeInAndShow = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeInAndShow, goog.fx.dom.Fade);
goog.fx.dom.FadeInAndShow.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeInAndShow.superClass_.onBegin.call(this);
};
goog.fx.dom.BgColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw Error("Start and end points must be 3D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.BgColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.BgColorTransform.prototype.setColor = function() {
  var coordsAsInts = [];
  for (var i = 0;i < this.coords.length;i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.backgroundColor = color;
};
goog.fx.dom.BgColorTransform.prototype.updateStyle = function() {
  this.setColor();
};
goog.fx.dom.bgColorFadeIn = function(element, start, time, opt_eventHandler) {
  var initialBgColor = element.style.backgroundColor || "";
  var computedBgColor = goog.style.getBackgroundColor(element);
  var end;
  if (computedBgColor && computedBgColor != "transparent" && computedBgColor != "rgba(0, 0, 0, 0)") {
    end = goog.color.hexToRgb(goog.color.parse(computedBgColor).hex);
  } else {
    end = [255, 255, 255];
  }
  var anim = new goog.fx.dom.BgColorTransform(element, start, end, time);
  function setBgColor() {
    element.style.backgroundColor = initialBgColor;
  }
  if (opt_eventHandler) {
    opt_eventHandler.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  } else {
    goog.events.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  }
  anim.play();
};
goog.fx.dom.ColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw Error("Start and end points must be 3D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.ColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ColorTransform.prototype.updateStyle = function() {
  var coordsAsInts = [];
  for (var i = 0;i < this.coords.length;i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.color = color;
};
goog.provide("goog.fx.easing");
goog.fx.easing.easeIn = function(t) {
  return goog.fx.easing.easeInInternal_(t, 3);
};
goog.fx.easing.easeInInternal_ = function(t, exp) {
  return Math.pow(t, exp);
};
goog.fx.easing.easeOut = function(t) {
  return goog.fx.easing.easeOutInternal_(t, 3);
};
goog.fx.easing.easeOutInternal_ = function(t, exp) {
  return 1 - goog.fx.easing.easeInInternal_(1 - t, exp);
};
goog.fx.easing.easeOutLong = function(t) {
  return goog.fx.easing.easeOutInternal_(t, 4);
};
goog.fx.easing.inAndOut = function(t) {
  return 3 * t * t - 2 * t * t * t;
};
goog.provide("goog.fx");
goog.require("goog.asserts");
goog.require("goog.fx.Animation");
goog.require("goog.fx.Animation.EventType");
goog.require("goog.fx.Animation.State");
goog.require("goog.fx.AnimationEvent");
goog.require("goog.fx.Transition.EventType");
goog.require("goog.fx.easing");
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__13341 = cnt + 1;
      cnt = G__13341;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4684__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4684__auto__) {
      var v_13342 = this$.pop();
      if (keep_QMARK_.call(null, v_13342)) {
        this$.unshift(v_13342);
      } else {
      }
      var G__13343 = x + 1;
      x = G__13343;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("om.dom");
goog.require("cljs.core");
goog.require("goog.object");
om.dom.a = function() {
  var a__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var a = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11096__i = 0, G__11096__a = new Array(arguments.length - 1);
      while (G__11096__i < G__11096__a.length) {
        G__11096__a[G__11096__i] = arguments[G__11096__i + 1];
        ++G__11096__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11096__a, 0);
    }
    return a__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  a.cljs$lang$maxFixedArity = 1;
  a.cljs$lang$applyTo = function(arglist__11097) {
    var opts__10035__auto__ = cljs.core.first(arglist__11097);
    var children__10036__auto__ = cljs.core.rest(arglist__11097);
    return a__delegate(opts__10035__auto__, children__10036__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
om.dom.abbr = function() {
  var abbr__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var abbr = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11098__i = 0, G__11098__a = new Array(arguments.length - 1);
      while (G__11098__i < G__11098__a.length) {
        G__11098__a[G__11098__i] = arguments[G__11098__i + 1];
        ++G__11098__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11098__a, 0);
    }
    return abbr__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 1;
  abbr.cljs$lang$applyTo = function(arglist__11099) {
    var opts__10035__auto__ = cljs.core.first(arglist__11099);
    var children__10036__auto__ = cljs.core.rest(arglist__11099);
    return abbr__delegate(opts__10035__auto__, children__10036__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
om.dom.address = function() {
  var address__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var address = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11100__i = 0, G__11100__a = new Array(arguments.length - 1);
      while (G__11100__i < G__11100__a.length) {
        G__11100__a[G__11100__i] = arguments[G__11100__i + 1];
        ++G__11100__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11100__a, 0);
    }
    return address__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  address.cljs$lang$maxFixedArity = 1;
  address.cljs$lang$applyTo = function(arglist__11101) {
    var opts__10035__auto__ = cljs.core.first(arglist__11101);
    var children__10036__auto__ = cljs.core.rest(arglist__11101);
    return address__delegate(opts__10035__auto__, children__10036__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
om.dom.area = function() {
  var area__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var area = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11102__i = 0, G__11102__a = new Array(arguments.length - 1);
      while (G__11102__i < G__11102__a.length) {
        G__11102__a[G__11102__i] = arguments[G__11102__i + 1];
        ++G__11102__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11102__a, 0);
    }
    return area__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  area.cljs$lang$maxFixedArity = 1;
  area.cljs$lang$applyTo = function(arglist__11103) {
    var opts__10035__auto__ = cljs.core.first(arglist__11103);
    var children__10036__auto__ = cljs.core.rest(arglist__11103);
    return area__delegate(opts__10035__auto__, children__10036__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
om.dom.article = function() {
  var article__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var article = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11104__i = 0, G__11104__a = new Array(arguments.length - 1);
      while (G__11104__i < G__11104__a.length) {
        G__11104__a[G__11104__i] = arguments[G__11104__i + 1];
        ++G__11104__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11104__a, 0);
    }
    return article__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  article.cljs$lang$maxFixedArity = 1;
  article.cljs$lang$applyTo = function(arglist__11105) {
    var opts__10035__auto__ = cljs.core.first(arglist__11105);
    var children__10036__auto__ = cljs.core.rest(arglist__11105);
    return article__delegate(opts__10035__auto__, children__10036__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
om.dom.aside = function() {
  var aside__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var aside = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11106__i = 0, G__11106__a = new Array(arguments.length - 1);
      while (G__11106__i < G__11106__a.length) {
        G__11106__a[G__11106__i] = arguments[G__11106__i + 1];
        ++G__11106__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11106__a, 0);
    }
    return aside__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  aside.cljs$lang$maxFixedArity = 1;
  aside.cljs$lang$applyTo = function(arglist__11107) {
    var opts__10035__auto__ = cljs.core.first(arglist__11107);
    var children__10036__auto__ = cljs.core.rest(arglist__11107);
    return aside__delegate(opts__10035__auto__, children__10036__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
om.dom.audio = function() {
  var audio__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var audio = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11108__i = 0, G__11108__a = new Array(arguments.length - 1);
      while (G__11108__i < G__11108__a.length) {
        G__11108__a[G__11108__i] = arguments[G__11108__i + 1];
        ++G__11108__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11108__a, 0);
    }
    return audio__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  audio.cljs$lang$maxFixedArity = 1;
  audio.cljs$lang$applyTo = function(arglist__11109) {
    var opts__10035__auto__ = cljs.core.first(arglist__11109);
    var children__10036__auto__ = cljs.core.rest(arglist__11109);
    return audio__delegate(opts__10035__auto__, children__10036__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
om.dom.b = function() {
  var b__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var b = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11110__i = 0, G__11110__a = new Array(arguments.length - 1);
      while (G__11110__i < G__11110__a.length) {
        G__11110__a[G__11110__i] = arguments[G__11110__i + 1];
        ++G__11110__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11110__a, 0);
    }
    return b__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  b.cljs$lang$maxFixedArity = 1;
  b.cljs$lang$applyTo = function(arglist__11111) {
    var opts__10035__auto__ = cljs.core.first(arglist__11111);
    var children__10036__auto__ = cljs.core.rest(arglist__11111);
    return b__delegate(opts__10035__auto__, children__10036__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
om.dom.base = function() {
  var base__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var base = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11112__i = 0, G__11112__a = new Array(arguments.length - 1);
      while (G__11112__i < G__11112__a.length) {
        G__11112__a[G__11112__i] = arguments[G__11112__i + 1];
        ++G__11112__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11112__a, 0);
    }
    return base__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  base.cljs$lang$maxFixedArity = 1;
  base.cljs$lang$applyTo = function(arglist__11113) {
    var opts__10035__auto__ = cljs.core.first(arglist__11113);
    var children__10036__auto__ = cljs.core.rest(arglist__11113);
    return base__delegate(opts__10035__auto__, children__10036__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
om.dom.bdi = function() {
  var bdi__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var bdi = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11114__i = 0, G__11114__a = new Array(arguments.length - 1);
      while (G__11114__i < G__11114__a.length) {
        G__11114__a[G__11114__i] = arguments[G__11114__i + 1];
        ++G__11114__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11114__a, 0);
    }
    return bdi__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 1;
  bdi.cljs$lang$applyTo = function(arglist__11115) {
    var opts__10035__auto__ = cljs.core.first(arglist__11115);
    var children__10036__auto__ = cljs.core.rest(arglist__11115);
    return bdi__delegate(opts__10035__auto__, children__10036__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
om.dom.bdo = function() {
  var bdo__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var bdo = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11116__i = 0, G__11116__a = new Array(arguments.length - 1);
      while (G__11116__i < G__11116__a.length) {
        G__11116__a[G__11116__i] = arguments[G__11116__i + 1];
        ++G__11116__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11116__a, 0);
    }
    return bdo__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 1;
  bdo.cljs$lang$applyTo = function(arglist__11117) {
    var opts__10035__auto__ = cljs.core.first(arglist__11117);
    var children__10036__auto__ = cljs.core.rest(arglist__11117);
    return bdo__delegate(opts__10035__auto__, children__10036__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
om.dom.big = function() {
  var big__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var big = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11118__i = 0, G__11118__a = new Array(arguments.length - 1);
      while (G__11118__i < G__11118__a.length) {
        G__11118__a[G__11118__i] = arguments[G__11118__i + 1];
        ++G__11118__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11118__a, 0);
    }
    return big__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  big.cljs$lang$maxFixedArity = 1;
  big.cljs$lang$applyTo = function(arglist__11119) {
    var opts__10035__auto__ = cljs.core.first(arglist__11119);
    var children__10036__auto__ = cljs.core.rest(arglist__11119);
    return big__delegate(opts__10035__auto__, children__10036__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
om.dom.blockquote = function() {
  var blockquote__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var blockquote = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11120__i = 0, G__11120__a = new Array(arguments.length - 1);
      while (G__11120__i < G__11120__a.length) {
        G__11120__a[G__11120__i] = arguments[G__11120__i + 1];
        ++G__11120__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11120__a, 0);
    }
    return blockquote__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 1;
  blockquote.cljs$lang$applyTo = function(arglist__11121) {
    var opts__10035__auto__ = cljs.core.first(arglist__11121);
    var children__10036__auto__ = cljs.core.rest(arglist__11121);
    return blockquote__delegate(opts__10035__auto__, children__10036__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
om.dom.body = function() {
  var body__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var body = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11122__i = 0, G__11122__a = new Array(arguments.length - 1);
      while (G__11122__i < G__11122__a.length) {
        G__11122__a[G__11122__i] = arguments[G__11122__i + 1];
        ++G__11122__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11122__a, 0);
    }
    return body__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  body.cljs$lang$maxFixedArity = 1;
  body.cljs$lang$applyTo = function(arglist__11123) {
    var opts__10035__auto__ = cljs.core.first(arglist__11123);
    var children__10036__auto__ = cljs.core.rest(arglist__11123);
    return body__delegate(opts__10035__auto__, children__10036__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
om.dom.br = function() {
  var br__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var br = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11124__i = 0, G__11124__a = new Array(arguments.length - 1);
      while (G__11124__i < G__11124__a.length) {
        G__11124__a[G__11124__i] = arguments[G__11124__i + 1];
        ++G__11124__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11124__a, 0);
    }
    return br__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  br.cljs$lang$maxFixedArity = 1;
  br.cljs$lang$applyTo = function(arglist__11125) {
    var opts__10035__auto__ = cljs.core.first(arglist__11125);
    var children__10036__auto__ = cljs.core.rest(arglist__11125);
    return br__delegate(opts__10035__auto__, children__10036__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
om.dom.button = function() {
  var button__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var button = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11126__i = 0, G__11126__a = new Array(arguments.length - 1);
      while (G__11126__i < G__11126__a.length) {
        G__11126__a[G__11126__i] = arguments[G__11126__i + 1];
        ++G__11126__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11126__a, 0);
    }
    return button__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  button.cljs$lang$maxFixedArity = 1;
  button.cljs$lang$applyTo = function(arglist__11127) {
    var opts__10035__auto__ = cljs.core.first(arglist__11127);
    var children__10036__auto__ = cljs.core.rest(arglist__11127);
    return button__delegate(opts__10035__auto__, children__10036__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
om.dom.canvas = function() {
  var canvas__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var canvas = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11128__i = 0, G__11128__a = new Array(arguments.length - 1);
      while (G__11128__i < G__11128__a.length) {
        G__11128__a[G__11128__i] = arguments[G__11128__i + 1];
        ++G__11128__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11128__a, 0);
    }
    return canvas__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 1;
  canvas.cljs$lang$applyTo = function(arglist__11129) {
    var opts__10035__auto__ = cljs.core.first(arglist__11129);
    var children__10036__auto__ = cljs.core.rest(arglist__11129);
    return canvas__delegate(opts__10035__auto__, children__10036__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
om.dom.caption = function() {
  var caption__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var caption = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11130__i = 0, G__11130__a = new Array(arguments.length - 1);
      while (G__11130__i < G__11130__a.length) {
        G__11130__a[G__11130__i] = arguments[G__11130__i + 1];
        ++G__11130__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11130__a, 0);
    }
    return caption__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  caption.cljs$lang$maxFixedArity = 1;
  caption.cljs$lang$applyTo = function(arglist__11131) {
    var opts__10035__auto__ = cljs.core.first(arglist__11131);
    var children__10036__auto__ = cljs.core.rest(arglist__11131);
    return caption__delegate(opts__10035__auto__, children__10036__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
om.dom.cite = function() {
  var cite__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var cite = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11132__i = 0, G__11132__a = new Array(arguments.length - 1);
      while (G__11132__i < G__11132__a.length) {
        G__11132__a[G__11132__i] = arguments[G__11132__i + 1];
        ++G__11132__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11132__a, 0);
    }
    return cite__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  cite.cljs$lang$maxFixedArity = 1;
  cite.cljs$lang$applyTo = function(arglist__11133) {
    var opts__10035__auto__ = cljs.core.first(arglist__11133);
    var children__10036__auto__ = cljs.core.rest(arglist__11133);
    return cite__delegate(opts__10035__auto__, children__10036__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
om.dom.code = function() {
  var code__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var code = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11134__i = 0, G__11134__a = new Array(arguments.length - 1);
      while (G__11134__i < G__11134__a.length) {
        G__11134__a[G__11134__i] = arguments[G__11134__i + 1];
        ++G__11134__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11134__a, 0);
    }
    return code__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  code.cljs$lang$maxFixedArity = 1;
  code.cljs$lang$applyTo = function(arglist__11135) {
    var opts__10035__auto__ = cljs.core.first(arglist__11135);
    var children__10036__auto__ = cljs.core.rest(arglist__11135);
    return code__delegate(opts__10035__auto__, children__10036__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
om.dom.col = function() {
  var col__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var col = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11136__i = 0, G__11136__a = new Array(arguments.length - 1);
      while (G__11136__i < G__11136__a.length) {
        G__11136__a[G__11136__i] = arguments[G__11136__i + 1];
        ++G__11136__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11136__a, 0);
    }
    return col__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  col.cljs$lang$maxFixedArity = 1;
  col.cljs$lang$applyTo = function(arglist__11137) {
    var opts__10035__auto__ = cljs.core.first(arglist__11137);
    var children__10036__auto__ = cljs.core.rest(arglist__11137);
    return col__delegate(opts__10035__auto__, children__10036__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
om.dom.colgroup = function() {
  var colgroup__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var colgroup = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11138__i = 0, G__11138__a = new Array(arguments.length - 1);
      while (G__11138__i < G__11138__a.length) {
        G__11138__a[G__11138__i] = arguments[G__11138__i + 1];
        ++G__11138__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11138__a, 0);
    }
    return colgroup__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 1;
  colgroup.cljs$lang$applyTo = function(arglist__11139) {
    var opts__10035__auto__ = cljs.core.first(arglist__11139);
    var children__10036__auto__ = cljs.core.rest(arglist__11139);
    return colgroup__delegate(opts__10035__auto__, children__10036__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
om.dom.data = function() {
  var data__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var data = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11140__i = 0, G__11140__a = new Array(arguments.length - 1);
      while (G__11140__i < G__11140__a.length) {
        G__11140__a[G__11140__i] = arguments[G__11140__i + 1];
        ++G__11140__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11140__a, 0);
    }
    return data__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  data.cljs$lang$maxFixedArity = 1;
  data.cljs$lang$applyTo = function(arglist__11141) {
    var opts__10035__auto__ = cljs.core.first(arglist__11141);
    var children__10036__auto__ = cljs.core.rest(arglist__11141);
    return data__delegate(opts__10035__auto__, children__10036__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
om.dom.datalist = function() {
  var datalist__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var datalist = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11142__i = 0, G__11142__a = new Array(arguments.length - 1);
      while (G__11142__i < G__11142__a.length) {
        G__11142__a[G__11142__i] = arguments[G__11142__i + 1];
        ++G__11142__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11142__a, 0);
    }
    return datalist__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 1;
  datalist.cljs$lang$applyTo = function(arglist__11143) {
    var opts__10035__auto__ = cljs.core.first(arglist__11143);
    var children__10036__auto__ = cljs.core.rest(arglist__11143);
    return datalist__delegate(opts__10035__auto__, children__10036__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
om.dom.dd = function() {
  var dd__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var dd = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11144__i = 0, G__11144__a = new Array(arguments.length - 1);
      while (G__11144__i < G__11144__a.length) {
        G__11144__a[G__11144__i] = arguments[G__11144__i + 1];
        ++G__11144__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11144__a, 0);
    }
    return dd__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  dd.cljs$lang$maxFixedArity = 1;
  dd.cljs$lang$applyTo = function(arglist__11145) {
    var opts__10035__auto__ = cljs.core.first(arglist__11145);
    var children__10036__auto__ = cljs.core.rest(arglist__11145);
    return dd__delegate(opts__10035__auto__, children__10036__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
om.dom.del = function() {
  var del__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var del = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11146__i = 0, G__11146__a = new Array(arguments.length - 1);
      while (G__11146__i < G__11146__a.length) {
        G__11146__a[G__11146__i] = arguments[G__11146__i + 1];
        ++G__11146__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11146__a, 0);
    }
    return del__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  del.cljs$lang$maxFixedArity = 1;
  del.cljs$lang$applyTo = function(arglist__11147) {
    var opts__10035__auto__ = cljs.core.first(arglist__11147);
    var children__10036__auto__ = cljs.core.rest(arglist__11147);
    return del__delegate(opts__10035__auto__, children__10036__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
om.dom.dfn = function() {
  var dfn__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var dfn = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11148__i = 0, G__11148__a = new Array(arguments.length - 1);
      while (G__11148__i < G__11148__a.length) {
        G__11148__a[G__11148__i] = arguments[G__11148__i + 1];
        ++G__11148__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11148__a, 0);
    }
    return dfn__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 1;
  dfn.cljs$lang$applyTo = function(arglist__11149) {
    var opts__10035__auto__ = cljs.core.first(arglist__11149);
    var children__10036__auto__ = cljs.core.rest(arglist__11149);
    return dfn__delegate(opts__10035__auto__, children__10036__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
om.dom.div = function() {
  var div__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var div = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11150__i = 0, G__11150__a = new Array(arguments.length - 1);
      while (G__11150__i < G__11150__a.length) {
        G__11150__a[G__11150__i] = arguments[G__11150__i + 1];
        ++G__11150__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11150__a, 0);
    }
    return div__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  div.cljs$lang$maxFixedArity = 1;
  div.cljs$lang$applyTo = function(arglist__11151) {
    var opts__10035__auto__ = cljs.core.first(arglist__11151);
    var children__10036__auto__ = cljs.core.rest(arglist__11151);
    return div__delegate(opts__10035__auto__, children__10036__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
om.dom.dl = function() {
  var dl__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var dl = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11152__i = 0, G__11152__a = new Array(arguments.length - 1);
      while (G__11152__i < G__11152__a.length) {
        G__11152__a[G__11152__i] = arguments[G__11152__i + 1];
        ++G__11152__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11152__a, 0);
    }
    return dl__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  dl.cljs$lang$maxFixedArity = 1;
  dl.cljs$lang$applyTo = function(arglist__11153) {
    var opts__10035__auto__ = cljs.core.first(arglist__11153);
    var children__10036__auto__ = cljs.core.rest(arglist__11153);
    return dl__delegate(opts__10035__auto__, children__10036__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
om.dom.dt = function() {
  var dt__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var dt = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11154__i = 0, G__11154__a = new Array(arguments.length - 1);
      while (G__11154__i < G__11154__a.length) {
        G__11154__a[G__11154__i] = arguments[G__11154__i + 1];
        ++G__11154__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11154__a, 0);
    }
    return dt__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  dt.cljs$lang$maxFixedArity = 1;
  dt.cljs$lang$applyTo = function(arglist__11155) {
    var opts__10035__auto__ = cljs.core.first(arglist__11155);
    var children__10036__auto__ = cljs.core.rest(arglist__11155);
    return dt__delegate(opts__10035__auto__, children__10036__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
om.dom.em = function() {
  var em__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var em = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11156__i = 0, G__11156__a = new Array(arguments.length - 1);
      while (G__11156__i < G__11156__a.length) {
        G__11156__a[G__11156__i] = arguments[G__11156__i + 1];
        ++G__11156__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11156__a, 0);
    }
    return em__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  em.cljs$lang$maxFixedArity = 1;
  em.cljs$lang$applyTo = function(arglist__11157) {
    var opts__10035__auto__ = cljs.core.first(arglist__11157);
    var children__10036__auto__ = cljs.core.rest(arglist__11157);
    return em__delegate(opts__10035__auto__, children__10036__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
om.dom.embed = function() {
  var embed__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var embed = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11158__i = 0, G__11158__a = new Array(arguments.length - 1);
      while (G__11158__i < G__11158__a.length) {
        G__11158__a[G__11158__i] = arguments[G__11158__i + 1];
        ++G__11158__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11158__a, 0);
    }
    return embed__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  embed.cljs$lang$maxFixedArity = 1;
  embed.cljs$lang$applyTo = function(arglist__11159) {
    var opts__10035__auto__ = cljs.core.first(arglist__11159);
    var children__10036__auto__ = cljs.core.rest(arglist__11159);
    return embed__delegate(opts__10035__auto__, children__10036__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
om.dom.fieldset = function() {
  var fieldset__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var fieldset = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11160__i = 0, G__11160__a = new Array(arguments.length - 1);
      while (G__11160__i < G__11160__a.length) {
        G__11160__a[G__11160__i] = arguments[G__11160__i + 1];
        ++G__11160__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11160__a, 0);
    }
    return fieldset__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 1;
  fieldset.cljs$lang$applyTo = function(arglist__11161) {
    var opts__10035__auto__ = cljs.core.first(arglist__11161);
    var children__10036__auto__ = cljs.core.rest(arglist__11161);
    return fieldset__delegate(opts__10035__auto__, children__10036__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
om.dom.figcaption = function() {
  var figcaption__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var figcaption = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11162__i = 0, G__11162__a = new Array(arguments.length - 1);
      while (G__11162__i < G__11162__a.length) {
        G__11162__a[G__11162__i] = arguments[G__11162__i + 1];
        ++G__11162__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11162__a, 0);
    }
    return figcaption__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 1;
  figcaption.cljs$lang$applyTo = function(arglist__11163) {
    var opts__10035__auto__ = cljs.core.first(arglist__11163);
    var children__10036__auto__ = cljs.core.rest(arglist__11163);
    return figcaption__delegate(opts__10035__auto__, children__10036__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
om.dom.figure = function() {
  var figure__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var figure = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11164__i = 0, G__11164__a = new Array(arguments.length - 1);
      while (G__11164__i < G__11164__a.length) {
        G__11164__a[G__11164__i] = arguments[G__11164__i + 1];
        ++G__11164__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11164__a, 0);
    }
    return figure__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  figure.cljs$lang$maxFixedArity = 1;
  figure.cljs$lang$applyTo = function(arglist__11165) {
    var opts__10035__auto__ = cljs.core.first(arglist__11165);
    var children__10036__auto__ = cljs.core.rest(arglist__11165);
    return figure__delegate(opts__10035__auto__, children__10036__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
om.dom.footer = function() {
  var footer__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var footer = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11166__i = 0, G__11166__a = new Array(arguments.length - 1);
      while (G__11166__i < G__11166__a.length) {
        G__11166__a[G__11166__i] = arguments[G__11166__i + 1];
        ++G__11166__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11166__a, 0);
    }
    return footer__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  footer.cljs$lang$maxFixedArity = 1;
  footer.cljs$lang$applyTo = function(arglist__11167) {
    var opts__10035__auto__ = cljs.core.first(arglist__11167);
    var children__10036__auto__ = cljs.core.rest(arglist__11167);
    return footer__delegate(opts__10035__auto__, children__10036__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
om.dom.form = function() {
  var form__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var form = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11168__i = 0, G__11168__a = new Array(arguments.length - 1);
      while (G__11168__i < G__11168__a.length) {
        G__11168__a[G__11168__i] = arguments[G__11168__i + 1];
        ++G__11168__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11168__a, 0);
    }
    return form__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  form.cljs$lang$maxFixedArity = 1;
  form.cljs$lang$applyTo = function(arglist__11169) {
    var opts__10035__auto__ = cljs.core.first(arglist__11169);
    var children__10036__auto__ = cljs.core.rest(arglist__11169);
    return form__delegate(opts__10035__auto__, children__10036__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
om.dom.h1 = function() {
  var h1__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var h1 = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11170__i = 0, G__11170__a = new Array(arguments.length - 1);
      while (G__11170__i < G__11170__a.length) {
        G__11170__a[G__11170__i] = arguments[G__11170__i + 1];
        ++G__11170__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11170__a, 0);
    }
    return h1__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  h1.cljs$lang$maxFixedArity = 1;
  h1.cljs$lang$applyTo = function(arglist__11171) {
    var opts__10035__auto__ = cljs.core.first(arglist__11171);
    var children__10036__auto__ = cljs.core.rest(arglist__11171);
    return h1__delegate(opts__10035__auto__, children__10036__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
om.dom.h2 = function() {
  var h2__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var h2 = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11172__i = 0, G__11172__a = new Array(arguments.length - 1);
      while (G__11172__i < G__11172__a.length) {
        G__11172__a[G__11172__i] = arguments[G__11172__i + 1];
        ++G__11172__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11172__a, 0);
    }
    return h2__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  h2.cljs$lang$maxFixedArity = 1;
  h2.cljs$lang$applyTo = function(arglist__11173) {
    var opts__10035__auto__ = cljs.core.first(arglist__11173);
    var children__10036__auto__ = cljs.core.rest(arglist__11173);
    return h2__delegate(opts__10035__auto__, children__10036__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
om.dom.h3 = function() {
  var h3__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var h3 = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11174__i = 0, G__11174__a = new Array(arguments.length - 1);
      while (G__11174__i < G__11174__a.length) {
        G__11174__a[G__11174__i] = arguments[G__11174__i + 1];
        ++G__11174__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11174__a, 0);
    }
    return h3__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  h3.cljs$lang$maxFixedArity = 1;
  h3.cljs$lang$applyTo = function(arglist__11175) {
    var opts__10035__auto__ = cljs.core.first(arglist__11175);
    var children__10036__auto__ = cljs.core.rest(arglist__11175);
    return h3__delegate(opts__10035__auto__, children__10036__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
om.dom.h4 = function() {
  var h4__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var h4 = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11176__i = 0, G__11176__a = new Array(arguments.length - 1);
      while (G__11176__i < G__11176__a.length) {
        G__11176__a[G__11176__i] = arguments[G__11176__i + 1];
        ++G__11176__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11176__a, 0);
    }
    return h4__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  h4.cljs$lang$maxFixedArity = 1;
  h4.cljs$lang$applyTo = function(arglist__11177) {
    var opts__10035__auto__ = cljs.core.first(arglist__11177);
    var children__10036__auto__ = cljs.core.rest(arglist__11177);
    return h4__delegate(opts__10035__auto__, children__10036__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
om.dom.h5 = function() {
  var h5__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var h5 = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11178__i = 0, G__11178__a = new Array(arguments.length - 1);
      while (G__11178__i < G__11178__a.length) {
        G__11178__a[G__11178__i] = arguments[G__11178__i + 1];
        ++G__11178__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11178__a, 0);
    }
    return h5__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  h5.cljs$lang$maxFixedArity = 1;
  h5.cljs$lang$applyTo = function(arglist__11179) {
    var opts__10035__auto__ = cljs.core.first(arglist__11179);
    var children__10036__auto__ = cljs.core.rest(arglist__11179);
    return h5__delegate(opts__10035__auto__, children__10036__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
om.dom.h6 = function() {
  var h6__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var h6 = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11180__i = 0, G__11180__a = new Array(arguments.length - 1);
      while (G__11180__i < G__11180__a.length) {
        G__11180__a[G__11180__i] = arguments[G__11180__i + 1];
        ++G__11180__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11180__a, 0);
    }
    return h6__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  h6.cljs$lang$maxFixedArity = 1;
  h6.cljs$lang$applyTo = function(arglist__11181) {
    var opts__10035__auto__ = cljs.core.first(arglist__11181);
    var children__10036__auto__ = cljs.core.rest(arglist__11181);
    return h6__delegate(opts__10035__auto__, children__10036__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
om.dom.head = function() {
  var head__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var head = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11182__i = 0, G__11182__a = new Array(arguments.length - 1);
      while (G__11182__i < G__11182__a.length) {
        G__11182__a[G__11182__i] = arguments[G__11182__i + 1];
        ++G__11182__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11182__a, 0);
    }
    return head__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  head.cljs$lang$maxFixedArity = 1;
  head.cljs$lang$applyTo = function(arglist__11183) {
    var opts__10035__auto__ = cljs.core.first(arglist__11183);
    var children__10036__auto__ = cljs.core.rest(arglist__11183);
    return head__delegate(opts__10035__auto__, children__10036__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
om.dom.header = function() {
  var header__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var header = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11184__i = 0, G__11184__a = new Array(arguments.length - 1);
      while (G__11184__i < G__11184__a.length) {
        G__11184__a[G__11184__i] = arguments[G__11184__i + 1];
        ++G__11184__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11184__a, 0);
    }
    return header__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  header.cljs$lang$maxFixedArity = 1;
  header.cljs$lang$applyTo = function(arglist__11185) {
    var opts__10035__auto__ = cljs.core.first(arglist__11185);
    var children__10036__auto__ = cljs.core.rest(arglist__11185);
    return header__delegate(opts__10035__auto__, children__10036__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
om.dom.hr = function() {
  var hr__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var hr = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11186__i = 0, G__11186__a = new Array(arguments.length - 1);
      while (G__11186__i < G__11186__a.length) {
        G__11186__a[G__11186__i] = arguments[G__11186__i + 1];
        ++G__11186__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11186__a, 0);
    }
    return hr__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  hr.cljs$lang$maxFixedArity = 1;
  hr.cljs$lang$applyTo = function(arglist__11187) {
    var opts__10035__auto__ = cljs.core.first(arglist__11187);
    var children__10036__auto__ = cljs.core.rest(arglist__11187);
    return hr__delegate(opts__10035__auto__, children__10036__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
om.dom.html = function() {
  var html__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var html = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11188__i = 0, G__11188__a = new Array(arguments.length - 1);
      while (G__11188__i < G__11188__a.length) {
        G__11188__a[G__11188__i] = arguments[G__11188__i + 1];
        ++G__11188__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11188__a, 0);
    }
    return html__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  html.cljs$lang$maxFixedArity = 1;
  html.cljs$lang$applyTo = function(arglist__11189) {
    var opts__10035__auto__ = cljs.core.first(arglist__11189);
    var children__10036__auto__ = cljs.core.rest(arglist__11189);
    return html__delegate(opts__10035__auto__, children__10036__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
om.dom.i = function() {
  var i__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var i = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11190__i = 0, G__11190__a = new Array(arguments.length - 1);
      while (G__11190__i < G__11190__a.length) {
        G__11190__a[G__11190__i] = arguments[G__11190__i + 1];
        ++G__11190__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11190__a, 0);
    }
    return i__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  i.cljs$lang$maxFixedArity = 1;
  i.cljs$lang$applyTo = function(arglist__11191) {
    var opts__10035__auto__ = cljs.core.first(arglist__11191);
    var children__10036__auto__ = cljs.core.rest(arglist__11191);
    return i__delegate(opts__10035__auto__, children__10036__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
om.dom.iframe = function() {
  var iframe__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var iframe = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11192__i = 0, G__11192__a = new Array(arguments.length - 1);
      while (G__11192__i < G__11192__a.length) {
        G__11192__a[G__11192__i] = arguments[G__11192__i + 1];
        ++G__11192__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11192__a, 0);
    }
    return iframe__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 1;
  iframe.cljs$lang$applyTo = function(arglist__11193) {
    var opts__10035__auto__ = cljs.core.first(arglist__11193);
    var children__10036__auto__ = cljs.core.rest(arglist__11193);
    return iframe__delegate(opts__10035__auto__, children__10036__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
om.dom.img = function() {
  var img__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var img = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11194__i = 0, G__11194__a = new Array(arguments.length - 1);
      while (G__11194__i < G__11194__a.length) {
        G__11194__a[G__11194__i] = arguments[G__11194__i + 1];
        ++G__11194__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11194__a, 0);
    }
    return img__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  img.cljs$lang$maxFixedArity = 1;
  img.cljs$lang$applyTo = function(arglist__11195) {
    var opts__10035__auto__ = cljs.core.first(arglist__11195);
    var children__10036__auto__ = cljs.core.rest(arglist__11195);
    return img__delegate(opts__10035__auto__, children__10036__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
om.dom.ins = function() {
  var ins__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var ins = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11196__i = 0, G__11196__a = new Array(arguments.length - 1);
      while (G__11196__i < G__11196__a.length) {
        G__11196__a[G__11196__i] = arguments[G__11196__i + 1];
        ++G__11196__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11196__a, 0);
    }
    return ins__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  ins.cljs$lang$maxFixedArity = 1;
  ins.cljs$lang$applyTo = function(arglist__11197) {
    var opts__10035__auto__ = cljs.core.first(arglist__11197);
    var children__10036__auto__ = cljs.core.rest(arglist__11197);
    return ins__delegate(opts__10035__auto__, children__10036__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
om.dom.kbd = function() {
  var kbd__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var kbd = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11198__i = 0, G__11198__a = new Array(arguments.length - 1);
      while (G__11198__i < G__11198__a.length) {
        G__11198__a[G__11198__i] = arguments[G__11198__i + 1];
        ++G__11198__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11198__a, 0);
    }
    return kbd__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 1;
  kbd.cljs$lang$applyTo = function(arglist__11199) {
    var opts__10035__auto__ = cljs.core.first(arglist__11199);
    var children__10036__auto__ = cljs.core.rest(arglist__11199);
    return kbd__delegate(opts__10035__auto__, children__10036__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
om.dom.keygen = function() {
  var keygen__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var keygen = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11200__i = 0, G__11200__a = new Array(arguments.length - 1);
      while (G__11200__i < G__11200__a.length) {
        G__11200__a[G__11200__i] = arguments[G__11200__i + 1];
        ++G__11200__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11200__a, 0);
    }
    return keygen__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 1;
  keygen.cljs$lang$applyTo = function(arglist__11201) {
    var opts__10035__auto__ = cljs.core.first(arglist__11201);
    var children__10036__auto__ = cljs.core.rest(arglist__11201);
    return keygen__delegate(opts__10035__auto__, children__10036__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
om.dom.label = function() {
  var label__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var label = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11202__i = 0, G__11202__a = new Array(arguments.length - 1);
      while (G__11202__i < G__11202__a.length) {
        G__11202__a[G__11202__i] = arguments[G__11202__i + 1];
        ++G__11202__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11202__a, 0);
    }
    return label__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  label.cljs$lang$maxFixedArity = 1;
  label.cljs$lang$applyTo = function(arglist__11203) {
    var opts__10035__auto__ = cljs.core.first(arglist__11203);
    var children__10036__auto__ = cljs.core.rest(arglist__11203);
    return label__delegate(opts__10035__auto__, children__10036__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
om.dom.legend = function() {
  var legend__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var legend = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11204__i = 0, G__11204__a = new Array(arguments.length - 1);
      while (G__11204__i < G__11204__a.length) {
        G__11204__a[G__11204__i] = arguments[G__11204__i + 1];
        ++G__11204__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11204__a, 0);
    }
    return legend__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  legend.cljs$lang$maxFixedArity = 1;
  legend.cljs$lang$applyTo = function(arglist__11205) {
    var opts__10035__auto__ = cljs.core.first(arglist__11205);
    var children__10036__auto__ = cljs.core.rest(arglist__11205);
    return legend__delegate(opts__10035__auto__, children__10036__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
om.dom.li = function() {
  var li__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var li = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11206__i = 0, G__11206__a = new Array(arguments.length - 1);
      while (G__11206__i < G__11206__a.length) {
        G__11206__a[G__11206__i] = arguments[G__11206__i + 1];
        ++G__11206__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11206__a, 0);
    }
    return li__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  li.cljs$lang$maxFixedArity = 1;
  li.cljs$lang$applyTo = function(arglist__11207) {
    var opts__10035__auto__ = cljs.core.first(arglist__11207);
    var children__10036__auto__ = cljs.core.rest(arglist__11207);
    return li__delegate(opts__10035__auto__, children__10036__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
om.dom.link = function() {
  var link__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var link = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11208__i = 0, G__11208__a = new Array(arguments.length - 1);
      while (G__11208__i < G__11208__a.length) {
        G__11208__a[G__11208__i] = arguments[G__11208__i + 1];
        ++G__11208__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11208__a, 0);
    }
    return link__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  link.cljs$lang$maxFixedArity = 1;
  link.cljs$lang$applyTo = function(arglist__11209) {
    var opts__10035__auto__ = cljs.core.first(arglist__11209);
    var children__10036__auto__ = cljs.core.rest(arglist__11209);
    return link__delegate(opts__10035__auto__, children__10036__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
om.dom.main = function() {
  var main__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var main = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11210__i = 0, G__11210__a = new Array(arguments.length - 1);
      while (G__11210__i < G__11210__a.length) {
        G__11210__a[G__11210__i] = arguments[G__11210__i + 1];
        ++G__11210__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11210__a, 0);
    }
    return main__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  main.cljs$lang$maxFixedArity = 1;
  main.cljs$lang$applyTo = function(arglist__11211) {
    var opts__10035__auto__ = cljs.core.first(arglist__11211);
    var children__10036__auto__ = cljs.core.rest(arglist__11211);
    return main__delegate(opts__10035__auto__, children__10036__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
om.dom.map = function() {
  var map__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var map = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11212__i = 0, G__11212__a = new Array(arguments.length - 1);
      while (G__11212__i < G__11212__a.length) {
        G__11212__a[G__11212__i] = arguments[G__11212__i + 1];
        ++G__11212__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11212__a, 0);
    }
    return map__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  map.cljs$lang$maxFixedArity = 1;
  map.cljs$lang$applyTo = function(arglist__11213) {
    var opts__10035__auto__ = cljs.core.first(arglist__11213);
    var children__10036__auto__ = cljs.core.rest(arglist__11213);
    return map__delegate(opts__10035__auto__, children__10036__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
om.dom.mark = function() {
  var mark__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var mark = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11214__i = 0, G__11214__a = new Array(arguments.length - 1);
      while (G__11214__i < G__11214__a.length) {
        G__11214__a[G__11214__i] = arguments[G__11214__i + 1];
        ++G__11214__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11214__a, 0);
    }
    return mark__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  mark.cljs$lang$maxFixedArity = 1;
  mark.cljs$lang$applyTo = function(arglist__11215) {
    var opts__10035__auto__ = cljs.core.first(arglist__11215);
    var children__10036__auto__ = cljs.core.rest(arglist__11215);
    return mark__delegate(opts__10035__auto__, children__10036__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
om.dom.marquee = function() {
  var marquee__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.marquee.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var marquee = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11216__i = 0, G__11216__a = new Array(arguments.length - 1);
      while (G__11216__i < G__11216__a.length) {
        G__11216__a[G__11216__i] = arguments[G__11216__i + 1];
        ++G__11216__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11216__a, 0);
    }
    return marquee__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  marquee.cljs$lang$maxFixedArity = 1;
  marquee.cljs$lang$applyTo = function(arglist__11217) {
    var opts__10035__auto__ = cljs.core.first(arglist__11217);
    var children__10036__auto__ = cljs.core.rest(arglist__11217);
    return marquee__delegate(opts__10035__auto__, children__10036__auto__);
  };
  marquee.cljs$core$IFn$_invoke$arity$variadic = marquee__delegate;
  return marquee;
}();
om.dom.menu = function() {
  var menu__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var menu = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11218__i = 0, G__11218__a = new Array(arguments.length - 1);
      while (G__11218__i < G__11218__a.length) {
        G__11218__a[G__11218__i] = arguments[G__11218__i + 1];
        ++G__11218__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11218__a, 0);
    }
    return menu__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  menu.cljs$lang$maxFixedArity = 1;
  menu.cljs$lang$applyTo = function(arglist__11219) {
    var opts__10035__auto__ = cljs.core.first(arglist__11219);
    var children__10036__auto__ = cljs.core.rest(arglist__11219);
    return menu__delegate(opts__10035__auto__, children__10036__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
om.dom.menuitem = function() {
  var menuitem__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var menuitem = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11220__i = 0, G__11220__a = new Array(arguments.length - 1);
      while (G__11220__i < G__11220__a.length) {
        G__11220__a[G__11220__i] = arguments[G__11220__i + 1];
        ++G__11220__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11220__a, 0);
    }
    return menuitem__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 1;
  menuitem.cljs$lang$applyTo = function(arglist__11221) {
    var opts__10035__auto__ = cljs.core.first(arglist__11221);
    var children__10036__auto__ = cljs.core.rest(arglist__11221);
    return menuitem__delegate(opts__10035__auto__, children__10036__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
om.dom.meta = function() {
  var meta__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var meta = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11222__i = 0, G__11222__a = new Array(arguments.length - 1);
      while (G__11222__i < G__11222__a.length) {
        G__11222__a[G__11222__i] = arguments[G__11222__i + 1];
        ++G__11222__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11222__a, 0);
    }
    return meta__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  meta.cljs$lang$maxFixedArity = 1;
  meta.cljs$lang$applyTo = function(arglist__11223) {
    var opts__10035__auto__ = cljs.core.first(arglist__11223);
    var children__10036__auto__ = cljs.core.rest(arglist__11223);
    return meta__delegate(opts__10035__auto__, children__10036__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
om.dom.meter = function() {
  var meter__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var meter = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11224__i = 0, G__11224__a = new Array(arguments.length - 1);
      while (G__11224__i < G__11224__a.length) {
        G__11224__a[G__11224__i] = arguments[G__11224__i + 1];
        ++G__11224__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11224__a, 0);
    }
    return meter__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  meter.cljs$lang$maxFixedArity = 1;
  meter.cljs$lang$applyTo = function(arglist__11225) {
    var opts__10035__auto__ = cljs.core.first(arglist__11225);
    var children__10036__auto__ = cljs.core.rest(arglist__11225);
    return meter__delegate(opts__10035__auto__, children__10036__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
om.dom.nav = function() {
  var nav__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var nav = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11226__i = 0, G__11226__a = new Array(arguments.length - 1);
      while (G__11226__i < G__11226__a.length) {
        G__11226__a[G__11226__i] = arguments[G__11226__i + 1];
        ++G__11226__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11226__a, 0);
    }
    return nav__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  nav.cljs$lang$maxFixedArity = 1;
  nav.cljs$lang$applyTo = function(arglist__11227) {
    var opts__10035__auto__ = cljs.core.first(arglist__11227);
    var children__10036__auto__ = cljs.core.rest(arglist__11227);
    return nav__delegate(opts__10035__auto__, children__10036__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
om.dom.noscript = function() {
  var noscript__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var noscript = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11228__i = 0, G__11228__a = new Array(arguments.length - 1);
      while (G__11228__i < G__11228__a.length) {
        G__11228__a[G__11228__i] = arguments[G__11228__i + 1];
        ++G__11228__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11228__a, 0);
    }
    return noscript__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 1;
  noscript.cljs$lang$applyTo = function(arglist__11229) {
    var opts__10035__auto__ = cljs.core.first(arglist__11229);
    var children__10036__auto__ = cljs.core.rest(arglist__11229);
    return noscript__delegate(opts__10035__auto__, children__10036__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
om.dom.object = function() {
  var object__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var object = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11230__i = 0, G__11230__a = new Array(arguments.length - 1);
      while (G__11230__i < G__11230__a.length) {
        G__11230__a[G__11230__i] = arguments[G__11230__i + 1];
        ++G__11230__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11230__a, 0);
    }
    return object__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  object.cljs$lang$maxFixedArity = 1;
  object.cljs$lang$applyTo = function(arglist__11231) {
    var opts__10035__auto__ = cljs.core.first(arglist__11231);
    var children__10036__auto__ = cljs.core.rest(arglist__11231);
    return object__delegate(opts__10035__auto__, children__10036__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
om.dom.ol = function() {
  var ol__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var ol = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11232__i = 0, G__11232__a = new Array(arguments.length - 1);
      while (G__11232__i < G__11232__a.length) {
        G__11232__a[G__11232__i] = arguments[G__11232__i + 1];
        ++G__11232__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11232__a, 0);
    }
    return ol__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  ol.cljs$lang$maxFixedArity = 1;
  ol.cljs$lang$applyTo = function(arglist__11233) {
    var opts__10035__auto__ = cljs.core.first(arglist__11233);
    var children__10036__auto__ = cljs.core.rest(arglist__11233);
    return ol__delegate(opts__10035__auto__, children__10036__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
om.dom.optgroup = function() {
  var optgroup__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var optgroup = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11234__i = 0, G__11234__a = new Array(arguments.length - 1);
      while (G__11234__i < G__11234__a.length) {
        G__11234__a[G__11234__i] = arguments[G__11234__i + 1];
        ++G__11234__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11234__a, 0);
    }
    return optgroup__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 1;
  optgroup.cljs$lang$applyTo = function(arglist__11235) {
    var opts__10035__auto__ = cljs.core.first(arglist__11235);
    var children__10036__auto__ = cljs.core.rest(arglist__11235);
    return optgroup__delegate(opts__10035__auto__, children__10036__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
om.dom.output = function() {
  var output__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var output = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11236__i = 0, G__11236__a = new Array(arguments.length - 1);
      while (G__11236__i < G__11236__a.length) {
        G__11236__a[G__11236__i] = arguments[G__11236__i + 1];
        ++G__11236__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11236__a, 0);
    }
    return output__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  output.cljs$lang$maxFixedArity = 1;
  output.cljs$lang$applyTo = function(arglist__11237) {
    var opts__10035__auto__ = cljs.core.first(arglist__11237);
    var children__10036__auto__ = cljs.core.rest(arglist__11237);
    return output__delegate(opts__10035__auto__, children__10036__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
om.dom.p = function() {
  var p__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var p = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11238__i = 0, G__11238__a = new Array(arguments.length - 1);
      while (G__11238__i < G__11238__a.length) {
        G__11238__a[G__11238__i] = arguments[G__11238__i + 1];
        ++G__11238__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11238__a, 0);
    }
    return p__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  p.cljs$lang$maxFixedArity = 1;
  p.cljs$lang$applyTo = function(arglist__11239) {
    var opts__10035__auto__ = cljs.core.first(arglist__11239);
    var children__10036__auto__ = cljs.core.rest(arglist__11239);
    return p__delegate(opts__10035__auto__, children__10036__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
om.dom.param = function() {
  var param__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var param = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11240__i = 0, G__11240__a = new Array(arguments.length - 1);
      while (G__11240__i < G__11240__a.length) {
        G__11240__a[G__11240__i] = arguments[G__11240__i + 1];
        ++G__11240__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11240__a, 0);
    }
    return param__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  param.cljs$lang$maxFixedArity = 1;
  param.cljs$lang$applyTo = function(arglist__11241) {
    var opts__10035__auto__ = cljs.core.first(arglist__11241);
    var children__10036__auto__ = cljs.core.rest(arglist__11241);
    return param__delegate(opts__10035__auto__, children__10036__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
om.dom.pre = function() {
  var pre__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var pre = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11242__i = 0, G__11242__a = new Array(arguments.length - 1);
      while (G__11242__i < G__11242__a.length) {
        G__11242__a[G__11242__i] = arguments[G__11242__i + 1];
        ++G__11242__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11242__a, 0);
    }
    return pre__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  pre.cljs$lang$maxFixedArity = 1;
  pre.cljs$lang$applyTo = function(arglist__11243) {
    var opts__10035__auto__ = cljs.core.first(arglist__11243);
    var children__10036__auto__ = cljs.core.rest(arglist__11243);
    return pre__delegate(opts__10035__auto__, children__10036__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
om.dom.progress = function() {
  var progress__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var progress = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11244__i = 0, G__11244__a = new Array(arguments.length - 1);
      while (G__11244__i < G__11244__a.length) {
        G__11244__a[G__11244__i] = arguments[G__11244__i + 1];
        ++G__11244__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11244__a, 0);
    }
    return progress__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  progress.cljs$lang$maxFixedArity = 1;
  progress.cljs$lang$applyTo = function(arglist__11245) {
    var opts__10035__auto__ = cljs.core.first(arglist__11245);
    var children__10036__auto__ = cljs.core.rest(arglist__11245);
    return progress__delegate(opts__10035__auto__, children__10036__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
om.dom.q = function() {
  var q__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var q = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11246__i = 0, G__11246__a = new Array(arguments.length - 1);
      while (G__11246__i < G__11246__a.length) {
        G__11246__a[G__11246__i] = arguments[G__11246__i + 1];
        ++G__11246__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11246__a, 0);
    }
    return q__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__11247) {
    var opts__10035__auto__ = cljs.core.first(arglist__11247);
    var children__10036__auto__ = cljs.core.rest(arglist__11247);
    return q__delegate(opts__10035__auto__, children__10036__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
om.dom.rp = function() {
  var rp__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var rp = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11248__i = 0, G__11248__a = new Array(arguments.length - 1);
      while (G__11248__i < G__11248__a.length) {
        G__11248__a[G__11248__i] = arguments[G__11248__i + 1];
        ++G__11248__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11248__a, 0);
    }
    return rp__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  rp.cljs$lang$maxFixedArity = 1;
  rp.cljs$lang$applyTo = function(arglist__11249) {
    var opts__10035__auto__ = cljs.core.first(arglist__11249);
    var children__10036__auto__ = cljs.core.rest(arglist__11249);
    return rp__delegate(opts__10035__auto__, children__10036__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
om.dom.rt = function() {
  var rt__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var rt = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11250__i = 0, G__11250__a = new Array(arguments.length - 1);
      while (G__11250__i < G__11250__a.length) {
        G__11250__a[G__11250__i] = arguments[G__11250__i + 1];
        ++G__11250__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11250__a, 0);
    }
    return rt__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  rt.cljs$lang$maxFixedArity = 1;
  rt.cljs$lang$applyTo = function(arglist__11251) {
    var opts__10035__auto__ = cljs.core.first(arglist__11251);
    var children__10036__auto__ = cljs.core.rest(arglist__11251);
    return rt__delegate(opts__10035__auto__, children__10036__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
om.dom.ruby = function() {
  var ruby__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var ruby = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11252__i = 0, G__11252__a = new Array(arguments.length - 1);
      while (G__11252__i < G__11252__a.length) {
        G__11252__a[G__11252__i] = arguments[G__11252__i + 1];
        ++G__11252__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11252__a, 0);
    }
    return ruby__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 1;
  ruby.cljs$lang$applyTo = function(arglist__11253) {
    var opts__10035__auto__ = cljs.core.first(arglist__11253);
    var children__10036__auto__ = cljs.core.rest(arglist__11253);
    return ruby__delegate(opts__10035__auto__, children__10036__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
om.dom.s = function() {
  var s__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var s = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11254__i = 0, G__11254__a = new Array(arguments.length - 1);
      while (G__11254__i < G__11254__a.length) {
        G__11254__a[G__11254__i] = arguments[G__11254__i + 1];
        ++G__11254__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11254__a, 0);
    }
    return s__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  s.cljs$lang$maxFixedArity = 1;
  s.cljs$lang$applyTo = function(arglist__11255) {
    var opts__10035__auto__ = cljs.core.first(arglist__11255);
    var children__10036__auto__ = cljs.core.rest(arglist__11255);
    return s__delegate(opts__10035__auto__, children__10036__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
om.dom.samp = function() {
  var samp__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var samp = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11256__i = 0, G__11256__a = new Array(arguments.length - 1);
      while (G__11256__i < G__11256__a.length) {
        G__11256__a[G__11256__i] = arguments[G__11256__i + 1];
        ++G__11256__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11256__a, 0);
    }
    return samp__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  samp.cljs$lang$maxFixedArity = 1;
  samp.cljs$lang$applyTo = function(arglist__11257) {
    var opts__10035__auto__ = cljs.core.first(arglist__11257);
    var children__10036__auto__ = cljs.core.rest(arglist__11257);
    return samp__delegate(opts__10035__auto__, children__10036__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
om.dom.script = function() {
  var script__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var script = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11258__i = 0, G__11258__a = new Array(arguments.length - 1);
      while (G__11258__i < G__11258__a.length) {
        G__11258__a[G__11258__i] = arguments[G__11258__i + 1];
        ++G__11258__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11258__a, 0);
    }
    return script__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  script.cljs$lang$maxFixedArity = 1;
  script.cljs$lang$applyTo = function(arglist__11259) {
    var opts__10035__auto__ = cljs.core.first(arglist__11259);
    var children__10036__auto__ = cljs.core.rest(arglist__11259);
    return script__delegate(opts__10035__auto__, children__10036__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
om.dom.section = function() {
  var section__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var section = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11260__i = 0, G__11260__a = new Array(arguments.length - 1);
      while (G__11260__i < G__11260__a.length) {
        G__11260__a[G__11260__i] = arguments[G__11260__i + 1];
        ++G__11260__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11260__a, 0);
    }
    return section__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  section.cljs$lang$maxFixedArity = 1;
  section.cljs$lang$applyTo = function(arglist__11261) {
    var opts__10035__auto__ = cljs.core.first(arglist__11261);
    var children__10036__auto__ = cljs.core.rest(arglist__11261);
    return section__delegate(opts__10035__auto__, children__10036__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
om.dom.select = function() {
  var select__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var select = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11262__i = 0, G__11262__a = new Array(arguments.length - 1);
      while (G__11262__i < G__11262__a.length) {
        G__11262__a[G__11262__i] = arguments[G__11262__i + 1];
        ++G__11262__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11262__a, 0);
    }
    return select__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  select.cljs$lang$maxFixedArity = 1;
  select.cljs$lang$applyTo = function(arglist__11263) {
    var opts__10035__auto__ = cljs.core.first(arglist__11263);
    var children__10036__auto__ = cljs.core.rest(arglist__11263);
    return select__delegate(opts__10035__auto__, children__10036__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
om.dom.small = function() {
  var small__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var small = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11264__i = 0, G__11264__a = new Array(arguments.length - 1);
      while (G__11264__i < G__11264__a.length) {
        G__11264__a[G__11264__i] = arguments[G__11264__i + 1];
        ++G__11264__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11264__a, 0);
    }
    return small__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  small.cljs$lang$maxFixedArity = 1;
  small.cljs$lang$applyTo = function(arglist__11265) {
    var opts__10035__auto__ = cljs.core.first(arglist__11265);
    var children__10036__auto__ = cljs.core.rest(arglist__11265);
    return small__delegate(opts__10035__auto__, children__10036__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
om.dom.source = function() {
  var source__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var source = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11266__i = 0, G__11266__a = new Array(arguments.length - 1);
      while (G__11266__i < G__11266__a.length) {
        G__11266__a[G__11266__i] = arguments[G__11266__i + 1];
        ++G__11266__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11266__a, 0);
    }
    return source__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  source.cljs$lang$maxFixedArity = 1;
  source.cljs$lang$applyTo = function(arglist__11267) {
    var opts__10035__auto__ = cljs.core.first(arglist__11267);
    var children__10036__auto__ = cljs.core.rest(arglist__11267);
    return source__delegate(opts__10035__auto__, children__10036__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
om.dom.span = function() {
  var span__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var span = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11268__i = 0, G__11268__a = new Array(arguments.length - 1);
      while (G__11268__i < G__11268__a.length) {
        G__11268__a[G__11268__i] = arguments[G__11268__i + 1];
        ++G__11268__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11268__a, 0);
    }
    return span__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  span.cljs$lang$maxFixedArity = 1;
  span.cljs$lang$applyTo = function(arglist__11269) {
    var opts__10035__auto__ = cljs.core.first(arglist__11269);
    var children__10036__auto__ = cljs.core.rest(arglist__11269);
    return span__delegate(opts__10035__auto__, children__10036__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
om.dom.strong = function() {
  var strong__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var strong = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11270__i = 0, G__11270__a = new Array(arguments.length - 1);
      while (G__11270__i < G__11270__a.length) {
        G__11270__a[G__11270__i] = arguments[G__11270__i + 1];
        ++G__11270__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11270__a, 0);
    }
    return strong__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  strong.cljs$lang$maxFixedArity = 1;
  strong.cljs$lang$applyTo = function(arglist__11271) {
    var opts__10035__auto__ = cljs.core.first(arglist__11271);
    var children__10036__auto__ = cljs.core.rest(arglist__11271);
    return strong__delegate(opts__10035__auto__, children__10036__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
om.dom.style = function() {
  var style__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var style = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11272__i = 0, G__11272__a = new Array(arguments.length - 1);
      while (G__11272__i < G__11272__a.length) {
        G__11272__a[G__11272__i] = arguments[G__11272__i + 1];
        ++G__11272__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11272__a, 0);
    }
    return style__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  style.cljs$lang$maxFixedArity = 1;
  style.cljs$lang$applyTo = function(arglist__11273) {
    var opts__10035__auto__ = cljs.core.first(arglist__11273);
    var children__10036__auto__ = cljs.core.rest(arglist__11273);
    return style__delegate(opts__10035__auto__, children__10036__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
om.dom.sub = function() {
  var sub__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var sub = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11274__i = 0, G__11274__a = new Array(arguments.length - 1);
      while (G__11274__i < G__11274__a.length) {
        G__11274__a[G__11274__i] = arguments[G__11274__i + 1];
        ++G__11274__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11274__a, 0);
    }
    return sub__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  sub.cljs$lang$maxFixedArity = 1;
  sub.cljs$lang$applyTo = function(arglist__11275) {
    var opts__10035__auto__ = cljs.core.first(arglist__11275);
    var children__10036__auto__ = cljs.core.rest(arglist__11275);
    return sub__delegate(opts__10035__auto__, children__10036__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
om.dom.summary = function() {
  var summary__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var summary = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11276__i = 0, G__11276__a = new Array(arguments.length - 1);
      while (G__11276__i < G__11276__a.length) {
        G__11276__a[G__11276__i] = arguments[G__11276__i + 1];
        ++G__11276__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11276__a, 0);
    }
    return summary__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  summary.cljs$lang$maxFixedArity = 1;
  summary.cljs$lang$applyTo = function(arglist__11277) {
    var opts__10035__auto__ = cljs.core.first(arglist__11277);
    var children__10036__auto__ = cljs.core.rest(arglist__11277);
    return summary__delegate(opts__10035__auto__, children__10036__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
om.dom.sup = function() {
  var sup__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var sup = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11278__i = 0, G__11278__a = new Array(arguments.length - 1);
      while (G__11278__i < G__11278__a.length) {
        G__11278__a[G__11278__i] = arguments[G__11278__i + 1];
        ++G__11278__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11278__a, 0);
    }
    return sup__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  sup.cljs$lang$maxFixedArity = 1;
  sup.cljs$lang$applyTo = function(arglist__11279) {
    var opts__10035__auto__ = cljs.core.first(arglist__11279);
    var children__10036__auto__ = cljs.core.rest(arglist__11279);
    return sup__delegate(opts__10035__auto__, children__10036__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
om.dom.table = function() {
  var table__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var table = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11280__i = 0, G__11280__a = new Array(arguments.length - 1);
      while (G__11280__i < G__11280__a.length) {
        G__11280__a[G__11280__i] = arguments[G__11280__i + 1];
        ++G__11280__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11280__a, 0);
    }
    return table__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  table.cljs$lang$maxFixedArity = 1;
  table.cljs$lang$applyTo = function(arglist__11281) {
    var opts__10035__auto__ = cljs.core.first(arglist__11281);
    var children__10036__auto__ = cljs.core.rest(arglist__11281);
    return table__delegate(opts__10035__auto__, children__10036__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
om.dom.tbody = function() {
  var tbody__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var tbody = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11282__i = 0, G__11282__a = new Array(arguments.length - 1);
      while (G__11282__i < G__11282__a.length) {
        G__11282__a[G__11282__i] = arguments[G__11282__i + 1];
        ++G__11282__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11282__a, 0);
    }
    return tbody__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 1;
  tbody.cljs$lang$applyTo = function(arglist__11283) {
    var opts__10035__auto__ = cljs.core.first(arglist__11283);
    var children__10036__auto__ = cljs.core.rest(arglist__11283);
    return tbody__delegate(opts__10035__auto__, children__10036__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
om.dom.td = function() {
  var td__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var td = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11284__i = 0, G__11284__a = new Array(arguments.length - 1);
      while (G__11284__i < G__11284__a.length) {
        G__11284__a[G__11284__i] = arguments[G__11284__i + 1];
        ++G__11284__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11284__a, 0);
    }
    return td__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  td.cljs$lang$maxFixedArity = 1;
  td.cljs$lang$applyTo = function(arglist__11285) {
    var opts__10035__auto__ = cljs.core.first(arglist__11285);
    var children__10036__auto__ = cljs.core.rest(arglist__11285);
    return td__delegate(opts__10035__auto__, children__10036__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
om.dom.tfoot = function() {
  var tfoot__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var tfoot = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11286__i = 0, G__11286__a = new Array(arguments.length - 1);
      while (G__11286__i < G__11286__a.length) {
        G__11286__a[G__11286__i] = arguments[G__11286__i + 1];
        ++G__11286__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11286__a, 0);
    }
    return tfoot__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 1;
  tfoot.cljs$lang$applyTo = function(arglist__11287) {
    var opts__10035__auto__ = cljs.core.first(arglist__11287);
    var children__10036__auto__ = cljs.core.rest(arglist__11287);
    return tfoot__delegate(opts__10035__auto__, children__10036__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
om.dom.th = function() {
  var th__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var th = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11288__i = 0, G__11288__a = new Array(arguments.length - 1);
      while (G__11288__i < G__11288__a.length) {
        G__11288__a[G__11288__i] = arguments[G__11288__i + 1];
        ++G__11288__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11288__a, 0);
    }
    return th__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  th.cljs$lang$maxFixedArity = 1;
  th.cljs$lang$applyTo = function(arglist__11289) {
    var opts__10035__auto__ = cljs.core.first(arglist__11289);
    var children__10036__auto__ = cljs.core.rest(arglist__11289);
    return th__delegate(opts__10035__auto__, children__10036__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
om.dom.thead = function() {
  var thead__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var thead = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11290__i = 0, G__11290__a = new Array(arguments.length - 1);
      while (G__11290__i < G__11290__a.length) {
        G__11290__a[G__11290__i] = arguments[G__11290__i + 1];
        ++G__11290__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11290__a, 0);
    }
    return thead__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  thead.cljs$lang$maxFixedArity = 1;
  thead.cljs$lang$applyTo = function(arglist__11291) {
    var opts__10035__auto__ = cljs.core.first(arglist__11291);
    var children__10036__auto__ = cljs.core.rest(arglist__11291);
    return thead__delegate(opts__10035__auto__, children__10036__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
om.dom.time = function() {
  var time__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var time = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11292__i = 0, G__11292__a = new Array(arguments.length - 1);
      while (G__11292__i < G__11292__a.length) {
        G__11292__a[G__11292__i] = arguments[G__11292__i + 1];
        ++G__11292__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11292__a, 0);
    }
    return time__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  time.cljs$lang$maxFixedArity = 1;
  time.cljs$lang$applyTo = function(arglist__11293) {
    var opts__10035__auto__ = cljs.core.first(arglist__11293);
    var children__10036__auto__ = cljs.core.rest(arglist__11293);
    return time__delegate(opts__10035__auto__, children__10036__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
om.dom.title = function() {
  var title__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var title = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11294__i = 0, G__11294__a = new Array(arguments.length - 1);
      while (G__11294__i < G__11294__a.length) {
        G__11294__a[G__11294__i] = arguments[G__11294__i + 1];
        ++G__11294__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11294__a, 0);
    }
    return title__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  title.cljs$lang$maxFixedArity = 1;
  title.cljs$lang$applyTo = function(arglist__11295) {
    var opts__10035__auto__ = cljs.core.first(arglist__11295);
    var children__10036__auto__ = cljs.core.rest(arglist__11295);
    return title__delegate(opts__10035__auto__, children__10036__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
om.dom.tr = function() {
  var tr__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var tr = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11296__i = 0, G__11296__a = new Array(arguments.length - 1);
      while (G__11296__i < G__11296__a.length) {
        G__11296__a[G__11296__i] = arguments[G__11296__i + 1];
        ++G__11296__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11296__a, 0);
    }
    return tr__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  tr.cljs$lang$maxFixedArity = 1;
  tr.cljs$lang$applyTo = function(arglist__11297) {
    var opts__10035__auto__ = cljs.core.first(arglist__11297);
    var children__10036__auto__ = cljs.core.rest(arglist__11297);
    return tr__delegate(opts__10035__auto__, children__10036__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
om.dom.track = function() {
  var track__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var track = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11298__i = 0, G__11298__a = new Array(arguments.length - 1);
      while (G__11298__i < G__11298__a.length) {
        G__11298__a[G__11298__i] = arguments[G__11298__i + 1];
        ++G__11298__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11298__a, 0);
    }
    return track__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  track.cljs$lang$maxFixedArity = 1;
  track.cljs$lang$applyTo = function(arglist__11299) {
    var opts__10035__auto__ = cljs.core.first(arglist__11299);
    var children__10036__auto__ = cljs.core.rest(arglist__11299);
    return track__delegate(opts__10035__auto__, children__10036__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
om.dom.u = function() {
  var u__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var u = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11300__i = 0, G__11300__a = new Array(arguments.length - 1);
      while (G__11300__i < G__11300__a.length) {
        G__11300__a[G__11300__i] = arguments[G__11300__i + 1];
        ++G__11300__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11300__a, 0);
    }
    return u__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  u.cljs$lang$maxFixedArity = 1;
  u.cljs$lang$applyTo = function(arglist__11301) {
    var opts__10035__auto__ = cljs.core.first(arglist__11301);
    var children__10036__auto__ = cljs.core.rest(arglist__11301);
    return u__delegate(opts__10035__auto__, children__10036__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
om.dom.ul = function() {
  var ul__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var ul = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11302__i = 0, G__11302__a = new Array(arguments.length - 1);
      while (G__11302__i < G__11302__a.length) {
        G__11302__a[G__11302__i] = arguments[G__11302__i + 1];
        ++G__11302__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11302__a, 0);
    }
    return ul__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  ul.cljs$lang$maxFixedArity = 1;
  ul.cljs$lang$applyTo = function(arglist__11303) {
    var opts__10035__auto__ = cljs.core.first(arglist__11303);
    var children__10036__auto__ = cljs.core.rest(arglist__11303);
    return ul__delegate(opts__10035__auto__, children__10036__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
om.dom.var$ = function() {
  var var$__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var var$ = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11304__i = 0, G__11304__a = new Array(arguments.length - 1);
      while (G__11304__i < G__11304__a.length) {
        G__11304__a[G__11304__i] = arguments[G__11304__i + 1];
        ++G__11304__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11304__a, 0);
    }
    return var$__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  var$.cljs$lang$maxFixedArity = 1;
  var$.cljs$lang$applyTo = function(arglist__11305) {
    var opts__10035__auto__ = cljs.core.first(arglist__11305);
    var children__10036__auto__ = cljs.core.rest(arglist__11305);
    return var$__delegate(opts__10035__auto__, children__10036__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
om.dom.video = function() {
  var video__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var video = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11306__i = 0, G__11306__a = new Array(arguments.length - 1);
      while (G__11306__i < G__11306__a.length) {
        G__11306__a[G__11306__i] = arguments[G__11306__i + 1];
        ++G__11306__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11306__a, 0);
    }
    return video__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  video.cljs$lang$maxFixedArity = 1;
  video.cljs$lang$applyTo = function(arglist__11307) {
    var opts__10035__auto__ = cljs.core.first(arglist__11307);
    var children__10036__auto__ = cljs.core.rest(arglist__11307);
    return video__delegate(opts__10035__auto__, children__10036__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
om.dom.wbr = function() {
  var wbr__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var wbr = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11308__i = 0, G__11308__a = new Array(arguments.length - 1);
      while (G__11308__i < G__11308__a.length) {
        G__11308__a[G__11308__i] = arguments[G__11308__i + 1];
        ++G__11308__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11308__a, 0);
    }
    return wbr__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 1;
  wbr.cljs$lang$applyTo = function(arglist__11309) {
    var opts__10035__auto__ = cljs.core.first(arglist__11309);
    var children__10036__auto__ = cljs.core.rest(arglist__11309);
    return wbr__delegate(opts__10035__auto__, children__10036__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
om.dom.circle = function() {
  var circle__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var circle = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11310__i = 0, G__11310__a = new Array(arguments.length - 1);
      while (G__11310__i < G__11310__a.length) {
        G__11310__a[G__11310__i] = arguments[G__11310__i + 1];
        ++G__11310__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11310__a, 0);
    }
    return circle__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  circle.cljs$lang$maxFixedArity = 1;
  circle.cljs$lang$applyTo = function(arglist__11311) {
    var opts__10035__auto__ = cljs.core.first(arglist__11311);
    var children__10036__auto__ = cljs.core.rest(arglist__11311);
    return circle__delegate(opts__10035__auto__, children__10036__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
om.dom.ellipse = function() {
  var ellipse__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.ellipse.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var ellipse = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11312__i = 0, G__11312__a = new Array(arguments.length - 1);
      while (G__11312__i < G__11312__a.length) {
        G__11312__a[G__11312__i] = arguments[G__11312__i + 1];
        ++G__11312__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11312__a, 0);
    }
    return ellipse__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  ellipse.cljs$lang$maxFixedArity = 1;
  ellipse.cljs$lang$applyTo = function(arglist__11313) {
    var opts__10035__auto__ = cljs.core.first(arglist__11313);
    var children__10036__auto__ = cljs.core.rest(arglist__11313);
    return ellipse__delegate(opts__10035__auto__, children__10036__auto__);
  };
  ellipse.cljs$core$IFn$_invoke$arity$variadic = ellipse__delegate;
  return ellipse;
}();
om.dom.g = function() {
  var g__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var g = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11314__i = 0, G__11314__a = new Array(arguments.length - 1);
      while (G__11314__i < G__11314__a.length) {
        G__11314__a[G__11314__i] = arguments[G__11314__i + 1];
        ++G__11314__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11314__a, 0);
    }
    return g__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  g.cljs$lang$maxFixedArity = 1;
  g.cljs$lang$applyTo = function(arglist__11315) {
    var opts__10035__auto__ = cljs.core.first(arglist__11315);
    var children__10036__auto__ = cljs.core.rest(arglist__11315);
    return g__delegate(opts__10035__auto__, children__10036__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
om.dom.line = function() {
  var line__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var line = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11316__i = 0, G__11316__a = new Array(arguments.length - 1);
      while (G__11316__i < G__11316__a.length) {
        G__11316__a[G__11316__i] = arguments[G__11316__i + 1];
        ++G__11316__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11316__a, 0);
    }
    return line__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  line.cljs$lang$maxFixedArity = 1;
  line.cljs$lang$applyTo = function(arglist__11317) {
    var opts__10035__auto__ = cljs.core.first(arglist__11317);
    var children__10036__auto__ = cljs.core.rest(arglist__11317);
    return line__delegate(opts__10035__auto__, children__10036__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
om.dom.path = function() {
  var path__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var path = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11318__i = 0, G__11318__a = new Array(arguments.length - 1);
      while (G__11318__i < G__11318__a.length) {
        G__11318__a[G__11318__i] = arguments[G__11318__i + 1];
        ++G__11318__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11318__a, 0);
    }
    return path__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  path.cljs$lang$maxFixedArity = 1;
  path.cljs$lang$applyTo = function(arglist__11319) {
    var opts__10035__auto__ = cljs.core.first(arglist__11319);
    var children__10036__auto__ = cljs.core.rest(arglist__11319);
    return path__delegate(opts__10035__auto__, children__10036__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
om.dom.polyline = function() {
  var polyline__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var polyline = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11320__i = 0, G__11320__a = new Array(arguments.length - 1);
      while (G__11320__i < G__11320__a.length) {
        G__11320__a[G__11320__i] = arguments[G__11320__i + 1];
        ++G__11320__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11320__a, 0);
    }
    return polyline__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 1;
  polyline.cljs$lang$applyTo = function(arglist__11321) {
    var opts__10035__auto__ = cljs.core.first(arglist__11321);
    var children__10036__auto__ = cljs.core.rest(arglist__11321);
    return polyline__delegate(opts__10035__auto__, children__10036__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
om.dom.rect = function() {
  var rect__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var rect = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11322__i = 0, G__11322__a = new Array(arguments.length - 1);
      while (G__11322__i < G__11322__a.length) {
        G__11322__a[G__11322__i] = arguments[G__11322__i + 1];
        ++G__11322__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11322__a, 0);
    }
    return rect__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  rect.cljs$lang$maxFixedArity = 1;
  rect.cljs$lang$applyTo = function(arglist__11323) {
    var opts__10035__auto__ = cljs.core.first(arglist__11323);
    var children__10036__auto__ = cljs.core.rest(arglist__11323);
    return rect__delegate(opts__10035__auto__, children__10036__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
om.dom.svg = function() {
  var svg__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var svg = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11324__i = 0, G__11324__a = new Array(arguments.length - 1);
      while (G__11324__i < G__11324__a.length) {
        G__11324__a[G__11324__i] = arguments[G__11324__i + 1];
        ++G__11324__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11324__a, 0);
    }
    return svg__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  svg.cljs$lang$maxFixedArity = 1;
  svg.cljs$lang$applyTo = function(arglist__11325) {
    var opts__10035__auto__ = cljs.core.first(arglist__11325);
    var children__10036__auto__ = cljs.core.rest(arglist__11325);
    return svg__delegate(opts__10035__auto__, children__10036__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
om.dom.text = function() {
  var text__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var text = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11326__i = 0, G__11326__a = new Array(arguments.length - 1);
      while (G__11326__i < G__11326__a.length) {
        G__11326__a[G__11326__i] = arguments[G__11326__i + 1];
        ++G__11326__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11326__a, 0);
    }
    return text__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  text.cljs$lang$maxFixedArity = 1;
  text.cljs$lang$applyTo = function(arglist__11327) {
    var opts__10035__auto__ = cljs.core.first(arglist__11327);
    var children__10036__auto__ = cljs.core.rest(arglist__11327);
    return text__delegate(opts__10035__auto__, children__10036__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
om.dom.defs = function() {
  var defs__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.defs.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var defs = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11328__i = 0, G__11328__a = new Array(arguments.length - 1);
      while (G__11328__i < G__11328__a.length) {
        G__11328__a[G__11328__i] = arguments[G__11328__i + 1];
        ++G__11328__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11328__a, 0);
    }
    return defs__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  defs.cljs$lang$maxFixedArity = 1;
  defs.cljs$lang$applyTo = function(arglist__11329) {
    var opts__10035__auto__ = cljs.core.first(arglist__11329);
    var children__10036__auto__ = cljs.core.rest(arglist__11329);
    return defs__delegate(opts__10035__auto__, children__10036__auto__);
  };
  defs.cljs$core$IFn$_invoke$arity$variadic = defs__delegate;
  return defs;
}();
om.dom.linearGradient = function() {
  var linearGradient__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.linearGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var linearGradient = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11330__i = 0, G__11330__a = new Array(arguments.length - 1);
      while (G__11330__i < G__11330__a.length) {
        G__11330__a[G__11330__i] = arguments[G__11330__i + 1];
        ++G__11330__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11330__a, 0);
    }
    return linearGradient__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  linearGradient.cljs$lang$maxFixedArity = 1;
  linearGradient.cljs$lang$applyTo = function(arglist__11331) {
    var opts__10035__auto__ = cljs.core.first(arglist__11331);
    var children__10036__auto__ = cljs.core.rest(arglist__11331);
    return linearGradient__delegate(opts__10035__auto__, children__10036__auto__);
  };
  linearGradient.cljs$core$IFn$_invoke$arity$variadic = linearGradient__delegate;
  return linearGradient;
}();
om.dom.polygon = function() {
  var polygon__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.polygon.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var polygon = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11332__i = 0, G__11332__a = new Array(arguments.length - 1);
      while (G__11332__i < G__11332__a.length) {
        G__11332__a[G__11332__i] = arguments[G__11332__i + 1];
        ++G__11332__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11332__a, 0);
    }
    return polygon__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 1;
  polygon.cljs$lang$applyTo = function(arglist__11333) {
    var opts__10035__auto__ = cljs.core.first(arglist__11333);
    var children__10036__auto__ = cljs.core.rest(arglist__11333);
    return polygon__delegate(opts__10035__auto__, children__10036__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
om.dom.radialGradient = function() {
  var radialGradient__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.radialGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var radialGradient = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11334__i = 0, G__11334__a = new Array(arguments.length - 1);
      while (G__11334__i < G__11334__a.length) {
        G__11334__a[G__11334__i] = arguments[G__11334__i + 1];
        ++G__11334__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11334__a, 0);
    }
    return radialGradient__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  radialGradient.cljs$lang$maxFixedArity = 1;
  radialGradient.cljs$lang$applyTo = function(arglist__11335) {
    var opts__10035__auto__ = cljs.core.first(arglist__11335);
    var children__10036__auto__ = cljs.core.rest(arglist__11335);
    return radialGradient__delegate(opts__10035__auto__, children__10036__auto__);
  };
  radialGradient.cljs$core$IFn$_invoke$arity$variadic = radialGradient__delegate;
  return radialGradient;
}();
om.dom.stop = function() {
  var stop__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.stop.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var stop = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11336__i = 0, G__11336__a = new Array(arguments.length - 1);
      while (G__11336__i < G__11336__a.length) {
        G__11336__a[G__11336__i] = arguments[G__11336__i + 1];
        ++G__11336__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11336__a, 0);
    }
    return stop__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  stop.cljs$lang$maxFixedArity = 1;
  stop.cljs$lang$applyTo = function(arglist__11337) {
    var opts__10035__auto__ = cljs.core.first(arglist__11337);
    var children__10036__auto__ = cljs.core.rest(arglist__11337);
    return stop__delegate(opts__10035__auto__, children__10036__auto__);
  };
  stop.cljs$core$IFn$_invoke$arity$variadic = stop__delegate;
  return stop;
}();
om.dom.tspan = function() {
  var tspan__delegate = function(opts__10035__auto__, children__10036__auto__) {
    return React.DOM.tspan.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__10035__auto__, children__10036__auto__)));
  };
  var tspan = function(opts__10035__auto__, var_args) {
    var children__10036__auto__ = null;
    if (arguments.length > 1) {
      var G__11338__i = 0, G__11338__a = new Array(arguments.length - 1);
      while (G__11338__i < G__11338__a.length) {
        G__11338__a[G__11338__i] = arguments[G__11338__i + 1];
        ++G__11338__i;
      }
      children__10036__auto__ = new cljs.core.IndexedSeq(G__11338__a, 0);
    }
    return tspan__delegate.call(this, opts__10035__auto__, children__10036__auto__);
  };
  tspan.cljs$lang$maxFixedArity = 1;
  tspan.cljs$lang$applyTo = function(arglist__11339) {
    var opts__10035__auto__ = cljs.core.first(arglist__11339);
    var children__10036__auto__ = cljs.core.rest(arglist__11339);
    return tspan__delegate(opts__10035__auto__, children__10036__auto__);
  };
  tspan.cljs$core$IFn$_invoke$arity$variadic = tspan__delegate;
  return tspan;
}();
om.dom.wrap_form_element = function wrap_form_element(ctor, display_name) {
  return React.createFactory(React.createClass({"render":function() {
    var this$ = this;
    var props = {};
    goog.object.extend(props, this$.props, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]});
    return ctor.call(null, props);
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }, "getDisplayName":function() {
    return display_name;
  }}));
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input, "input");
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea, "textarea");
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option, "option");
om.dom.render = function render(component, el) {
  return React.render(component, el);
};
om.dom.render_to_str = function render_to_str(c) {
  return React.renderToString(c);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_13346 = 0;
  while (true) {
    var m_13347 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_13347 == null) {
    } else {
      m_13347.call(null);
      if (count_13346 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__13348 = count_13346 + 1;
        count_13346 = G__13348;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__3785__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3785__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t13354 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t13354 = function(val, box, meta13355) {
      this.val = val;
      this.box = box;
      this.meta13355 = meta13355;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t13354.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t13354.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13356) {
      var self__ = this;
      var _13356__$1 = this;
      return self__.meta13355;
    };
    cljs.core.async.impl.channels.t13354.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13356, meta13355__$1) {
      var self__ = this;
      var _13356__$1 = this;
      return new cljs.core.async.impl.channels.t13354(self__.val, self__.box, meta13355__$1);
    };
    cljs.core.async.impl.channels.t13354.cljs$lang$type = true;
    cljs.core.async.impl.channels.t13354.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t13354";
    cljs.core.async.impl.channels.t13354.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.channels/t13354");
    };
    cljs.core.async.impl.channels.__GT_t13354 = function __GT_t13354(val__$1, box__$1, meta13355) {
      return new cljs.core.async.impl.channels.t13354(val__$1, box__$1, meta13355);
    };
  }
  return new cljs.core.async.impl.channels.t13354(val, box, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 22, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 18, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 17, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs"], 
  null));
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj13358 = {};
  return obj13358;
}();
cljs.core.async.impl.channels.abort = function abort(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = self__.buf;
      if (cljs.core.truth_(and__3785__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__3785__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_13359 = self__.takes.pop();
      if (taker_13359 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13359)) {
          var take_cb_13360 = cljs.core.async.impl.protocols.commit.call(null, taker_13359);
          var val_13361 = cljs.core.truth_(function() {
            var and__3785__auto__ = self__.buf;
            if (cljs.core.truth_(and__3785__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__3785__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13360, val_13361, taker_13359, this$__$1) {
            return function() {
              return take_cb_13360.call(null, val_13361);
            };
          }(take_cb_13360, val_13361, taker_13359, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_13362 = self__.puts.pop();
          if (putter_13362 == null) {
          } else {
            var put_handler_13363 = putter_13362.handler;
            var val_13364 = putter_13362.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13363)) {
              var put_cb_13365 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13363);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13365, put_handler_13363, val_13364, putter_13362, _, retval, this$__$1) {
                return function() {
                  return put_cb_13365.call(null, true);
                };
              }(put_cb_13365, put_handler_13363, val_13364, putter_13362, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_13364))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__3785__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__3785__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__3785__auto__;
            }
          }())) {
            var has_val = function() {
              var and__3785__auto__ = self__.buf;
              if (cljs.core.truth_(and__3785__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__3785__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = self__.buf;
      if (cljs.core.truth_(and__3785__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__3785__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_13366 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13366)) {
            var take_cb_13367 = cljs.core.async.impl.protocols.commit.call(null, taker_13366);
            var val_13368__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13367, val_13368__$1, taker_13366, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_13367.call(null, val_13368__$1);
              };
            }(take_cb_13367, val_13368__$1, taker_13366, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_13369 = self__.puts.pop();
    if (putter_13369 == null) {
    } else {
      var put_handler_13370 = putter_13369.handler;
      var val_13371 = putter_13369.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13370)) {
        var put_cb_13372 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13370);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13372, put_handler_13370, val_13371, putter_13369, this$__$1) {
          return function() {
            return put_cb_13372.call(null, true);
          };
        }(put_cb_13372, put_handler_13370, val_13371, putter_13369, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function handle(buf, exh, t) {
  var else$ = function() {
    var or__3797__auto__ = exh;
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function() {
  var chan = null;
  var chan__1 = function(buf) {
    return chan.call(null, buf, null);
  };
  var chan__2 = function(buf, xform) {
    return chan.call(null, buf, xform, null);
  };
  var chan__3 = function(buf, xform, exh) {
    return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
      var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
      return function(add_BANG_) {
        return function() {
          var G__13377 = null;
          var G__13377__1 = function(buf__$1) {
            try {
              return add_BANG_.call(null, buf__$1);
            } catch (e13375) {
              var t = e13375;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          var G__13377__2 = function(buf__$1, val) {
            try {
              return add_BANG_.call(null, buf__$1, val);
            } catch (e13376) {
              var t = e13376;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          G__13377 = function(buf__$1, val) {
            switch(arguments.length) {
              case 1:
                return G__13377__1.call(this, buf__$1);
              case 2:
                return G__13377__2.call(this, buf__$1, val);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13377.cljs$core$IFn$_invoke$arity$1 = G__13377__1;
          G__13377.cljs$core$IFn$_invoke$arity$2 = G__13377__2;
          return G__13377;
        }();
      }(add_BANG_);
    }());
  };
  chan = function(buf, xform, exh) {
    switch(arguments.length) {
      case 1:
        return chan__1.call(this, buf);
      case 2:
        return chan__2.call(this, buf, xform);
      case 3:
        return chan__3.call(this, buf, xform, exh);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
goog.provide("cljs.nodejs");
goog.require("cljs.core");
cljs.nodejs.require = require;
cljs.nodejs.process = process;
cljs.nodejs.enable_util_print_BANG_ = function enable_util_print_BANG_() {
  return cljs.core._STAR_print_fn_STAR_ = cljs.nodejs.require.call(null, "util").print;
};
goog.provide("hoard.twitter");
goog.require("cljs.core");
goog.require("cljs.nodejs");
hoard.twitter.Twitter = cljs.nodejs.require.call(null, "twitter");
hoard.twitter.cfg = function() {
  var obj11184 = {"consumer_key":process["env"]["TWITTER_CONSUMER_KEY"], "consumer_secret":process["env"]["TWITTER_CONSUMER_SECRET"], "access_token_key":process["env"]["TWITTER_ACCESS_TOKEN_KEY"], "access_token_secret":process["env"]["TWITTER_ACCESS_TOKEN_SECRET"]};
  return obj11184;
}();
hoard.twitter.max_per_request = 3E3;
hoard.twitter.client = new hoard.twitter.Twitter(hoard.twitter.cfg);
hoard.twitter.get_user_tweets = function get_user_tweets(name, cb) {
  var params = function() {
    var obj11188 = {"screen_name":name, "count":hoard.twitter.max_per_request};
    return obj11188;
  }();
  console.log([cljs.core.str("Getting tweets for user "), cljs.core.str(name)].join(""));
  return hoard.twitter.client.get("statuses/user_timeline", params, cb);
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("hoard.elasticsearch");
goog.require("cljs.core");
goog.require("cljs.nodejs");
hoard.elasticsearch.Elasticsearch = cljs.nodejs.require.call(null, "elasticsearch");
hoard.elasticsearch.host = "http://localhost:9250";
hoard.elasticsearch.cfg = function() {
  var obj16158 = {"host":hoard.elasticsearch.host, "apiVersion":"1.2"};
  return obj16158;
}();
hoard.elasticsearch.client = new hoard.elasticsearch.Elasticsearch.Client(hoard.elasticsearch.cfg);
hoard.elasticsearch.ping_success = function ping_success(body) {
  return console.log("booya baby!  Elasticsearch is up and running!");
};
hoard.elasticsearch.ping_failure = function ping_failure(error) {
  return console.log("elasticsearch cluster is down!");
};
hoard.elasticsearch.test_es = function test_es() {
  return hoard.elasticsearch.client.ping(function() {
    var obj16162 = {"requestTimeout":1E3, "hello":"elasticsearch!"};
    return obj16162;
  }()).then(hoard.elasticsearch.ping_success, hoard.elasticsearch.ping_failure);
};
hoard.elasticsearch.bulk_data = function() {
  var obj16164 = {"body":cljs.core.clj__GT_js.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
    var obj16166 = {"index":function() {
      var obj16168 = {"_index":"tweets", "_type":"tweets", "_id":1};
      return obj16168;
    }()};
    return obj16166;
  }(), function() {
    var obj16170 = {"title":"foobar"};
    return obj16170;
  }()], null))};
  return obj16164;
}();
hoard.elasticsearch.bulk_insert = function bulk_insert(bulk_body, cb) {
  return hoard.elasticsearch.client.bulk(bulk_body, cb);
};
hoard.elasticsearch.query_es = function query_es() {
  return hoard.elasticsearch.client.ping(function() {
    var obj16174 = {"requestTimeout":1E3, "hello":"elasticsearch!"};
    return obj16174;
  }()).then(function(body) {
    return console.log("booya!");
  }, function(error) {
    if (cljs.core.truth_(error)) {
      return console.log("elasticsearch cluster is down!");
    } else {
      return console.log("all is well");
    }
  });
};
goog.provide("hoard.backup");
goog.require("cljs.core");
goog.require("cljs.nodejs");
hoard.backup.fs = cljs.nodejs.require.call(null, "fs");
hoard.backup.to_file = function to_file(file_name, data) {
  var data_as_json = JSON.stringify(data);
  return hoard.backup.fs.writeFile.call(null, file_name, data_as_json, function(data_as_json) {
    return function(err) {
      if (cljs.core.truth_(err)) {
        throw err;
      } else {
        return console.log("Data written to file!");
      }
    };
  }(data_as_json));
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__13257 = level + 1;
        level = G__13257;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_13258 = 0;
    while (true) {
      if (i_13258 < arr.length) {
        arr[i_13258] = null;
        var G__13259 = i_13258 + 1;
        i_13258 = G__13259;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__13260 = x_SINGLEQUOTE_;
                x__$1 = G__13260;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__13261 = x__$1;
        var G__13262 = k;
        var G__13263 = level - 1;
        var G__13264 = update;
        x = G__13261;
        k = G__13262;
        level = G__13263;
        update = G__13264;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_13265 = self__.level + 1;
      while (true) {
        if (i_13265 <= new_level + 1) {
          update[i_13265] = self__.header;
          var G__13266 = i_13265 + 1;
          i_13265 = G__13266;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_13267 = 0;
    while (true) {
      if (i_13267 <= self__.level) {
        var links_13268 = update[i_13267].forward;
        if (links_13268[i_13267] === x__$1) {
          links_13268[i_13267] = x__$1.forward[i_13267];
          var G__13269 = i_13267 + 1;
          i_13267 = G__13269;
          continue;
        } else {
          var G__13270 = i_13267 + 1;
          i_13267 = G__13270;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__13271 = x_SINGLEQUOTE_;
              x__$1 = G__13271;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__13272 = nx;
        var G__13273 = level__$1 - 1;
        x = G__13272;
        level__$1 = G__13273;
        continue;
      } else {
        var G__13274 = x;
        var G__13275 = level__$1 - 1;
        x = G__13274;
        level__$1 = G__13275;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__13276 = x_SINGLEQUOTE_;
              x__$1 = G__13276;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__13277 = nx;
        var G__13278 = level__$1 - 1;
        x = G__13277;
        level__$1 = G__13278;
        continue;
      } else {
        var G__13279 = x;
        var G__13280 = level__$1 - 1;
        x = G__13279;
        level__$1 = G__13280;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3797__auto__ = cljs.core.truth_(function() {
    var and__3785__auto__ = me;
    if (cljs.core.truth_(and__3785__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3785__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3797__auto__)) {
    return or__3797__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3797__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3797__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t10168 !== "undefined") {
  } else {
    cljs.core.async.t10168 = function(f, fn_handler, meta10169) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta10169 = meta10169;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t10168.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t10168.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t10168.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t10168.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10170) {
      var self__ = this;
      var _10170__$1 = this;
      return self__.meta10169;
    };
    cljs.core.async.t10168.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10170, meta10169__$1) {
      var self__ = this;
      var _10170__$1 = this;
      return new cljs.core.async.t10168(self__.f, self__.fn_handler, meta10169__$1);
    };
    cljs.core.async.t10168.cljs$lang$type = true;
    cljs.core.async.t10168.cljs$lang$ctorStr = "cljs.core.async/t10168";
    cljs.core.async.t10168.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t10168");
    };
    cljs.core.async.__GT_t10168 = function __GT_t10168(f__$1, fn_handler__$1, meta10169) {
      return new cljs.core.async.t10168(f__$1, fn_handler__$1, meta10169);
    };
  }
  return new cljs.core.async.t10168(f, fn_handler, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 16, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 13, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__10172 = buff;
  if (G__10172) {
    var bit__4478__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3797__auto__ = bit__4478__auto__;
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return G__10172.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__10172.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__10172);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__10172);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    return chan.call(null, buf_or_n, null, null);
  };
  var chan__2 = function(buf_or_n, xform) {
    return chan.call(null, buf_or_n, xform, null);
  };
  var chan__3 = function(buf_or_n, xform, ex_handler) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    if (cljs.core.truth_(xform)) {
      if (cljs.core.truth_(buf_or_n__$1)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
      }
    } else {
    }
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
  };
  chan = function(buf_or_n, xform, ex_handler) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
      case 2:
        return chan__2.call(this, buf_or_n, xform);
      case 3:
        return chan__3.call(this, buf_or_n, xform, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_10173 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_10173);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_10173, ret) {
          return function() {
            return fn1.call(null, val_10173);
          };
        }(val_10173, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4684__auto___10174 = n;
  var x_10175 = 0;
  while (true) {
    if (x_10175 < n__4684__auto___10174) {
      a[x_10175] = 0;
      var G__10176 = x_10175 + 1;
      x_10175 = G__10176;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__10177 = i + 1;
      i = G__10177;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t10181 !== "undefined") {
  } else {
    cljs.core.async.t10181 = function(flag, alt_flag, meta10182) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta10182 = meta10182;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t10181.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t10181.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t10181.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t10181.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_10183) {
        var self__ = this;
        var _10183__$1 = this;
        return self__.meta10182;
      };
    }(flag);
    cljs.core.async.t10181.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_10183, meta10182__$1) {
        var self__ = this;
        var _10183__$1 = this;
        return new cljs.core.async.t10181(self__.flag, self__.alt_flag, meta10182__$1);
      };
    }(flag);
    cljs.core.async.t10181.cljs$lang$type = true;
    cljs.core.async.t10181.cljs$lang$ctorStr = "cljs.core.async/t10181";
    cljs.core.async.t10181.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
        return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t10181");
      };
    }(flag);
    cljs.core.async.__GT_t10181 = function(flag) {
      return function __GT_t10181(flag__$1, alt_flag__$1, meta10182) {
        return new cljs.core.async.t10181(flag__$1, alt_flag__$1, meta10182);
      };
    }(flag);
  }
  return new cljs.core.async.t10181(flag, alt_flag, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 15, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 146, new cljs.core.Keyword(null, "column", "column", 2078222095), 5, new cljs.core.Keyword(null, "line", "line", 212345235), 141, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t10187 !== "undefined") {
  } else {
    cljs.core.async.t10187 = function(cb, flag, alt_handler, meta10188) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta10188 = meta10188;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t10187.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t10187.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t10187.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t10187.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10189) {
      var self__ = this;
      var _10189__$1 = this;
      return self__.meta10188;
    };
    cljs.core.async.t10187.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10189, meta10188__$1) {
      var self__ = this;
      var _10189__$1 = this;
      return new cljs.core.async.t10187(self__.cb, self__.flag, self__.alt_handler, meta10188__$1);
    };
    cljs.core.async.t10187.cljs$lang$type = true;
    cljs.core.async.t10187.cljs$lang$ctorStr = "cljs.core.async/t10187";
    cljs.core.async.t10187.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t10187");
    };
    cljs.core.async.__GT_t10187 = function __GT_t10187(cb__$1, flag__$1, alt_handler__$1, meta10188) {
      return new cljs.core.async.t10187(cb__$1, flag__$1, alt_handler__$1, meta10188);
    };
  }
  return new cljs.core.async.t10187(cb, flag, alt_handler, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 11, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 154, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 149, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__10190_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10190_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__10191_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10191_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3797__auto__ = wport;
            if (cljs.core.truth_(or__3797__auto__)) {
              return or__3797__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__10192 = i + 1;
          i = G__10192;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3797__auto__ = ret;
  if (cljs.core.truth_(or__3797__auto__)) {
    return or__3797__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3785__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3785__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3785__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__10193) {
    var map__10195 = p__10193;
    var map__10195__$1 = cljs.core.seq_QMARK_.call(null, map__10195) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10195) : map__10195;
    var opts = map__10195__$1;
    throw new Error("alts! used not in (go ...) block");
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__10193 = null;
    if (arguments.length > 1) {
      var G__10196__i = 0, G__10196__a = new Array(arguments.length - 1);
      while (G__10196__i < G__10196__a.length) {
        G__10196__a[G__10196__i] = arguments[G__10196__i + 1];
        ++G__10196__i;
      }
      p__10193 = new cljs.core.IndexedSeq(G__10196__a, 0);
    }
    return alts_BANG___delegate.call(this, ports, p__10193);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__10197) {
    var ports = cljs.core.first(arglist__10197);
    var p__10193 = cljs.core.rest(arglist__10197);
    return alts_BANG___delegate(ports, p__10193);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__7407__auto___10292 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___10292) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___10292) {
            return function(state_10268) {
              var state_val_10269 = state_10268[1];
              if (state_val_10269 === 7) {
                var inst_10264 = state_10268[2];
                var state_10268__$1 = state_10268;
                var statearr_10270_10293 = state_10268__$1;
                statearr_10270_10293[2] = inst_10264;
                statearr_10270_10293[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10269 === 1) {
                  var state_10268__$1 = state_10268;
                  var statearr_10271_10294 = state_10268__$1;
                  statearr_10271_10294[2] = null;
                  statearr_10271_10294[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10269 === 4) {
                    var inst_10247 = state_10268[7];
                    var inst_10247__$1 = state_10268[2];
                    var inst_10248 = inst_10247__$1 == null;
                    var state_10268__$1 = function() {
                      var statearr_10272 = state_10268;
                      statearr_10272[7] = inst_10247__$1;
                      return statearr_10272;
                    }();
                    if (cljs.core.truth_(inst_10248)) {
                      var statearr_10273_10295 = state_10268__$1;
                      statearr_10273_10295[1] = 5;
                    } else {
                      var statearr_10274_10296 = state_10268__$1;
                      statearr_10274_10296[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10269 === 13) {
                      var state_10268__$1 = state_10268;
                      var statearr_10275_10297 = state_10268__$1;
                      statearr_10275_10297[2] = null;
                      statearr_10275_10297[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10269 === 6) {
                        var inst_10247 = state_10268[7];
                        var state_10268__$1 = state_10268;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10268__$1, 11, to, inst_10247);
                      } else {
                        if (state_val_10269 === 3) {
                          var inst_10266 = state_10268[2];
                          var state_10268__$1 = state_10268;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10268__$1, inst_10266);
                        } else {
                          if (state_val_10269 === 12) {
                            var state_10268__$1 = state_10268;
                            var statearr_10276_10298 = state_10268__$1;
                            statearr_10276_10298[2] = null;
                            statearr_10276_10298[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10269 === 2) {
                              var state_10268__$1 = state_10268;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10268__$1, 4, from);
                            } else {
                              if (state_val_10269 === 11) {
                                var inst_10257 = state_10268[2];
                                var state_10268__$1 = state_10268;
                                if (cljs.core.truth_(inst_10257)) {
                                  var statearr_10277_10299 = state_10268__$1;
                                  statearr_10277_10299[1] = 12;
                                } else {
                                  var statearr_10278_10300 = state_10268__$1;
                                  statearr_10278_10300[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10269 === 9) {
                                  var state_10268__$1 = state_10268;
                                  var statearr_10279_10301 = state_10268__$1;
                                  statearr_10279_10301[2] = null;
                                  statearr_10279_10301[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10269 === 5) {
                                    var state_10268__$1 = state_10268;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_10280_10302 = state_10268__$1;
                                      statearr_10280_10302[1] = 8;
                                    } else {
                                      var statearr_10281_10303 = state_10268__$1;
                                      statearr_10281_10303[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10269 === 14) {
                                      var inst_10262 = state_10268[2];
                                      var state_10268__$1 = state_10268;
                                      var statearr_10282_10304 = state_10268__$1;
                                      statearr_10282_10304[2] = inst_10262;
                                      statearr_10282_10304[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10269 === 10) {
                                        var inst_10254 = state_10268[2];
                                        var state_10268__$1 = state_10268;
                                        var statearr_10283_10305 = state_10268__$1;
                                        statearr_10283_10305[2] = inst_10254;
                                        statearr_10283_10305[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10269 === 8) {
                                          var inst_10251 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_10268__$1 = state_10268;
                                          var statearr_10284_10306 = state_10268__$1;
                                          statearr_10284_10306[2] = inst_10251;
                                          statearr_10284_10306[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___10292);
          return function(switch__7351__auto__, c__7407__auto___10292) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_10288 = [null, null, null, null, null, null, null, null];
                statearr_10288[0] = state_machine__7352__auto__;
                statearr_10288[1] = 1;
                return statearr_10288;
              };
              var state_machine__7352__auto____1 = function(state_10268) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_10268);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e10289) {
                      if (e10289 instanceof Object) {
                        var ex__7355__auto__ = e10289;
                        var statearr_10290_10307 = state_10268;
                        statearr_10290_10307[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10268);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e10289;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__10308 = state_10268;
                    state_10268 = G__10308;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_10268) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_10268);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___10292);
        }();
        var state__7409__auto__ = function() {
          var statearr_10291 = f__7408__auto__.call(null);
          statearr_10291[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___10292;
          return statearr_10291;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___10292));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.pipeline_STAR_ = function pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__10492) {
      var vec__10493 = p__10492;
      var v = cljs.core.nth.call(null, vec__10493, 0, null);
      var p = cljs.core.nth.call(null, vec__10493, 1, null);
      var job = vec__10493;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__7407__auto___10675 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___10675, res, vec__10493, v, p, job, jobs, results) {
          return function() {
            var f__7408__auto__ = function() {
              var switch__7351__auto__ = function(c__7407__auto___10675, res, vec__10493, v, p, job, jobs, results) {
                return function(state_10498) {
                  var state_val_10499 = state_10498[1];
                  if (state_val_10499 === 2) {
                    var inst_10495 = state_10498[2];
                    var inst_10496 = cljs.core.async.close_BANG_.call(null, res);
                    var state_10498__$1 = function() {
                      var statearr_10500 = state_10498;
                      statearr_10500[7] = inst_10495;
                      return statearr_10500;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10498__$1, inst_10496);
                  } else {
                    if (state_val_10499 === 1) {
                      var state_10498__$1 = state_10498;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10498__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__7407__auto___10675, res, vec__10493, v, p, job, jobs, results);
              return function(switch__7351__auto__, c__7407__auto___10675, res, vec__10493, v, p, job, jobs, results) {
                return function() {
                  var state_machine__7352__auto__ = null;
                  var state_machine__7352__auto____0 = function() {
                    var statearr_10504 = [null, null, null, null, null, null, null, null];
                    statearr_10504[0] = state_machine__7352__auto__;
                    statearr_10504[1] = 1;
                    return statearr_10504;
                  };
                  var state_machine__7352__auto____1 = function(state_10498) {
                    while (true) {
                      var ret_value__7353__auto__ = function() {
                        try {
                          while (true) {
                            var result__7354__auto__ = switch__7351__auto__.call(null, state_10498);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__7354__auto__;
                            }
                            break;
                          }
                        } catch (e10505) {
                          if (e10505 instanceof Object) {
                            var ex__7355__auto__ = e10505;
                            var statearr_10506_10676 = state_10498;
                            statearr_10506_10676[5] = ex__7355__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10498);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e10505;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__10677 = state_10498;
                        state_10498 = G__10677;
                        continue;
                      } else {
                        return ret_value__7353__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__7352__auto__ = function(state_10498) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__7352__auto____0.call(this);
                      case 1:
                        return state_machine__7352__auto____1.call(this, state_10498);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
                  state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
                  return state_machine__7352__auto__;
                }();
              }(switch__7351__auto__, c__7407__auto___10675, res, vec__10493, v, p, job, jobs, results);
            }();
            var state__7409__auto__ = function() {
              var statearr_10507 = f__7408__auto__.call(null);
              statearr_10507[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___10675;
              return statearr_10507;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
          };
        }(c__7407__auto___10675, res, vec__10493, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__10508) {
      var vec__10509 = p__10508;
      var v = cljs.core.nth.call(null, vec__10509, 0, null);
      var p = cljs.core.nth.call(null, vec__10509, 1, null);
      var job = vec__10509;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__4684__auto___10678 = n;
  var __10679 = 0;
  while (true) {
    if (__10679 < n__4684__auto___10678) {
      var G__10510_10680 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__10510_10680) {
        case "async":
          var c__7407__auto___10682 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__10679, c__7407__auto___10682, G__10510_10680, n__4684__auto___10678, jobs, results, process, async) {
            return function() {
              var f__7408__auto__ = function() {
                var switch__7351__auto__ = function(__10679, c__7407__auto___10682, G__10510_10680, n__4684__auto___10678, jobs, results, process, async) {
                  return function(state_10523) {
                    var state_val_10524 = state_10523[1];
                    if (state_val_10524 === 7) {
                      var inst_10519 = state_10523[2];
                      var state_10523__$1 = state_10523;
                      var statearr_10525_10683 = state_10523__$1;
                      statearr_10525_10683[2] = inst_10519;
                      statearr_10525_10683[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10524 === 6) {
                        var state_10523__$1 = state_10523;
                        var statearr_10526_10684 = state_10523__$1;
                        statearr_10526_10684[2] = null;
                        statearr_10526_10684[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10524 === 5) {
                          var state_10523__$1 = state_10523;
                          var statearr_10527_10685 = state_10523__$1;
                          statearr_10527_10685[2] = null;
                          statearr_10527_10685[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10524 === 4) {
                            var inst_10513 = state_10523[2];
                            var inst_10514 = async.call(null, inst_10513);
                            var state_10523__$1 = state_10523;
                            if (cljs.core.truth_(inst_10514)) {
                              var statearr_10528_10686 = state_10523__$1;
                              statearr_10528_10686[1] = 5;
                            } else {
                              var statearr_10529_10687 = state_10523__$1;
                              statearr_10529_10687[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10524 === 3) {
                              var inst_10521 = state_10523[2];
                              var state_10523__$1 = state_10523;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10523__$1, inst_10521);
                            } else {
                              if (state_val_10524 === 2) {
                                var state_10523__$1 = state_10523;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10523__$1, 4, jobs);
                              } else {
                                if (state_val_10524 === 1) {
                                  var state_10523__$1 = state_10523;
                                  var statearr_10530_10688 = state_10523__$1;
                                  statearr_10530_10688[2] = null;
                                  statearr_10530_10688[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__10679, c__7407__auto___10682, G__10510_10680, n__4684__auto___10678, jobs, results, process, async);
                return function(__10679, switch__7351__auto__, c__7407__auto___10682, G__10510_10680, n__4684__auto___10678, jobs, results, process, async) {
                  return function() {
                    var state_machine__7352__auto__ = null;
                    var state_machine__7352__auto____0 = function() {
                      var statearr_10534 = [null, null, null, null, null, null, null];
                      statearr_10534[0] = state_machine__7352__auto__;
                      statearr_10534[1] = 1;
                      return statearr_10534;
                    };
                    var state_machine__7352__auto____1 = function(state_10523) {
                      while (true) {
                        var ret_value__7353__auto__ = function() {
                          try {
                            while (true) {
                              var result__7354__auto__ = switch__7351__auto__.call(null, state_10523);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7354__auto__;
                              }
                              break;
                            }
                          } catch (e10535) {
                            if (e10535 instanceof Object) {
                              var ex__7355__auto__ = e10535;
                              var statearr_10536_10689 = state_10523;
                              statearr_10536_10689[5] = ex__7355__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10523);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e10535;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__10690 = state_10523;
                          state_10523 = G__10690;
                          continue;
                        } else {
                          return ret_value__7353__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__7352__auto__ = function(state_10523) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__7352__auto____0.call(this);
                        case 1:
                          return state_machine__7352__auto____1.call(this, state_10523);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
                    state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
                    return state_machine__7352__auto__;
                  }();
                }(__10679, switch__7351__auto__, c__7407__auto___10682, G__10510_10680, n__4684__auto___10678, jobs, results, process, async);
              }();
              var state__7409__auto__ = function() {
                var statearr_10537 = f__7408__auto__.call(null);
                statearr_10537[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___10682;
                return statearr_10537;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
            };
          }(__10679, c__7407__auto___10682, G__10510_10680, n__4684__auto___10678, jobs, results, process, async));
          break;
        case "compute":
          var c__7407__auto___10691 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__10679, c__7407__auto___10691, G__10510_10680, n__4684__auto___10678, jobs, results, process, async) {
            return function() {
              var f__7408__auto__ = function() {
                var switch__7351__auto__ = function(__10679, c__7407__auto___10691, G__10510_10680, n__4684__auto___10678, jobs, results, process, async) {
                  return function(state_10550) {
                    var state_val_10551 = state_10550[1];
                    if (state_val_10551 === 7) {
                      var inst_10546 = state_10550[2];
                      var state_10550__$1 = state_10550;
                      var statearr_10552_10692 = state_10550__$1;
                      statearr_10552_10692[2] = inst_10546;
                      statearr_10552_10692[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10551 === 6) {
                        var state_10550__$1 = state_10550;
                        var statearr_10553_10693 = state_10550__$1;
                        statearr_10553_10693[2] = null;
                        statearr_10553_10693[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10551 === 5) {
                          var state_10550__$1 = state_10550;
                          var statearr_10554_10694 = state_10550__$1;
                          statearr_10554_10694[2] = null;
                          statearr_10554_10694[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10551 === 4) {
                            var inst_10540 = state_10550[2];
                            var inst_10541 = process.call(null, inst_10540);
                            var state_10550__$1 = state_10550;
                            if (cljs.core.truth_(inst_10541)) {
                              var statearr_10555_10695 = state_10550__$1;
                              statearr_10555_10695[1] = 5;
                            } else {
                              var statearr_10556_10696 = state_10550__$1;
                              statearr_10556_10696[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10551 === 3) {
                              var inst_10548 = state_10550[2];
                              var state_10550__$1 = state_10550;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10550__$1, inst_10548);
                            } else {
                              if (state_val_10551 === 2) {
                                var state_10550__$1 = state_10550;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10550__$1, 4, jobs);
                              } else {
                                if (state_val_10551 === 1) {
                                  var state_10550__$1 = state_10550;
                                  var statearr_10557_10697 = state_10550__$1;
                                  statearr_10557_10697[2] = null;
                                  statearr_10557_10697[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__10679, c__7407__auto___10691, G__10510_10680, n__4684__auto___10678, jobs, results, process, async);
                return function(__10679, switch__7351__auto__, c__7407__auto___10691, G__10510_10680, n__4684__auto___10678, jobs, results, process, async) {
                  return function() {
                    var state_machine__7352__auto__ = null;
                    var state_machine__7352__auto____0 = function() {
                      var statearr_10561 = [null, null, null, null, null, null, null];
                      statearr_10561[0] = state_machine__7352__auto__;
                      statearr_10561[1] = 1;
                      return statearr_10561;
                    };
                    var state_machine__7352__auto____1 = function(state_10550) {
                      while (true) {
                        var ret_value__7353__auto__ = function() {
                          try {
                            while (true) {
                              var result__7354__auto__ = switch__7351__auto__.call(null, state_10550);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7354__auto__;
                              }
                              break;
                            }
                          } catch (e10562) {
                            if (e10562 instanceof Object) {
                              var ex__7355__auto__ = e10562;
                              var statearr_10563_10698 = state_10550;
                              statearr_10563_10698[5] = ex__7355__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10550);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e10562;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__10699 = state_10550;
                          state_10550 = G__10699;
                          continue;
                        } else {
                          return ret_value__7353__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__7352__auto__ = function(state_10550) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__7352__auto____0.call(this);
                        case 1:
                          return state_machine__7352__auto____1.call(this, state_10550);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
                    state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
                    return state_machine__7352__auto__;
                  }();
                }(__10679, switch__7351__auto__, c__7407__auto___10691, G__10510_10680, n__4684__auto___10678, jobs, results, process, async);
              }();
              var state__7409__auto__ = function() {
                var statearr_10564 = f__7408__auto__.call(null);
                statearr_10564[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___10691;
                return statearr_10564;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
            };
          }(__10679, c__7407__auto___10691, G__10510_10680, n__4684__auto___10678, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__10700 = __10679 + 1;
      __10679 = G__10700;
      continue;
    } else {
    }
    break;
  }
  var c__7407__auto___10701 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___10701, jobs, results, process, async) {
    return function() {
      var f__7408__auto__ = function() {
        var switch__7351__auto__ = function(c__7407__auto___10701, jobs, results, process, async) {
          return function(state_10586) {
            var state_val_10587 = state_10586[1];
            if (state_val_10587 === 9) {
              var inst_10579 = state_10586[2];
              var state_10586__$1 = function() {
                var statearr_10588 = state_10586;
                statearr_10588[7] = inst_10579;
                return statearr_10588;
              }();
              var statearr_10589_10702 = state_10586__$1;
              statearr_10589_10702[2] = null;
              statearr_10589_10702[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10587 === 8) {
                var inst_10572 = state_10586[8];
                var inst_10577 = state_10586[2];
                var state_10586__$1 = function() {
                  var statearr_10590 = state_10586;
                  statearr_10590[9] = inst_10577;
                  return statearr_10590;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10586__$1, 9, results, inst_10572);
              } else {
                if (state_val_10587 === 7) {
                  var inst_10582 = state_10586[2];
                  var state_10586__$1 = state_10586;
                  var statearr_10591_10703 = state_10586__$1;
                  statearr_10591_10703[2] = inst_10582;
                  statearr_10591_10703[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10587 === 6) {
                    var inst_10572 = state_10586[8];
                    var inst_10567 = state_10586[10];
                    var inst_10572__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_10573 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_10574 = [inst_10567, inst_10572__$1];
                    var inst_10575 = new cljs.core.PersistentVector(null, 2, 5, inst_10573, inst_10574, null);
                    var state_10586__$1 = function() {
                      var statearr_10592 = state_10586;
                      statearr_10592[8] = inst_10572__$1;
                      return statearr_10592;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10586__$1, 8, jobs, inst_10575);
                  } else {
                    if (state_val_10587 === 5) {
                      var inst_10570 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_10586__$1 = state_10586;
                      var statearr_10593_10704 = state_10586__$1;
                      statearr_10593_10704[2] = inst_10570;
                      statearr_10593_10704[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10587 === 4) {
                        var inst_10567 = state_10586[10];
                        var inst_10567__$1 = state_10586[2];
                        var inst_10568 = inst_10567__$1 == null;
                        var state_10586__$1 = function() {
                          var statearr_10594 = state_10586;
                          statearr_10594[10] = inst_10567__$1;
                          return statearr_10594;
                        }();
                        if (cljs.core.truth_(inst_10568)) {
                          var statearr_10595_10705 = state_10586__$1;
                          statearr_10595_10705[1] = 5;
                        } else {
                          var statearr_10596_10706 = state_10586__$1;
                          statearr_10596_10706[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10587 === 3) {
                          var inst_10584 = state_10586[2];
                          var state_10586__$1 = state_10586;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10586__$1, inst_10584);
                        } else {
                          if (state_val_10587 === 2) {
                            var state_10586__$1 = state_10586;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10586__$1, 4, from);
                          } else {
                            if (state_val_10587 === 1) {
                              var state_10586__$1 = state_10586;
                              var statearr_10597_10707 = state_10586__$1;
                              statearr_10597_10707[2] = null;
                              statearr_10597_10707[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7407__auto___10701, jobs, results, process, async);
        return function(switch__7351__auto__, c__7407__auto___10701, jobs, results, process, async) {
          return function() {
            var state_machine__7352__auto__ = null;
            var state_machine__7352__auto____0 = function() {
              var statearr_10601 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_10601[0] = state_machine__7352__auto__;
              statearr_10601[1] = 1;
              return statearr_10601;
            };
            var state_machine__7352__auto____1 = function(state_10586) {
              while (true) {
                var ret_value__7353__auto__ = function() {
                  try {
                    while (true) {
                      var result__7354__auto__ = switch__7351__auto__.call(null, state_10586);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7354__auto__;
                      }
                      break;
                    }
                  } catch (e10602) {
                    if (e10602 instanceof Object) {
                      var ex__7355__auto__ = e10602;
                      var statearr_10603_10708 = state_10586;
                      statearr_10603_10708[5] = ex__7355__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10586);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10602;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10709 = state_10586;
                  state_10586 = G__10709;
                  continue;
                } else {
                  return ret_value__7353__auto__;
                }
                break;
              }
            };
            state_machine__7352__auto__ = function(state_10586) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7352__auto____0.call(this);
                case 1:
                  return state_machine__7352__auto____1.call(this, state_10586);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
            return state_machine__7352__auto__;
          }();
        }(switch__7351__auto__, c__7407__auto___10701, jobs, results, process, async);
      }();
      var state__7409__auto__ = function() {
        var statearr_10604 = f__7408__auto__.call(null);
        statearr_10604[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___10701;
        return statearr_10604;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
    };
  }(c__7407__auto___10701, jobs, results, process, async));
  var c__7407__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto__, jobs, results, process, async) {
    return function() {
      var f__7408__auto__ = function() {
        var switch__7351__auto__ = function(c__7407__auto__, jobs, results, process, async) {
          return function(state_10642) {
            var state_val_10643 = state_10642[1];
            if (state_val_10643 === 7) {
              var inst_10638 = state_10642[2];
              var state_10642__$1 = state_10642;
              var statearr_10644_10710 = state_10642__$1;
              statearr_10644_10710[2] = inst_10638;
              statearr_10644_10710[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10643 === 20) {
                var state_10642__$1 = state_10642;
                var statearr_10645_10711 = state_10642__$1;
                statearr_10645_10711[2] = null;
                statearr_10645_10711[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10643 === 1) {
                  var state_10642__$1 = state_10642;
                  var statearr_10646_10712 = state_10642__$1;
                  statearr_10646_10712[2] = null;
                  statearr_10646_10712[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10643 === 4) {
                    var inst_10607 = state_10642[7];
                    var inst_10607__$1 = state_10642[2];
                    var inst_10608 = inst_10607__$1 == null;
                    var state_10642__$1 = function() {
                      var statearr_10647 = state_10642;
                      statearr_10647[7] = inst_10607__$1;
                      return statearr_10647;
                    }();
                    if (cljs.core.truth_(inst_10608)) {
                      var statearr_10648_10713 = state_10642__$1;
                      statearr_10648_10713[1] = 5;
                    } else {
                      var statearr_10649_10714 = state_10642__$1;
                      statearr_10649_10714[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10643 === 15) {
                      var inst_10620 = state_10642[8];
                      var state_10642__$1 = state_10642;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10642__$1, 18, to, inst_10620);
                    } else {
                      if (state_val_10643 === 21) {
                        var inst_10633 = state_10642[2];
                        var state_10642__$1 = state_10642;
                        var statearr_10650_10715 = state_10642__$1;
                        statearr_10650_10715[2] = inst_10633;
                        statearr_10650_10715[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10643 === 13) {
                          var inst_10635 = state_10642[2];
                          var state_10642__$1 = function() {
                            var statearr_10651 = state_10642;
                            statearr_10651[9] = inst_10635;
                            return statearr_10651;
                          }();
                          var statearr_10652_10716 = state_10642__$1;
                          statearr_10652_10716[2] = null;
                          statearr_10652_10716[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10643 === 6) {
                            var inst_10607 = state_10642[7];
                            var state_10642__$1 = state_10642;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10642__$1, 11, inst_10607);
                          } else {
                            if (state_val_10643 === 17) {
                              var inst_10628 = state_10642[2];
                              var state_10642__$1 = state_10642;
                              if (cljs.core.truth_(inst_10628)) {
                                var statearr_10653_10717 = state_10642__$1;
                                statearr_10653_10717[1] = 19;
                              } else {
                                var statearr_10654_10718 = state_10642__$1;
                                statearr_10654_10718[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10643 === 3) {
                                var inst_10640 = state_10642[2];
                                var state_10642__$1 = state_10642;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10642__$1, inst_10640);
                              } else {
                                if (state_val_10643 === 12) {
                                  var inst_10617 = state_10642[10];
                                  var state_10642__$1 = state_10642;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10642__$1, 14, inst_10617);
                                } else {
                                  if (state_val_10643 === 2) {
                                    var state_10642__$1 = state_10642;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10642__$1, 4, results);
                                  } else {
                                    if (state_val_10643 === 19) {
                                      var state_10642__$1 = state_10642;
                                      var statearr_10655_10719 = state_10642__$1;
                                      statearr_10655_10719[2] = null;
                                      statearr_10655_10719[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10643 === 11) {
                                        var inst_10617 = state_10642[2];
                                        var state_10642__$1 = function() {
                                          var statearr_10656 = state_10642;
                                          statearr_10656[10] = inst_10617;
                                          return statearr_10656;
                                        }();
                                        var statearr_10657_10720 = state_10642__$1;
                                        statearr_10657_10720[2] = null;
                                        statearr_10657_10720[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10643 === 9) {
                                          var state_10642__$1 = state_10642;
                                          var statearr_10658_10721 = state_10642__$1;
                                          statearr_10658_10721[2] = null;
                                          statearr_10658_10721[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_10643 === 5) {
                                            var state_10642__$1 = state_10642;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_10659_10722 = state_10642__$1;
                                              statearr_10659_10722[1] = 8;
                                            } else {
                                              var statearr_10660_10723 = state_10642__$1;
                                              statearr_10660_10723[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_10643 === 14) {
                                              var inst_10620 = state_10642[8];
                                              var inst_10622 = state_10642[11];
                                              var inst_10620__$1 = state_10642[2];
                                              var inst_10621 = inst_10620__$1 == null;
                                              var inst_10622__$1 = cljs.core.not.call(null, inst_10621);
                                              var state_10642__$1 = function() {
                                                var statearr_10661 = state_10642;
                                                statearr_10661[8] = inst_10620__$1;
                                                statearr_10661[11] = inst_10622__$1;
                                                return statearr_10661;
                                              }();
                                              if (inst_10622__$1) {
                                                var statearr_10662_10724 = state_10642__$1;
                                                statearr_10662_10724[1] = 15;
                                              } else {
                                                var statearr_10663_10725 = state_10642__$1;
                                                statearr_10663_10725[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_10643 === 16) {
                                                var inst_10622 = state_10642[11];
                                                var state_10642__$1 = state_10642;
                                                var statearr_10664_10726 = state_10642__$1;
                                                statearr_10664_10726[2] = inst_10622;
                                                statearr_10664_10726[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_10643 === 10) {
                                                  var inst_10614 = state_10642[2];
                                                  var state_10642__$1 = state_10642;
                                                  var statearr_10665_10727 = state_10642__$1;
                                                  statearr_10665_10727[2] = inst_10614;
                                                  statearr_10665_10727[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_10643 === 18) {
                                                    var inst_10625 = state_10642[2];
                                                    var state_10642__$1 = state_10642;
                                                    var statearr_10666_10728 = state_10642__$1;
                                                    statearr_10666_10728[2] = inst_10625;
                                                    statearr_10666_10728[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_10643 === 8) {
                                                      var inst_10611 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_10642__$1 = state_10642;
                                                      var statearr_10667_10729 = state_10642__$1;
                                                      statearr_10667_10729[2] = inst_10611;
                                                      statearr_10667_10729[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7407__auto__, jobs, results, process, async);
        return function(switch__7351__auto__, c__7407__auto__, jobs, results, process, async) {
          return function() {
            var state_machine__7352__auto__ = null;
            var state_machine__7352__auto____0 = function() {
              var statearr_10671 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10671[0] = state_machine__7352__auto__;
              statearr_10671[1] = 1;
              return statearr_10671;
            };
            var state_machine__7352__auto____1 = function(state_10642) {
              while (true) {
                var ret_value__7353__auto__ = function() {
                  try {
                    while (true) {
                      var result__7354__auto__ = switch__7351__auto__.call(null, state_10642);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7354__auto__;
                      }
                      break;
                    }
                  } catch (e10672) {
                    if (e10672 instanceof Object) {
                      var ex__7355__auto__ = e10672;
                      var statearr_10673_10730 = state_10642;
                      statearr_10673_10730[5] = ex__7355__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10642);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10672;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10731 = state_10642;
                  state_10642 = G__10731;
                  continue;
                } else {
                  return ret_value__7353__auto__;
                }
                break;
              }
            };
            state_machine__7352__auto__ = function(state_10642) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7352__auto____0.call(this);
                case 1:
                  return state_machine__7352__auto____1.call(this, state_10642);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
            return state_machine__7352__auto__;
          }();
        }(switch__7351__auto__, c__7407__auto__, jobs, results, process, async);
      }();
      var state__7409__auto__ = function() {
        var statearr_10674 = f__7408__auto__.call(null);
        statearr_10674[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto__;
        return statearr_10674;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
    };
  }(c__7407__auto__, jobs, results, process, async));
  return c__7407__auto__;
};
cljs.core.async.pipeline_async = function() {
  var pipeline_async = null;
  var pipeline_async__4 = function(n, to, af, from) {
    return pipeline_async.call(null, n, to, af, from, true);
  };
  var pipeline_async__5 = function(n, to, af, from, close_QMARK_) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
  };
  pipeline_async = function(n, to, af, from, close_QMARK_) {
    switch(arguments.length) {
      case 4:
        return pipeline_async__4.call(this, n, to, af, from);
      case 5:
        return pipeline_async__5.call(this, n, to, af, from, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline_async.cljs$core$IFn$_invoke$arity$4 = pipeline_async__4;
  pipeline_async.cljs$core$IFn$_invoke$arity$5 = pipeline_async__5;
  return pipeline_async;
}();
cljs.core.async.pipeline = function() {
  var pipeline = null;
  var pipeline__4 = function(n, to, xf, from) {
    return pipeline.call(null, n, to, xf, from, true);
  };
  var pipeline__5 = function(n, to, xf, from, close_QMARK_) {
    return pipeline.call(null, n, to, xf, from, close_QMARK_, null);
  };
  var pipeline__6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
  };
  pipeline = function(n, to, xf, from, close_QMARK_, ex_handler) {
    switch(arguments.length) {
      case 4:
        return pipeline__4.call(this, n, to, xf, from);
      case 5:
        return pipeline__5.call(this, n, to, xf, from, close_QMARK_);
      case 6:
        return pipeline__6.call(this, n, to, xf, from, close_QMARK_, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline.cljs$core$IFn$_invoke$arity$4 = pipeline__4;
  pipeline.cljs$core$IFn$_invoke$arity$5 = pipeline__5;
  pipeline.cljs$core$IFn$_invoke$arity$6 = pipeline__6;
  return pipeline;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__7407__auto___10832 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___10832, tc, fc) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___10832, tc, fc) {
            return function(state_10807) {
              var state_val_10808 = state_10807[1];
              if (state_val_10808 === 7) {
                var inst_10803 = state_10807[2];
                var state_10807__$1 = state_10807;
                var statearr_10809_10833 = state_10807__$1;
                statearr_10809_10833[2] = inst_10803;
                statearr_10809_10833[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10808 === 1) {
                  var state_10807__$1 = state_10807;
                  var statearr_10810_10834 = state_10807__$1;
                  statearr_10810_10834[2] = null;
                  statearr_10810_10834[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10808 === 4) {
                    var inst_10784 = state_10807[7];
                    var inst_10784__$1 = state_10807[2];
                    var inst_10785 = inst_10784__$1 == null;
                    var state_10807__$1 = function() {
                      var statearr_10811 = state_10807;
                      statearr_10811[7] = inst_10784__$1;
                      return statearr_10811;
                    }();
                    if (cljs.core.truth_(inst_10785)) {
                      var statearr_10812_10835 = state_10807__$1;
                      statearr_10812_10835[1] = 5;
                    } else {
                      var statearr_10813_10836 = state_10807__$1;
                      statearr_10813_10836[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10808 === 13) {
                      var state_10807__$1 = state_10807;
                      var statearr_10814_10837 = state_10807__$1;
                      statearr_10814_10837[2] = null;
                      statearr_10814_10837[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10808 === 6) {
                        var inst_10784 = state_10807[7];
                        var inst_10790 = p.call(null, inst_10784);
                        var state_10807__$1 = state_10807;
                        if (cljs.core.truth_(inst_10790)) {
                          var statearr_10815_10838 = state_10807__$1;
                          statearr_10815_10838[1] = 9;
                        } else {
                          var statearr_10816_10839 = state_10807__$1;
                          statearr_10816_10839[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10808 === 3) {
                          var inst_10805 = state_10807[2];
                          var state_10807__$1 = state_10807;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10807__$1, inst_10805);
                        } else {
                          if (state_val_10808 === 12) {
                            var state_10807__$1 = state_10807;
                            var statearr_10817_10840 = state_10807__$1;
                            statearr_10817_10840[2] = null;
                            statearr_10817_10840[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10808 === 2) {
                              var state_10807__$1 = state_10807;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10807__$1, 4, ch);
                            } else {
                              if (state_val_10808 === 11) {
                                var inst_10784 = state_10807[7];
                                var inst_10794 = state_10807[2];
                                var state_10807__$1 = state_10807;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10807__$1, 8, inst_10794, inst_10784);
                              } else {
                                if (state_val_10808 === 9) {
                                  var state_10807__$1 = state_10807;
                                  var statearr_10818_10841 = state_10807__$1;
                                  statearr_10818_10841[2] = tc;
                                  statearr_10818_10841[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10808 === 5) {
                                    var inst_10787 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_10788 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_10807__$1 = function() {
                                      var statearr_10819 = state_10807;
                                      statearr_10819[8] = inst_10787;
                                      return statearr_10819;
                                    }();
                                    var statearr_10820_10842 = state_10807__$1;
                                    statearr_10820_10842[2] = inst_10788;
                                    statearr_10820_10842[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10808 === 14) {
                                      var inst_10801 = state_10807[2];
                                      var state_10807__$1 = state_10807;
                                      var statearr_10821_10843 = state_10807__$1;
                                      statearr_10821_10843[2] = inst_10801;
                                      statearr_10821_10843[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10808 === 10) {
                                        var state_10807__$1 = state_10807;
                                        var statearr_10822_10844 = state_10807__$1;
                                        statearr_10822_10844[2] = fc;
                                        statearr_10822_10844[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10808 === 8) {
                                          var inst_10796 = state_10807[2];
                                          var state_10807__$1 = state_10807;
                                          if (cljs.core.truth_(inst_10796)) {
                                            var statearr_10823_10845 = state_10807__$1;
                                            statearr_10823_10845[1] = 12;
                                          } else {
                                            var statearr_10824_10846 = state_10807__$1;
                                            statearr_10824_10846[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___10832, tc, fc);
          return function(switch__7351__auto__, c__7407__auto___10832, tc, fc) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_10828 = [null, null, null, null, null, null, null, null, null];
                statearr_10828[0] = state_machine__7352__auto__;
                statearr_10828[1] = 1;
                return statearr_10828;
              };
              var state_machine__7352__auto____1 = function(state_10807) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_10807);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e10829) {
                      if (e10829 instanceof Object) {
                        var ex__7355__auto__ = e10829;
                        var statearr_10830_10847 = state_10807;
                        statearr_10830_10847[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10807);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e10829;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__10848 = state_10807;
                    state_10807 = G__10848;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_10807) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_10807);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___10832, tc, fc);
        }();
        var state__7409__auto__ = function() {
          var statearr_10831 = f__7408__auto__.call(null);
          statearr_10831[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___10832;
          return statearr_10831;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___10832, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__7407__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto__) {
    return function() {
      var f__7408__auto__ = function() {
        var switch__7351__auto__ = function(c__7407__auto__) {
          return function(state_10895) {
            var state_val_10896 = state_10895[1];
            if (state_val_10896 === 7) {
              var inst_10891 = state_10895[2];
              var state_10895__$1 = state_10895;
              var statearr_10897_10913 = state_10895__$1;
              statearr_10897_10913[2] = inst_10891;
              statearr_10897_10913[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10896 === 6) {
                var inst_10881 = state_10895[7];
                var inst_10884 = state_10895[8];
                var inst_10888 = f.call(null, inst_10881, inst_10884);
                var inst_10881__$1 = inst_10888;
                var state_10895__$1 = function() {
                  var statearr_10898 = state_10895;
                  statearr_10898[7] = inst_10881__$1;
                  return statearr_10898;
                }();
                var statearr_10899_10914 = state_10895__$1;
                statearr_10899_10914[2] = null;
                statearr_10899_10914[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10896 === 5) {
                  var inst_10881 = state_10895[7];
                  var state_10895__$1 = state_10895;
                  var statearr_10900_10915 = state_10895__$1;
                  statearr_10900_10915[2] = inst_10881;
                  statearr_10900_10915[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10896 === 4) {
                    var inst_10884 = state_10895[8];
                    var inst_10884__$1 = state_10895[2];
                    var inst_10885 = inst_10884__$1 == null;
                    var state_10895__$1 = function() {
                      var statearr_10901 = state_10895;
                      statearr_10901[8] = inst_10884__$1;
                      return statearr_10901;
                    }();
                    if (cljs.core.truth_(inst_10885)) {
                      var statearr_10902_10916 = state_10895__$1;
                      statearr_10902_10916[1] = 5;
                    } else {
                      var statearr_10903_10917 = state_10895__$1;
                      statearr_10903_10917[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10896 === 3) {
                      var inst_10893 = state_10895[2];
                      var state_10895__$1 = state_10895;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10895__$1, inst_10893);
                    } else {
                      if (state_val_10896 === 2) {
                        var state_10895__$1 = state_10895;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10895__$1, 4, ch);
                      } else {
                        if (state_val_10896 === 1) {
                          var inst_10881 = init;
                          var state_10895__$1 = function() {
                            var statearr_10904 = state_10895;
                            statearr_10904[7] = inst_10881;
                            return statearr_10904;
                          }();
                          var statearr_10905_10918 = state_10895__$1;
                          statearr_10905_10918[2] = null;
                          statearr_10905_10918[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7407__auto__);
        return function(switch__7351__auto__, c__7407__auto__) {
          return function() {
            var state_machine__7352__auto__ = null;
            var state_machine__7352__auto____0 = function() {
              var statearr_10909 = [null, null, null, null, null, null, null, null, null];
              statearr_10909[0] = state_machine__7352__auto__;
              statearr_10909[1] = 1;
              return statearr_10909;
            };
            var state_machine__7352__auto____1 = function(state_10895) {
              while (true) {
                var ret_value__7353__auto__ = function() {
                  try {
                    while (true) {
                      var result__7354__auto__ = switch__7351__auto__.call(null, state_10895);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7354__auto__;
                      }
                      break;
                    }
                  } catch (e10910) {
                    if (e10910 instanceof Object) {
                      var ex__7355__auto__ = e10910;
                      var statearr_10911_10919 = state_10895;
                      statearr_10911_10919[5] = ex__7355__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10895);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10910;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10920 = state_10895;
                  state_10895 = G__10920;
                  continue;
                } else {
                  return ret_value__7353__auto__;
                }
                break;
              }
            };
            state_machine__7352__auto__ = function(state_10895) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7352__auto____0.call(this);
                case 1:
                  return state_machine__7352__auto____1.call(this, state_10895);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
            return state_machine__7352__auto__;
          }();
        }(switch__7351__auto__, c__7407__auto__);
      }();
      var state__7409__auto__ = function() {
        var statearr_10912 = f__7408__auto__.call(null);
        statearr_10912[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto__;
        return statearr_10912;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
    };
  }(c__7407__auto__));
  return c__7407__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__7407__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto__) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto__) {
            return function(state_10994) {
              var state_val_10995 = state_10994[1];
              if (state_val_10995 === 7) {
                var inst_10976 = state_10994[2];
                var state_10994__$1 = state_10994;
                var statearr_10996_11019 = state_10994__$1;
                statearr_10996_11019[2] = inst_10976;
                statearr_10996_11019[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10995 === 1) {
                  var inst_10970 = cljs.core.seq.call(null, coll);
                  var inst_10971 = inst_10970;
                  var state_10994__$1 = function() {
                    var statearr_10997 = state_10994;
                    statearr_10997[7] = inst_10971;
                    return statearr_10997;
                  }();
                  var statearr_10998_11020 = state_10994__$1;
                  statearr_10998_11020[2] = null;
                  statearr_10998_11020[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10995 === 4) {
                    var inst_10971 = state_10994[7];
                    var inst_10974 = cljs.core.first.call(null, inst_10971);
                    var state_10994__$1 = state_10994;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10994__$1, 7, ch, inst_10974);
                  } else {
                    if (state_val_10995 === 13) {
                      var inst_10988 = state_10994[2];
                      var state_10994__$1 = state_10994;
                      var statearr_10999_11021 = state_10994__$1;
                      statearr_10999_11021[2] = inst_10988;
                      statearr_10999_11021[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10995 === 6) {
                        var inst_10979 = state_10994[2];
                        var state_10994__$1 = state_10994;
                        if (cljs.core.truth_(inst_10979)) {
                          var statearr_11000_11022 = state_10994__$1;
                          statearr_11000_11022[1] = 8;
                        } else {
                          var statearr_11001_11023 = state_10994__$1;
                          statearr_11001_11023[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10995 === 3) {
                          var inst_10992 = state_10994[2];
                          var state_10994__$1 = state_10994;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10994__$1, inst_10992);
                        } else {
                          if (state_val_10995 === 12) {
                            var state_10994__$1 = state_10994;
                            var statearr_11002_11024 = state_10994__$1;
                            statearr_11002_11024[2] = null;
                            statearr_11002_11024[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10995 === 2) {
                              var inst_10971 = state_10994[7];
                              var state_10994__$1 = state_10994;
                              if (cljs.core.truth_(inst_10971)) {
                                var statearr_11003_11025 = state_10994__$1;
                                statearr_11003_11025[1] = 4;
                              } else {
                                var statearr_11004_11026 = state_10994__$1;
                                statearr_11004_11026[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10995 === 11) {
                                var inst_10985 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_10994__$1 = state_10994;
                                var statearr_11005_11027 = state_10994__$1;
                                statearr_11005_11027[2] = inst_10985;
                                statearr_11005_11027[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10995 === 9) {
                                  var state_10994__$1 = state_10994;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_11006_11028 = state_10994__$1;
                                    statearr_11006_11028[1] = 11;
                                  } else {
                                    var statearr_11007_11029 = state_10994__$1;
                                    statearr_11007_11029[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10995 === 5) {
                                    var inst_10971 = state_10994[7];
                                    var state_10994__$1 = state_10994;
                                    var statearr_11008_11030 = state_10994__$1;
                                    statearr_11008_11030[2] = inst_10971;
                                    statearr_11008_11030[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10995 === 10) {
                                      var inst_10990 = state_10994[2];
                                      var state_10994__$1 = state_10994;
                                      var statearr_11009_11031 = state_10994__$1;
                                      statearr_11009_11031[2] = inst_10990;
                                      statearr_11009_11031[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10995 === 8) {
                                        var inst_10971 = state_10994[7];
                                        var inst_10981 = cljs.core.next.call(null, inst_10971);
                                        var inst_10971__$1 = inst_10981;
                                        var state_10994__$1 = function() {
                                          var statearr_11010 = state_10994;
                                          statearr_11010[7] = inst_10971__$1;
                                          return statearr_11010;
                                        }();
                                        var statearr_11011_11032 = state_10994__$1;
                                        statearr_11011_11032[2] = null;
                                        statearr_11011_11032[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto__);
          return function(switch__7351__auto__, c__7407__auto__) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_11015 = [null, null, null, null, null, null, null, null];
                statearr_11015[0] = state_machine__7352__auto__;
                statearr_11015[1] = 1;
                return statearr_11015;
              };
              var state_machine__7352__auto____1 = function(state_10994) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_10994);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e11016) {
                      if (e11016 instanceof Object) {
                        var ex__7355__auto__ = e11016;
                        var statearr_11017_11033 = state_10994;
                        statearr_11017_11033[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10994);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e11016;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11034 = state_10994;
                    state_10994 = G__11034;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_10994) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_10994);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto__);
        }();
        var state__7409__auto__ = function() {
          var statearr_11018 = f__7408__auto__.call(null);
          statearr_11018[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto__;
          return statearr_11018;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto__));
    return c__7407__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj11036 = {};
  return obj11036;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3785__auto__ = _;
    if (and__3785__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4441__auto__ = _ == null ? null : _;
    return function() {
      var or__3797__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj11038 = {};
  return obj11038;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3785__auto__ = m;
    if (and__3785__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4441__auto__ = m == null ? null : m;
    return function() {
      var or__3797__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3785__auto__ = m;
    if (and__3785__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4441__auto__ = m == null ? null : m;
    return function() {
      var or__3797__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3785__auto__ = m;
    if (and__3785__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4441__auto__ = m == null ? null : m;
    return function() {
      var or__3797__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t11260 !== "undefined") {
    } else {
      cljs.core.async.t11260 = function(cs, ch, mult, meta11261) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta11261 = meta11261;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t11260.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t11260.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t11260.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t11260.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t11260.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t11260.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t11260.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_11262) {
          var self__ = this;
          var _11262__$1 = this;
          return self__.meta11261;
        };
      }(cs);
      cljs.core.async.t11260.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_11262, meta11261__$1) {
          var self__ = this;
          var _11262__$1 = this;
          return new cljs.core.async.t11260(self__.cs, self__.ch, self__.mult, meta11261__$1);
        };
      }(cs);
      cljs.core.async.t11260.cljs$lang$type = true;
      cljs.core.async.t11260.cljs$lang$ctorStr = "cljs.core.async/t11260";
      cljs.core.async.t11260.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
          return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t11260");
        };
      }(cs);
      cljs.core.async.__GT_t11260 = function(cs) {
        return function __GT_t11260(cs__$1, ch__$1, mult__$1, meta11261) {
          return new cljs.core.async.t11260(cs__$1, ch__$1, mult__$1, meta11261);
        };
      }(cs);
    }
    return new cljs.core.async.t11260(cs, ch, mult, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 48, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 397, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 390, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
    null));
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__7407__auto___11481 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___11481, cs, m, dchan, dctr, done) {
    return function() {
      var f__7408__auto__ = function() {
        var switch__7351__auto__ = function(c__7407__auto___11481, cs, m, dchan, dctr, done) {
          return function(state_11393) {
            var state_val_11394 = state_11393[1];
            if (state_val_11394 === 7) {
              var inst_11389 = state_11393[2];
              var state_11393__$1 = state_11393;
              var statearr_11395_11482 = state_11393__$1;
              statearr_11395_11482[2] = inst_11389;
              statearr_11395_11482[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11394 === 20) {
                var inst_11294 = state_11393[7];
                var inst_11304 = cljs.core.first.call(null, inst_11294);
                var inst_11305 = cljs.core.nth.call(null, inst_11304, 0, null);
                var inst_11306 = cljs.core.nth.call(null, inst_11304, 1, null);
                var state_11393__$1 = function() {
                  var statearr_11396 = state_11393;
                  statearr_11396[8] = inst_11305;
                  return statearr_11396;
                }();
                if (cljs.core.truth_(inst_11306)) {
                  var statearr_11397_11483 = state_11393__$1;
                  statearr_11397_11483[1] = 22;
                } else {
                  var statearr_11398_11484 = state_11393__$1;
                  statearr_11398_11484[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11394 === 27) {
                  var inst_11265 = state_11393[9];
                  var inst_11336 = state_11393[10];
                  var inst_11334 = state_11393[11];
                  var inst_11341 = state_11393[12];
                  var inst_11341__$1 = cljs.core._nth.call(null, inst_11334, inst_11336);
                  var inst_11342 = cljs.core.async.put_BANG_.call(null, inst_11341__$1, inst_11265, done);
                  var state_11393__$1 = function() {
                    var statearr_11399 = state_11393;
                    statearr_11399[12] = inst_11341__$1;
                    return statearr_11399;
                  }();
                  if (cljs.core.truth_(inst_11342)) {
                    var statearr_11400_11485 = state_11393__$1;
                    statearr_11400_11485[1] = 30;
                  } else {
                    var statearr_11401_11486 = state_11393__$1;
                    statearr_11401_11486[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11394 === 1) {
                    var state_11393__$1 = state_11393;
                    var statearr_11402_11487 = state_11393__$1;
                    statearr_11402_11487[2] = null;
                    statearr_11402_11487[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11394 === 24) {
                      var inst_11294 = state_11393[7];
                      var inst_11311 = state_11393[2];
                      var inst_11312 = cljs.core.next.call(null, inst_11294);
                      var inst_11274 = inst_11312;
                      var inst_11275 = null;
                      var inst_11276 = 0;
                      var inst_11277 = 0;
                      var state_11393__$1 = function() {
                        var statearr_11403 = state_11393;
                        statearr_11403[13] = inst_11275;
                        statearr_11403[14] = inst_11276;
                        statearr_11403[15] = inst_11274;
                        statearr_11403[16] = inst_11311;
                        statearr_11403[17] = inst_11277;
                        return statearr_11403;
                      }();
                      var statearr_11404_11488 = state_11393__$1;
                      statearr_11404_11488[2] = null;
                      statearr_11404_11488[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11394 === 39) {
                        var state_11393__$1 = state_11393;
                        var statearr_11408_11489 = state_11393__$1;
                        statearr_11408_11489[2] = null;
                        statearr_11408_11489[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11394 === 4) {
                          var inst_11265 = state_11393[9];
                          var inst_11265__$1 = state_11393[2];
                          var inst_11266 = inst_11265__$1 == null;
                          var state_11393__$1 = function() {
                            var statearr_11409 = state_11393;
                            statearr_11409[9] = inst_11265__$1;
                            return statearr_11409;
                          }();
                          if (cljs.core.truth_(inst_11266)) {
                            var statearr_11410_11490 = state_11393__$1;
                            statearr_11410_11490[1] = 5;
                          } else {
                            var statearr_11411_11491 = state_11393__$1;
                            statearr_11411_11491[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11394 === 15) {
                            var inst_11275 = state_11393[13];
                            var inst_11276 = state_11393[14];
                            var inst_11274 = state_11393[15];
                            var inst_11277 = state_11393[17];
                            var inst_11290 = state_11393[2];
                            var inst_11291 = inst_11277 + 1;
                            var tmp11405 = inst_11275;
                            var tmp11406 = inst_11276;
                            var tmp11407 = inst_11274;
                            var inst_11274__$1 = tmp11407;
                            var inst_11275__$1 = tmp11405;
                            var inst_11276__$1 = tmp11406;
                            var inst_11277__$1 = inst_11291;
                            var state_11393__$1 = function() {
                              var statearr_11412 = state_11393;
                              statearr_11412[13] = inst_11275__$1;
                              statearr_11412[14] = inst_11276__$1;
                              statearr_11412[18] = inst_11290;
                              statearr_11412[15] = inst_11274__$1;
                              statearr_11412[17] = inst_11277__$1;
                              return statearr_11412;
                            }();
                            var statearr_11413_11492 = state_11393__$1;
                            statearr_11413_11492[2] = null;
                            statearr_11413_11492[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11394 === 21) {
                              var inst_11315 = state_11393[2];
                              var state_11393__$1 = state_11393;
                              var statearr_11417_11493 = state_11393__$1;
                              statearr_11417_11493[2] = inst_11315;
                              statearr_11417_11493[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11394 === 31) {
                                var inst_11341 = state_11393[12];
                                var inst_11345 = done.call(null, null);
                                var inst_11346 = cljs.core.async.untap_STAR_.call(null, m, inst_11341);
                                var state_11393__$1 = function() {
                                  var statearr_11418 = state_11393;
                                  statearr_11418[19] = inst_11345;
                                  return statearr_11418;
                                }();
                                var statearr_11419_11494 = state_11393__$1;
                                statearr_11419_11494[2] = inst_11346;
                                statearr_11419_11494[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11394 === 32) {
                                  var inst_11333 = state_11393[20];
                                  var inst_11335 = state_11393[21];
                                  var inst_11336 = state_11393[10];
                                  var inst_11334 = state_11393[11];
                                  var inst_11348 = state_11393[2];
                                  var inst_11349 = inst_11336 + 1;
                                  var tmp11414 = inst_11333;
                                  var tmp11415 = inst_11335;
                                  var tmp11416 = inst_11334;
                                  var inst_11333__$1 = tmp11414;
                                  var inst_11334__$1 = tmp11416;
                                  var inst_11335__$1 = tmp11415;
                                  var inst_11336__$1 = inst_11349;
                                  var state_11393__$1 = function() {
                                    var statearr_11420 = state_11393;
                                    statearr_11420[20] = inst_11333__$1;
                                    statearr_11420[21] = inst_11335__$1;
                                    statearr_11420[10] = inst_11336__$1;
                                    statearr_11420[11] = inst_11334__$1;
                                    statearr_11420[22] = inst_11348;
                                    return statearr_11420;
                                  }();
                                  var statearr_11421_11495 = state_11393__$1;
                                  statearr_11421_11495[2] = null;
                                  statearr_11421_11495[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11394 === 40) {
                                    var inst_11361 = state_11393[23];
                                    var inst_11365 = done.call(null, null);
                                    var inst_11366 = cljs.core.async.untap_STAR_.call(null, m, inst_11361);
                                    var state_11393__$1 = function() {
                                      var statearr_11422 = state_11393;
                                      statearr_11422[24] = inst_11365;
                                      return statearr_11422;
                                    }();
                                    var statearr_11423_11496 = state_11393__$1;
                                    statearr_11423_11496[2] = inst_11366;
                                    statearr_11423_11496[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11394 === 33) {
                                      var inst_11352 = state_11393[25];
                                      var inst_11354 = cljs.core.chunked_seq_QMARK_.call(null, inst_11352);
                                      var state_11393__$1 = state_11393;
                                      if (inst_11354) {
                                        var statearr_11424_11497 = state_11393__$1;
                                        statearr_11424_11497[1] = 36;
                                      } else {
                                        var statearr_11425_11498 = state_11393__$1;
                                        statearr_11425_11498[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11394 === 13) {
                                        var inst_11284 = state_11393[26];
                                        var inst_11287 = cljs.core.async.close_BANG_.call(null, inst_11284);
                                        var state_11393__$1 = state_11393;
                                        var statearr_11426_11499 = state_11393__$1;
                                        statearr_11426_11499[2] = inst_11287;
                                        statearr_11426_11499[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11394 === 22) {
                                          var inst_11305 = state_11393[8];
                                          var inst_11308 = cljs.core.async.close_BANG_.call(null, inst_11305);
                                          var state_11393__$1 = state_11393;
                                          var statearr_11427_11500 = state_11393__$1;
                                          statearr_11427_11500[2] = inst_11308;
                                          statearr_11427_11500[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11394 === 36) {
                                            var inst_11352 = state_11393[25];
                                            var inst_11356 = cljs.core.chunk_first.call(null, inst_11352);
                                            var inst_11357 = cljs.core.chunk_rest.call(null, inst_11352);
                                            var inst_11358 = cljs.core.count.call(null, inst_11356);
                                            var inst_11333 = inst_11357;
                                            var inst_11334 = inst_11356;
                                            var inst_11335 = inst_11358;
                                            var inst_11336 = 0;
                                            var state_11393__$1 = function() {
                                              var statearr_11428 = state_11393;
                                              statearr_11428[20] = inst_11333;
                                              statearr_11428[21] = inst_11335;
                                              statearr_11428[10] = inst_11336;
                                              statearr_11428[11] = inst_11334;
                                              return statearr_11428;
                                            }();
                                            var statearr_11429_11501 = state_11393__$1;
                                            statearr_11429_11501[2] = null;
                                            statearr_11429_11501[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11394 === 41) {
                                              var inst_11352 = state_11393[25];
                                              var inst_11368 = state_11393[2];
                                              var inst_11369 = cljs.core.next.call(null, inst_11352);
                                              var inst_11333 = inst_11369;
                                              var inst_11334 = null;
                                              var inst_11335 = 0;
                                              var inst_11336 = 0;
                                              var state_11393__$1 = function() {
                                                var statearr_11430 = state_11393;
                                                statearr_11430[27] = inst_11368;
                                                statearr_11430[20] = inst_11333;
                                                statearr_11430[21] = inst_11335;
                                                statearr_11430[10] = inst_11336;
                                                statearr_11430[11] = inst_11334;
                                                return statearr_11430;
                                              }();
                                              var statearr_11431_11502 = state_11393__$1;
                                              statearr_11431_11502[2] = null;
                                              statearr_11431_11502[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11394 === 43) {
                                                var state_11393__$1 = state_11393;
                                                var statearr_11432_11503 = state_11393__$1;
                                                statearr_11432_11503[2] = null;
                                                statearr_11432_11503[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11394 === 29) {
                                                  var inst_11377 = state_11393[2];
                                                  var state_11393__$1 = state_11393;
                                                  var statearr_11433_11504 = state_11393__$1;
                                                  statearr_11433_11504[2] = inst_11377;
                                                  statearr_11433_11504[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11394 === 44) {
                                                    var inst_11386 = state_11393[2];
                                                    var state_11393__$1 = function() {
                                                      var statearr_11434 = state_11393;
                                                      statearr_11434[28] = inst_11386;
                                                      return statearr_11434;
                                                    }();
                                                    var statearr_11435_11505 = state_11393__$1;
                                                    statearr_11435_11505[2] = null;
                                                    statearr_11435_11505[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11394 === 6) {
                                                      var inst_11325 = state_11393[29];
                                                      var inst_11324 = cljs.core.deref.call(null, cs);
                                                      var inst_11325__$1 = cljs.core.keys.call(null, inst_11324);
                                                      var inst_11326 = cljs.core.count.call(null, inst_11325__$1);
                                                      var inst_11327 = cljs.core.reset_BANG_.call(null, dctr, inst_11326);
                                                      var inst_11332 = cljs.core.seq.call(null, inst_11325__$1);
                                                      var inst_11333 = inst_11332;
                                                      var inst_11334 = null;
                                                      var inst_11335 = 0;
                                                      var inst_11336 = 0;
                                                      var state_11393__$1 = function() {
                                                        var statearr_11436 = state_11393;
                                                        statearr_11436[20] = inst_11333;
                                                        statearr_11436[21] = inst_11335;
                                                        statearr_11436[10] = inst_11336;
                                                        statearr_11436[29] = inst_11325__$1;
                                                        statearr_11436[11] = inst_11334;
                                                        statearr_11436[30] = inst_11327;
                                                        return statearr_11436;
                                                      }();
                                                      var statearr_11437_11506 = state_11393__$1;
                                                      statearr_11437_11506[2] = null;
                                                      statearr_11437_11506[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11394 === 28) {
                                                        var inst_11352 = state_11393[25];
                                                        var inst_11333 = state_11393[20];
                                                        var inst_11352__$1 = cljs.core.seq.call(null, inst_11333);
                                                        var state_11393__$1 = function() {
                                                          var statearr_11438 = state_11393;
                                                          statearr_11438[25] = inst_11352__$1;
                                                          return statearr_11438;
                                                        }();
                                                        if (inst_11352__$1) {
                                                          var statearr_11439_11507 = state_11393__$1;
                                                          statearr_11439_11507[1] = 33;
                                                        } else {
                                                          var statearr_11440_11508 = state_11393__$1;
                                                          statearr_11440_11508[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11394 === 25) {
                                                          var inst_11335 = state_11393[21];
                                                          var inst_11336 = state_11393[10];
                                                          var inst_11338 = inst_11336 < inst_11335;
                                                          var inst_11339 = inst_11338;
                                                          var state_11393__$1 = state_11393;
                                                          if (cljs.core.truth_(inst_11339)) {
                                                            var statearr_11441_11509 = state_11393__$1;
                                                            statearr_11441_11509[1] = 27;
                                                          } else {
                                                            var statearr_11442_11510 = state_11393__$1;
                                                            statearr_11442_11510[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11394 === 34) {
                                                            var state_11393__$1 = state_11393;
                                                            var statearr_11443_11511 = state_11393__$1;
                                                            statearr_11443_11511[2] = null;
                                                            statearr_11443_11511[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11394 === 17) {
                                                              var state_11393__$1 = state_11393;
                                                              var statearr_11444_11512 = state_11393__$1;
                                                              statearr_11444_11512[2] = null;
                                                              statearr_11444_11512[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11394 === 3) {
                                                                var inst_11391 = state_11393[2];
                                                                var state_11393__$1 = state_11393;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11393__$1, inst_11391);
                                                              } else {
                                                                if (state_val_11394 === 12) {
                                                                  var inst_11320 = state_11393[2];
                                                                  var state_11393__$1 = state_11393;
                                                                  var statearr_11445_11513 = state_11393__$1;
                                                                  statearr_11445_11513[2] = inst_11320;
                                                                  statearr_11445_11513[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_11394 === 2) {
                                                                    var state_11393__$1 = state_11393;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11393__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_11394 === 23) {
                                                                      var state_11393__$1 = state_11393;
                                                                      var statearr_11446_11514 = state_11393__$1;
                                                                      statearr_11446_11514[2] = null;
                                                                      statearr_11446_11514[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_11394 === 35) {
                                                                        var inst_11375 = state_11393[2];
                                                                        var state_11393__$1 = state_11393;
                                                                        var statearr_11447_11515 = state_11393__$1;
                                                                        statearr_11447_11515[2] = inst_11375;
                                                                        statearr_11447_11515[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_11394 === 19) {
                                                                          var inst_11294 = state_11393[7];
                                                                          var inst_11298 = cljs.core.chunk_first.call(null, inst_11294);
                                                                          var inst_11299 = cljs.core.chunk_rest.call(null, inst_11294);
                                                                          var inst_11300 = cljs.core.count.call(null, inst_11298);
                                                                          var inst_11274 = inst_11299;
                                                                          var inst_11275 = inst_11298;
                                                                          var inst_11276 = inst_11300;
                                                                          var inst_11277 = 0;
                                                                          var state_11393__$1 = function() {
                                                                            var statearr_11448 = state_11393;
                                                                            statearr_11448[13] = inst_11275;
                                                                            statearr_11448[14] = inst_11276;
                                                                            statearr_11448[15] = inst_11274;
                                                                            statearr_11448[17] = inst_11277;
                                                                            return statearr_11448;
                                                                          }();
                                                                          var statearr_11449_11516 = state_11393__$1;
                                                                          statearr_11449_11516[2] = null;
                                                                          statearr_11449_11516[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_11394 === 11) {
                                                                            var inst_11294 = state_11393[7];
                                                                            var inst_11274 = state_11393[15];
                                                                            var inst_11294__$1 = cljs.core.seq.call(null, inst_11274);
                                                                            var state_11393__$1 = function() {
                                                                              var statearr_11450 = state_11393;
                                                                              statearr_11450[7] = inst_11294__$1;
                                                                              return statearr_11450;
                                                                            }();
                                                                            if (inst_11294__$1) {
                                                                              var statearr_11451_11517 = state_11393__$1;
                                                                              statearr_11451_11517[1] = 16;
                                                                            } else {
                                                                              var statearr_11452_11518 = state_11393__$1;
                                                                              statearr_11452_11518[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_11394 === 9) {
                                                                              var inst_11322 = state_11393[2];
                                                                              var state_11393__$1 = state_11393;
                                                                              var statearr_11453_11519 = state_11393__$1;
                                                                              statearr_11453_11519[2] = inst_11322;
                                                                              statearr_11453_11519[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_11394 === 5) {
                                                                                var inst_11272 = cljs.core.deref.call(null, cs);
                                                                                var inst_11273 = cljs.core.seq.call(null, inst_11272);
                                                                                var inst_11274 = inst_11273;
                                                                                var inst_11275 = null;
                                                                                var inst_11276 = 0;
                                                                                var inst_11277 = 0;
                                                                                var state_11393__$1 = function() {
                                                                                  var statearr_11454 = state_11393;
                                                                                  statearr_11454[13] = inst_11275;
                                                                                  statearr_11454[14] = inst_11276;
                                                                                  statearr_11454[15] = inst_11274;
                                                                                  statearr_11454[17] = inst_11277;
                                                                                  return statearr_11454;
                                                                                }();
                                                                                var statearr_11455_11520 = state_11393__$1;
                                                                                statearr_11455_11520[2] = null;
                                                                                statearr_11455_11520[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_11394 === 14) {
                                                                                  var state_11393__$1 = state_11393;
                                                                                  var statearr_11456_11521 = state_11393__$1;
                                                                                  statearr_11456_11521[2] = null;
                                                                                  statearr_11456_11521[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_11394 === 45) {
                                                                                    var inst_11383 = state_11393[2];
                                                                                    var state_11393__$1 = state_11393;
                                                                                    var statearr_11457_11522 = state_11393__$1;
                                                                                    statearr_11457_11522[2] = inst_11383;
                                                                                    statearr_11457_11522[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_11394 === 26) {
                                                                                      var inst_11325 = state_11393[29];
                                                                                      var inst_11379 = state_11393[2];
                                                                                      var inst_11380 = cljs.core.seq.call(null, inst_11325);
                                                                                      var state_11393__$1 = function() {
                                                                                        var statearr_11458 = state_11393;
                                                                                        statearr_11458[31] = inst_11379;
                                                                                        return statearr_11458;
                                                                                      }();
                                                                                      if (inst_11380) {
                                                                                        var statearr_11459_11523 = state_11393__$1;
                                                                                        statearr_11459_11523[1] = 42;
                                                                                      } else {
                                                                                        var statearr_11460_11524 = state_11393__$1;
                                                                                        statearr_11460_11524[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_11394 === 16) {
                                                                                        var inst_11294 = state_11393[7];
                                                                                        var inst_11296 = cljs.core.chunked_seq_QMARK_.call(null, inst_11294);
                                                                                        var state_11393__$1 = state_11393;
                                                                                        if (inst_11296) {
                                                                                          var statearr_11461_11525 = state_11393__$1;
                                                                                          statearr_11461_11525[1] = 19;
                                                                                        } else {
                                                                                          var statearr_11462_11526 = state_11393__$1;
                                                                                          statearr_11462_11526[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_11394 === 38) {
                                                                                          var inst_11372 = state_11393[2];
                                                                                          var state_11393__$1 = state_11393;
                                                                                          var statearr_11463_11527 = state_11393__$1;
                                                                                          statearr_11463_11527[2] = inst_11372;
                                                                                          statearr_11463_11527[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_11394 === 30) {
                                                                                            var state_11393__$1 = state_11393;
                                                                                            var statearr_11464_11528 = state_11393__$1;
                                                                                            statearr_11464_11528[2] = null;
                                                                                            statearr_11464_11528[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_11394 === 10) {
                                                                                              var inst_11275 = state_11393[13];
                                                                                              var inst_11277 = state_11393[17];
                                                                                              var inst_11283 = cljs.core._nth.call(null, inst_11275, inst_11277);
                                                                                              var inst_11284 = cljs.core.nth.call(null, inst_11283, 0, null);
                                                                                              var inst_11285 = cljs.core.nth.call(null, inst_11283, 1, null);
                                                                                              var state_11393__$1 = function() {
                                                                                                var statearr_11465 = state_11393;
                                                                                                statearr_11465[26] = inst_11284;
                                                                                                return statearr_11465;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_11285)) {
                                                                                                var statearr_11466_11529 = state_11393__$1;
                                                                                                statearr_11466_11529[1] = 13;
                                                                                              } else {
                                                                                                var statearr_11467_11530 = state_11393__$1;
                                                                                                statearr_11467_11530[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_11394 === 18) {
                                                                                                var inst_11318 = state_11393[2];
                                                                                                var state_11393__$1 = state_11393;
                                                                                                var statearr_11468_11531 = state_11393__$1;
                                                                                                statearr_11468_11531[2] = inst_11318;
                                                                                                statearr_11468_11531[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_11394 === 42) {
                                                                                                  var state_11393__$1 = state_11393;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11393__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_11394 === 37) {
                                                                                                    var inst_11352 = state_11393[25];
                                                                                                    var inst_11265 = state_11393[9];
                                                                                                    var inst_11361 = state_11393[23];
                                                                                                    var inst_11361__$1 = cljs.core.first.call(null, inst_11352);
                                                                                                    var inst_11362 = cljs.core.async.put_BANG_.call(null, inst_11361__$1, inst_11265, done);
                                                                                                    var state_11393__$1 = function() {
                                                                                                      var statearr_11469 = state_11393;
                                                                                                      statearr_11469[23] = inst_11361__$1;
                                                                                                      return statearr_11469;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_11362)) {
                                                                                                      var statearr_11470_11532 = state_11393__$1;
                                                                                                      statearr_11470_11532[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_11471_11533 = state_11393__$1;
                                                                                                      statearr_11471_11533[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_11394 === 8) {
                                                                                                      var inst_11276 = state_11393[14];
                                                                                                      var inst_11277 = state_11393[17];
                                                                                                      var inst_11279 = inst_11277 < inst_11276;
                                                                                                      var inst_11280 = inst_11279;
                                                                                                      var state_11393__$1 = state_11393;
                                                                                                      if (cljs.core.truth_(inst_11280)) {
                                                                                                        var statearr_11472_11534 = state_11393__$1;
                                                                                                        statearr_11472_11534[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_11473_11535 = state_11393__$1;
                                                                                                        statearr_11473_11535[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7407__auto___11481, cs, m, dchan, dctr, done);
        return function(switch__7351__auto__, c__7407__auto___11481, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__7352__auto__ = null;
            var state_machine__7352__auto____0 = function() {
              var statearr_11477 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11477[0] = state_machine__7352__auto__;
              statearr_11477[1] = 1;
              return statearr_11477;
            };
            var state_machine__7352__auto____1 = function(state_11393) {
              while (true) {
                var ret_value__7353__auto__ = function() {
                  try {
                    while (true) {
                      var result__7354__auto__ = switch__7351__auto__.call(null, state_11393);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7354__auto__;
                      }
                      break;
                    }
                  } catch (e11478) {
                    if (e11478 instanceof Object) {
                      var ex__7355__auto__ = e11478;
                      var statearr_11479_11536 = state_11393;
                      statearr_11479_11536[5] = ex__7355__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11393);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11478;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11537 = state_11393;
                  state_11393 = G__11537;
                  continue;
                } else {
                  return ret_value__7353__auto__;
                }
                break;
              }
            };
            state_machine__7352__auto__ = function(state_11393) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7352__auto____0.call(this);
                case 1:
                  return state_machine__7352__auto____1.call(this, state_11393);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
            return state_machine__7352__auto__;
          }();
        }(switch__7351__auto__, c__7407__auto___11481, cs, m, dchan, dctr, done);
      }();
      var state__7409__auto__ = function() {
        var statearr_11480 = f__7408__auto__.call(null);
        statearr_11480[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___11481;
        return statearr_11480;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
    };
  }(c__7407__auto___11481, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj11539 = {};
  return obj11539;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3785__auto__ = m;
    if (and__3785__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4441__auto__ = m == null ? null : m;
    return function() {
      var or__3797__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3785__auto__ = m;
    if (and__3785__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4441__auto__ = m == null ? null : m;
    return function() {
      var or__3797__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3785__auto__ = m;
    if (and__3785__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4441__auto__ = m == null ? null : m;
    return function() {
      var or__3797__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3785__auto__ = m;
    if (and__3785__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4441__auto__ = m == null ? null : m;
    return function() {
      var or__3797__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3785__auto__ = m;
    if (and__3785__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4441__auto__ = m == null ? null : m;
    return function() {
      var or__3797__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__11540) {
    var map__11545 = p__11540;
    var map__11545__$1 = cljs.core.seq_QMARK_.call(null, map__11545) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11545) : map__11545;
    var opts = map__11545__$1;
    var statearr_11546_11549 = state;
    statearr_11546_11549[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__11545, map__11545__$1, opts) {
      return function(val) {
        var statearr_11547_11550 = state;
        statearr_11547_11550[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__11545, map__11545__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_11548_11551 = state;
      statearr_11548_11551[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__11540 = null;
    if (arguments.length > 3) {
      var G__11552__i = 0, G__11552__a = new Array(arguments.length - 3);
      while (G__11552__i < G__11552__a.length) {
        G__11552__a[G__11552__i] = arguments[G__11552__i + 3];
        ++G__11552__i;
      }
      p__11540 = new cljs.core.IndexedSeq(G__11552__a, 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__11540);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__11553) {
    var state = cljs.core.first(arglist__11553);
    arglist__11553 = cljs.core.next(arglist__11553);
    var cont_block = cljs.core.first(arglist__11553);
    arglist__11553 = cljs.core.next(arglist__11553);
    var ports = cljs.core.first(arglist__11553);
    var p__11540 = cljs.core.rest(arglist__11553);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__11540);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t11673 !== "undefined") {
    } else {
      cljs.core.async.t11673 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta11674) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta11674 = meta11674;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t11673.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t11673.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11673.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11673.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11673.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11673.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11673.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t11673.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11673.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11675) {
          var self__ = this;
          var _11675__$1 = this;
          return self__.meta11674;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11673.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11675, meta11674__$1) {
          var self__ = this;
          var _11675__$1 = this;
          return new cljs.core.async.t11673(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta11674__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11673.cljs$lang$type = true;
      cljs.core.async.t11673.cljs$lang$ctorStr = "cljs.core.async/t11673";
      cljs.core.async.t11673.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
          return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t11673");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t11673 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t11673(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta11674) {
          return new cljs.core.async.t11673(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta11674);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t11673(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 25, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 510, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 499, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
    null));
  }();
  var c__7407__auto___11792 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___11792, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__7408__auto__ = function() {
        var switch__7351__auto__ = function(c__7407__auto___11792, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_11745) {
            var state_val_11746 = state_11745[1];
            if (state_val_11746 === 7) {
              var inst_11689 = state_11745[7];
              var inst_11694 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11689);
              var state_11745__$1 = state_11745;
              var statearr_11747_11793 = state_11745__$1;
              statearr_11747_11793[2] = inst_11694;
              statearr_11747_11793[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11746 === 20) {
                var inst_11704 = state_11745[8];
                var state_11745__$1 = state_11745;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11745__$1, 23, out, inst_11704);
              } else {
                if (state_val_11746 === 1) {
                  var inst_11679 = state_11745[9];
                  var inst_11679__$1 = calc_state.call(null);
                  var inst_11680 = cljs.core.seq_QMARK_.call(null, inst_11679__$1);
                  var state_11745__$1 = function() {
                    var statearr_11748 = state_11745;
                    statearr_11748[9] = inst_11679__$1;
                    return statearr_11748;
                  }();
                  if (inst_11680) {
                    var statearr_11749_11794 = state_11745__$1;
                    statearr_11749_11794[1] = 2;
                  } else {
                    var statearr_11750_11795 = state_11745__$1;
                    statearr_11750_11795[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11746 === 24) {
                    var inst_11697 = state_11745[10];
                    var inst_11689 = inst_11697;
                    var state_11745__$1 = function() {
                      var statearr_11751 = state_11745;
                      statearr_11751[7] = inst_11689;
                      return statearr_11751;
                    }();
                    var statearr_11752_11796 = state_11745__$1;
                    statearr_11752_11796[2] = null;
                    statearr_11752_11796[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11746 === 4) {
                      var inst_11679 = state_11745[9];
                      var inst_11685 = state_11745[2];
                      var inst_11686 = cljs.core.get.call(null, inst_11685, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_11687 = cljs.core.get.call(null, inst_11685, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_11688 = cljs.core.get.call(null, inst_11685, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_11689 = inst_11679;
                      var state_11745__$1 = function() {
                        var statearr_11753 = state_11745;
                        statearr_11753[7] = inst_11689;
                        statearr_11753[11] = inst_11688;
                        statearr_11753[12] = inst_11687;
                        statearr_11753[13] = inst_11686;
                        return statearr_11753;
                      }();
                      var statearr_11754_11797 = state_11745__$1;
                      statearr_11754_11797[2] = null;
                      statearr_11754_11797[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11746 === 15) {
                        var state_11745__$1 = state_11745;
                        var statearr_11755_11798 = state_11745__$1;
                        statearr_11755_11798[2] = null;
                        statearr_11755_11798[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11746 === 21) {
                          var inst_11697 = state_11745[10];
                          var inst_11689 = inst_11697;
                          var state_11745__$1 = function() {
                            var statearr_11756 = state_11745;
                            statearr_11756[7] = inst_11689;
                            return statearr_11756;
                          }();
                          var statearr_11757_11799 = state_11745__$1;
                          statearr_11757_11799[2] = null;
                          statearr_11757_11799[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11746 === 13) {
                            var inst_11741 = state_11745[2];
                            var state_11745__$1 = state_11745;
                            var statearr_11758_11800 = state_11745__$1;
                            statearr_11758_11800[2] = inst_11741;
                            statearr_11758_11800[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11746 === 22) {
                              var inst_11739 = state_11745[2];
                              var state_11745__$1 = state_11745;
                              var statearr_11759_11801 = state_11745__$1;
                              statearr_11759_11801[2] = inst_11739;
                              statearr_11759_11801[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11746 === 6) {
                                var inst_11743 = state_11745[2];
                                var state_11745__$1 = state_11745;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11745__$1, inst_11743);
                              } else {
                                if (state_val_11746 === 25) {
                                  var state_11745__$1 = state_11745;
                                  var statearr_11760_11802 = state_11745__$1;
                                  statearr_11760_11802[2] = null;
                                  statearr_11760_11802[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11746 === 17) {
                                    var inst_11719 = state_11745[14];
                                    var state_11745__$1 = state_11745;
                                    var statearr_11761_11803 = state_11745__$1;
                                    statearr_11761_11803[2] = inst_11719;
                                    statearr_11761_11803[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11746 === 3) {
                                      var inst_11679 = state_11745[9];
                                      var state_11745__$1 = state_11745;
                                      var statearr_11762_11804 = state_11745__$1;
                                      statearr_11762_11804[2] = inst_11679;
                                      statearr_11762_11804[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11746 === 12) {
                                        var inst_11705 = state_11745[15];
                                        var inst_11719 = state_11745[14];
                                        var inst_11700 = state_11745[16];
                                        var inst_11719__$1 = inst_11700.call(null, inst_11705);
                                        var state_11745__$1 = function() {
                                          var statearr_11763 = state_11745;
                                          statearr_11763[14] = inst_11719__$1;
                                          return statearr_11763;
                                        }();
                                        if (cljs.core.truth_(inst_11719__$1)) {
                                          var statearr_11764_11805 = state_11745__$1;
                                          statearr_11764_11805[1] = 17;
                                        } else {
                                          var statearr_11765_11806 = state_11745__$1;
                                          statearr_11765_11806[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11746 === 2) {
                                          var inst_11679 = state_11745[9];
                                          var inst_11682 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11679);
                                          var state_11745__$1 = state_11745;
                                          var statearr_11766_11807 = state_11745__$1;
                                          statearr_11766_11807[2] = inst_11682;
                                          statearr_11766_11807[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11746 === 23) {
                                            var inst_11730 = state_11745[2];
                                            var state_11745__$1 = state_11745;
                                            if (cljs.core.truth_(inst_11730)) {
                                              var statearr_11767_11808 = state_11745__$1;
                                              statearr_11767_11808[1] = 24;
                                            } else {
                                              var statearr_11768_11809 = state_11745__$1;
                                              statearr_11768_11809[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11746 === 19) {
                                              var inst_11727 = state_11745[2];
                                              var state_11745__$1 = state_11745;
                                              if (cljs.core.truth_(inst_11727)) {
                                                var statearr_11769_11810 = state_11745__$1;
                                                statearr_11769_11810[1] = 20;
                                              } else {
                                                var statearr_11770_11811 = state_11745__$1;
                                                statearr_11770_11811[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11746 === 11) {
                                                var inst_11704 = state_11745[8];
                                                var inst_11710 = inst_11704 == null;
                                                var state_11745__$1 = state_11745;
                                                if (cljs.core.truth_(inst_11710)) {
                                                  var statearr_11771_11812 = state_11745__$1;
                                                  statearr_11771_11812[1] = 14;
                                                } else {
                                                  var statearr_11772_11813 = state_11745__$1;
                                                  statearr_11772_11813[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11746 === 9) {
                                                  var inst_11697 = state_11745[10];
                                                  var inst_11697__$1 = state_11745[2];
                                                  var inst_11698 = cljs.core.get.call(null, inst_11697__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_11699 = cljs.core.get.call(null, inst_11697__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_11700 = cljs.core.get.call(null, inst_11697__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_11745__$1 = function() {
                                                    var statearr_11773 = state_11745;
                                                    statearr_11773[17] = inst_11699;
                                                    statearr_11773[16] = inst_11700;
                                                    statearr_11773[10] = inst_11697__$1;
                                                    return statearr_11773;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_11745__$1, 10, inst_11698);
                                                } else {
                                                  if (state_val_11746 === 5) {
                                                    var inst_11689 = state_11745[7];
                                                    var inst_11692 = cljs.core.seq_QMARK_.call(null, inst_11689);
                                                    var state_11745__$1 = state_11745;
                                                    if (inst_11692) {
                                                      var statearr_11774_11814 = state_11745__$1;
                                                      statearr_11774_11814[1] = 7;
                                                    } else {
                                                      var statearr_11775_11815 = state_11745__$1;
                                                      statearr_11775_11815[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11746 === 14) {
                                                      var inst_11705 = state_11745[15];
                                                      var inst_11712 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_11705);
                                                      var state_11745__$1 = state_11745;
                                                      var statearr_11776_11816 = state_11745__$1;
                                                      statearr_11776_11816[2] = inst_11712;
                                                      statearr_11776_11816[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11746 === 26) {
                                                        var inst_11735 = state_11745[2];
                                                        var state_11745__$1 = state_11745;
                                                        var statearr_11777_11817 = state_11745__$1;
                                                        statearr_11777_11817[2] = inst_11735;
                                                        statearr_11777_11817[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11746 === 16) {
                                                          var inst_11715 = state_11745[2];
                                                          var inst_11716 = calc_state.call(null);
                                                          var inst_11689 = inst_11716;
                                                          var state_11745__$1 = function() {
                                                            var statearr_11778 = state_11745;
                                                            statearr_11778[7] = inst_11689;
                                                            statearr_11778[18] = inst_11715;
                                                            return statearr_11778;
                                                          }();
                                                          var statearr_11779_11818 = state_11745__$1;
                                                          statearr_11779_11818[2] = null;
                                                          statearr_11779_11818[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11746 === 10) {
                                                            var inst_11705 = state_11745[15];
                                                            var inst_11704 = state_11745[8];
                                                            var inst_11703 = state_11745[2];
                                                            var inst_11704__$1 = cljs.core.nth.call(null, inst_11703, 0, null);
                                                            var inst_11705__$1 = cljs.core.nth.call(null, inst_11703, 1, null);
                                                            var inst_11706 = inst_11704__$1 == null;
                                                            var inst_11707 = cljs.core._EQ_.call(null, inst_11705__$1, change);
                                                            var inst_11708 = inst_11706 || inst_11707;
                                                            var state_11745__$1 = function() {
                                                              var statearr_11780 = state_11745;
                                                              statearr_11780[15] = inst_11705__$1;
                                                              statearr_11780[8] = inst_11704__$1;
                                                              return statearr_11780;
                                                            }();
                                                            if (cljs.core.truth_(inst_11708)) {
                                                              var statearr_11781_11819 = state_11745__$1;
                                                              statearr_11781_11819[1] = 11;
                                                            } else {
                                                              var statearr_11782_11820 = state_11745__$1;
                                                              statearr_11782_11820[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11746 === 18) {
                                                              var inst_11705 = state_11745[15];
                                                              var inst_11699 = state_11745[17];
                                                              var inst_11700 = state_11745[16];
                                                              var inst_11722 = cljs.core.empty_QMARK_.call(null, inst_11700);
                                                              var inst_11723 = inst_11699.call(null, inst_11705);
                                                              var inst_11724 = cljs.core.not.call(null, inst_11723);
                                                              var inst_11725 = inst_11722 && inst_11724;
                                                              var state_11745__$1 = state_11745;
                                                              var statearr_11783_11821 = state_11745__$1;
                                                              statearr_11783_11821[2] = inst_11725;
                                                              statearr_11783_11821[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11746 === 8) {
                                                                var inst_11689 = state_11745[7];
                                                                var state_11745__$1 = state_11745;
                                                                var statearr_11784_11822 = state_11745__$1;
                                                                statearr_11784_11822[2] = inst_11689;
                                                                statearr_11784_11822[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7407__auto___11792, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__7351__auto__, c__7407__auto___11792, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__7352__auto__ = null;
            var state_machine__7352__auto____0 = function() {
              var statearr_11788 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11788[0] = state_machine__7352__auto__;
              statearr_11788[1] = 1;
              return statearr_11788;
            };
            var state_machine__7352__auto____1 = function(state_11745) {
              while (true) {
                var ret_value__7353__auto__ = function() {
                  try {
                    while (true) {
                      var result__7354__auto__ = switch__7351__auto__.call(null, state_11745);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7354__auto__;
                      }
                      break;
                    }
                  } catch (e11789) {
                    if (e11789 instanceof Object) {
                      var ex__7355__auto__ = e11789;
                      var statearr_11790_11823 = state_11745;
                      statearr_11790_11823[5] = ex__7355__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11745);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11789;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11824 = state_11745;
                  state_11745 = G__11824;
                  continue;
                } else {
                  return ret_value__7353__auto__;
                }
                break;
              }
            };
            state_machine__7352__auto__ = function(state_11745) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7352__auto____0.call(this);
                case 1:
                  return state_machine__7352__auto____1.call(this, state_11745);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
            return state_machine__7352__auto__;
          }();
        }(switch__7351__auto__, c__7407__auto___11792, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__7409__auto__ = function() {
        var statearr_11791 = f__7408__auto__.call(null);
        statearr_11791[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___11792;
        return statearr_11791;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
    };
  }(c__7407__auto___11792, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj11826 = {};
  return obj11826;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3785__auto__ = p;
    if (and__3785__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4441__auto__ = p == null ? null : p;
    return function() {
      var or__3797__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3785__auto__ = p;
    if (and__3785__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4441__auto__ = p == null ? null : p;
    return function() {
      var or__3797__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3785__auto__ = p;
      if (and__3785__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4441__auto__ = p == null ? null : p;
      return function() {
        var or__3797__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3785__auto__ = p;
      if (and__3785__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4441__auto__ = p == null ? null : p;
      return function() {
        var or__3797__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3797__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3797__auto__, mults) {
            return function(p1__11827_SHARP_) {
              if (cljs.core.truth_(p1__11827_SHARP_.call(null, topic))) {
                return p1__11827_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__11827_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3797__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t11950 !== "undefined") {
      } else {
        cljs.core.async.t11950 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta11951) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta11951 = meta11951;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t11950.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t11950.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11950.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$1);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t11950.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11950.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11950.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t11950.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t11950.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_11952) {
            var self__ = this;
            var _11952__$1 = this;
            return self__.meta11951;
          };
        }(mults, ensure_mult);
        cljs.core.async.t11950.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_11952, meta11951__$1) {
            var self__ = this;
            var _11952__$1 = this;
            return new cljs.core.async.t11950(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta11951__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11950.cljs$lang$type = true;
        cljs.core.async.t11950.cljs$lang$ctorStr = "cljs.core.async/t11950";
        cljs.core.async.t11950.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
            return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t11950");
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t11950 = function(mults, ensure_mult) {
          return function __GT_t11950(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta11951) {
            return new cljs.core.async.t11950(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta11951);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t11950(ensure_mult, mults, buf_fn, topic_fn, ch, pub, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 65, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 603, new cljs.core.Keyword(null, "column", "column", 2078222095), 14, new cljs.core.Keyword(null, "line", "line", 212345235), 591, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
      null));
    }();
    var c__7407__auto___12072 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___12072, mults, ensure_mult, p) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___12072, mults, ensure_mult, p) {
            return function(state_12024) {
              var state_val_12025 = state_12024[1];
              if (state_val_12025 === 7) {
                var inst_12020 = state_12024[2];
                var state_12024__$1 = state_12024;
                var statearr_12026_12073 = state_12024__$1;
                statearr_12026_12073[2] = inst_12020;
                statearr_12026_12073[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12025 === 20) {
                  var state_12024__$1 = state_12024;
                  var statearr_12027_12074 = state_12024__$1;
                  statearr_12027_12074[2] = null;
                  statearr_12027_12074[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12025 === 1) {
                    var state_12024__$1 = state_12024;
                    var statearr_12028_12075 = state_12024__$1;
                    statearr_12028_12075[2] = null;
                    statearr_12028_12075[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12025 === 24) {
                      var inst_12003 = state_12024[7];
                      var inst_12012 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_12003);
                      var state_12024__$1 = state_12024;
                      var statearr_12029_12076 = state_12024__$1;
                      statearr_12029_12076[2] = inst_12012;
                      statearr_12029_12076[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12025 === 4) {
                        var inst_11955 = state_12024[8];
                        var inst_11955__$1 = state_12024[2];
                        var inst_11956 = inst_11955__$1 == null;
                        var state_12024__$1 = function() {
                          var statearr_12030 = state_12024;
                          statearr_12030[8] = inst_11955__$1;
                          return statearr_12030;
                        }();
                        if (cljs.core.truth_(inst_11956)) {
                          var statearr_12031_12077 = state_12024__$1;
                          statearr_12031_12077[1] = 5;
                        } else {
                          var statearr_12032_12078 = state_12024__$1;
                          statearr_12032_12078[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12025 === 15) {
                          var inst_11997 = state_12024[2];
                          var state_12024__$1 = state_12024;
                          var statearr_12033_12079 = state_12024__$1;
                          statearr_12033_12079[2] = inst_11997;
                          statearr_12033_12079[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12025 === 21) {
                            var inst_12017 = state_12024[2];
                            var state_12024__$1 = function() {
                              var statearr_12034 = state_12024;
                              statearr_12034[9] = inst_12017;
                              return statearr_12034;
                            }();
                            var statearr_12035_12080 = state_12024__$1;
                            statearr_12035_12080[2] = null;
                            statearr_12035_12080[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12025 === 13) {
                              var inst_11979 = state_12024[10];
                              var inst_11981 = cljs.core.chunked_seq_QMARK_.call(null, inst_11979);
                              var state_12024__$1 = state_12024;
                              if (inst_11981) {
                                var statearr_12036_12081 = state_12024__$1;
                                statearr_12036_12081[1] = 16;
                              } else {
                                var statearr_12037_12082 = state_12024__$1;
                                statearr_12037_12082[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12025 === 22) {
                                var inst_12009 = state_12024[2];
                                var state_12024__$1 = state_12024;
                                if (cljs.core.truth_(inst_12009)) {
                                  var statearr_12038_12083 = state_12024__$1;
                                  statearr_12038_12083[1] = 23;
                                } else {
                                  var statearr_12039_12084 = state_12024__$1;
                                  statearr_12039_12084[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12025 === 6) {
                                  var inst_11955 = state_12024[8];
                                  var inst_12003 = state_12024[7];
                                  var inst_12005 = state_12024[11];
                                  var inst_12003__$1 = topic_fn.call(null, inst_11955);
                                  var inst_12004 = cljs.core.deref.call(null, mults);
                                  var inst_12005__$1 = cljs.core.get.call(null, inst_12004, inst_12003__$1);
                                  var state_12024__$1 = function() {
                                    var statearr_12040 = state_12024;
                                    statearr_12040[7] = inst_12003__$1;
                                    statearr_12040[11] = inst_12005__$1;
                                    return statearr_12040;
                                  }();
                                  if (cljs.core.truth_(inst_12005__$1)) {
                                    var statearr_12041_12085 = state_12024__$1;
                                    statearr_12041_12085[1] = 19;
                                  } else {
                                    var statearr_12042_12086 = state_12024__$1;
                                    statearr_12042_12086[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12025 === 25) {
                                    var inst_12014 = state_12024[2];
                                    var state_12024__$1 = state_12024;
                                    var statearr_12043_12087 = state_12024__$1;
                                    statearr_12043_12087[2] = inst_12014;
                                    statearr_12043_12087[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12025 === 17) {
                                      var inst_11979 = state_12024[10];
                                      var inst_11988 = cljs.core.first.call(null, inst_11979);
                                      var inst_11989 = cljs.core.async.muxch_STAR_.call(null, inst_11988);
                                      var inst_11990 = cljs.core.async.close_BANG_.call(null, inst_11989);
                                      var inst_11991 = cljs.core.next.call(null, inst_11979);
                                      var inst_11965 = inst_11991;
                                      var inst_11966 = null;
                                      var inst_11967 = 0;
                                      var inst_11968 = 0;
                                      var state_12024__$1 = function() {
                                        var statearr_12044 = state_12024;
                                        statearr_12044[12] = inst_11968;
                                        statearr_12044[13] = inst_11967;
                                        statearr_12044[14] = inst_11966;
                                        statearr_12044[15] = inst_11990;
                                        statearr_12044[16] = inst_11965;
                                        return statearr_12044;
                                      }();
                                      var statearr_12045_12088 = state_12024__$1;
                                      statearr_12045_12088[2] = null;
                                      statearr_12045_12088[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12025 === 3) {
                                        var inst_12022 = state_12024[2];
                                        var state_12024__$1 = state_12024;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12024__$1, inst_12022);
                                      } else {
                                        if (state_val_12025 === 12) {
                                          var inst_11999 = state_12024[2];
                                          var state_12024__$1 = state_12024;
                                          var statearr_12046_12089 = state_12024__$1;
                                          statearr_12046_12089[2] = inst_11999;
                                          statearr_12046_12089[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12025 === 2) {
                                            var state_12024__$1 = state_12024;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12024__$1, 4, ch);
                                          } else {
                                            if (state_val_12025 === 23) {
                                              var state_12024__$1 = state_12024;
                                              var statearr_12047_12090 = state_12024__$1;
                                              statearr_12047_12090[2] = null;
                                              statearr_12047_12090[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12025 === 19) {
                                                var inst_11955 = state_12024[8];
                                                var inst_12005 = state_12024[11];
                                                var inst_12007 = cljs.core.async.muxch_STAR_.call(null, inst_12005);
                                                var state_12024__$1 = state_12024;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12024__$1, 22, inst_12007, inst_11955);
                                              } else {
                                                if (state_val_12025 === 11) {
                                                  var inst_11979 = state_12024[10];
                                                  var inst_11965 = state_12024[16];
                                                  var inst_11979__$1 = cljs.core.seq.call(null, inst_11965);
                                                  var state_12024__$1 = function() {
                                                    var statearr_12048 = state_12024;
                                                    statearr_12048[10] = inst_11979__$1;
                                                    return statearr_12048;
                                                  }();
                                                  if (inst_11979__$1) {
                                                    var statearr_12049_12091 = state_12024__$1;
                                                    statearr_12049_12091[1] = 13;
                                                  } else {
                                                    var statearr_12050_12092 = state_12024__$1;
                                                    statearr_12050_12092[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12025 === 9) {
                                                    var inst_12001 = state_12024[2];
                                                    var state_12024__$1 = state_12024;
                                                    var statearr_12051_12093 = state_12024__$1;
                                                    statearr_12051_12093[2] = inst_12001;
                                                    statearr_12051_12093[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12025 === 5) {
                                                      var inst_11962 = cljs.core.deref.call(null, mults);
                                                      var inst_11963 = cljs.core.vals.call(null, inst_11962);
                                                      var inst_11964 = cljs.core.seq.call(null, inst_11963);
                                                      var inst_11965 = inst_11964;
                                                      var inst_11966 = null;
                                                      var inst_11967 = 0;
                                                      var inst_11968 = 0;
                                                      var state_12024__$1 = function() {
                                                        var statearr_12052 = state_12024;
                                                        statearr_12052[12] = inst_11968;
                                                        statearr_12052[13] = inst_11967;
                                                        statearr_12052[14] = inst_11966;
                                                        statearr_12052[16] = inst_11965;
                                                        return statearr_12052;
                                                      }();
                                                      var statearr_12053_12094 = state_12024__$1;
                                                      statearr_12053_12094[2] = null;
                                                      statearr_12053_12094[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12025 === 14) {
                                                        var state_12024__$1 = state_12024;
                                                        var statearr_12057_12095 = state_12024__$1;
                                                        statearr_12057_12095[2] = null;
                                                        statearr_12057_12095[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12025 === 16) {
                                                          var inst_11979 = state_12024[10];
                                                          var inst_11983 = cljs.core.chunk_first.call(null, inst_11979);
                                                          var inst_11984 = cljs.core.chunk_rest.call(null, inst_11979);
                                                          var inst_11985 = cljs.core.count.call(null, inst_11983);
                                                          var inst_11965 = inst_11984;
                                                          var inst_11966 = inst_11983;
                                                          var inst_11967 = inst_11985;
                                                          var inst_11968 = 0;
                                                          var state_12024__$1 = function() {
                                                            var statearr_12058 = state_12024;
                                                            statearr_12058[12] = inst_11968;
                                                            statearr_12058[13] = inst_11967;
                                                            statearr_12058[14] = inst_11966;
                                                            statearr_12058[16] = inst_11965;
                                                            return statearr_12058;
                                                          }();
                                                          var statearr_12059_12096 = state_12024__$1;
                                                          statearr_12059_12096[2] = null;
                                                          statearr_12059_12096[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12025 === 10) {
                                                            var inst_11968 = state_12024[12];
                                                            var inst_11967 = state_12024[13];
                                                            var inst_11966 = state_12024[14];
                                                            var inst_11965 = state_12024[16];
                                                            var inst_11973 = cljs.core._nth.call(null, inst_11966, inst_11968);
                                                            var inst_11974 = cljs.core.async.muxch_STAR_.call(null, inst_11973);
                                                            var inst_11975 = cljs.core.async.close_BANG_.call(null, inst_11974);
                                                            var inst_11976 = inst_11968 + 1;
                                                            var tmp12054 = inst_11967;
                                                            var tmp12055 = inst_11966;
                                                            var tmp12056 = inst_11965;
                                                            var inst_11965__$1 = tmp12056;
                                                            var inst_11966__$1 = tmp12055;
                                                            var inst_11967__$1 = tmp12054;
                                                            var inst_11968__$1 = inst_11976;
                                                            var state_12024__$1 = function() {
                                                              var statearr_12060 = state_12024;
                                                              statearr_12060[12] = inst_11968__$1;
                                                              statearr_12060[17] = inst_11975;
                                                              statearr_12060[13] = inst_11967__$1;
                                                              statearr_12060[14] = inst_11966__$1;
                                                              statearr_12060[16] = inst_11965__$1;
                                                              return statearr_12060;
                                                            }();
                                                            var statearr_12061_12097 = state_12024__$1;
                                                            statearr_12061_12097[2] = null;
                                                            statearr_12061_12097[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12025 === 18) {
                                                              var inst_11994 = state_12024[2];
                                                              var state_12024__$1 = state_12024;
                                                              var statearr_12062_12098 = state_12024__$1;
                                                              statearr_12062_12098[2] = inst_11994;
                                                              statearr_12062_12098[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_12025 === 8) {
                                                                var inst_11968 = state_12024[12];
                                                                var inst_11967 = state_12024[13];
                                                                var inst_11970 = inst_11968 < inst_11967;
                                                                var inst_11971 = inst_11970;
                                                                var state_12024__$1 = state_12024;
                                                                if (cljs.core.truth_(inst_11971)) {
                                                                  var statearr_12063_12099 = state_12024__$1;
                                                                  statearr_12063_12099[1] = 10;
                                                                } else {
                                                                  var statearr_12064_12100 = state_12024__$1;
                                                                  statearr_12064_12100[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___12072, mults, ensure_mult, p);
          return function(switch__7351__auto__, c__7407__auto___12072, mults, ensure_mult, p) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_12068 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_12068[0] = state_machine__7352__auto__;
                statearr_12068[1] = 1;
                return statearr_12068;
              };
              var state_machine__7352__auto____1 = function(state_12024) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_12024);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e12069) {
                      if (e12069 instanceof Object) {
                        var ex__7355__auto__ = e12069;
                        var statearr_12070_12101 = state_12024;
                        statearr_12070_12101[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12024);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12069;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12102 = state_12024;
                    state_12024 = G__12102;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_12024) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_12024);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___12072, mults, ensure_mult, p);
        }();
        var state__7409__auto__ = function() {
          var statearr_12071 = f__7408__auto__.call(null);
          statearr_12071[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___12072;
          return statearr_12071;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___12072, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__7407__auto___12239 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___12239, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___12239, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_12209) {
              var state_val_12210 = state_12209[1];
              if (state_val_12210 === 7) {
                var state_12209__$1 = state_12209;
                var statearr_12211_12240 = state_12209__$1;
                statearr_12211_12240[2] = null;
                statearr_12211_12240[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12210 === 1) {
                  var state_12209__$1 = state_12209;
                  var statearr_12212_12241 = state_12209__$1;
                  statearr_12212_12241[2] = null;
                  statearr_12212_12241[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12210 === 4) {
                    var inst_12173 = state_12209[7];
                    var inst_12175 = inst_12173 < cnt;
                    var state_12209__$1 = state_12209;
                    if (cljs.core.truth_(inst_12175)) {
                      var statearr_12213_12242 = state_12209__$1;
                      statearr_12213_12242[1] = 6;
                    } else {
                      var statearr_12214_12243 = state_12209__$1;
                      statearr_12214_12243[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12210 === 15) {
                      var inst_12205 = state_12209[2];
                      var state_12209__$1 = state_12209;
                      var statearr_12215_12244 = state_12209__$1;
                      statearr_12215_12244[2] = inst_12205;
                      statearr_12215_12244[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12210 === 13) {
                        var inst_12198 = cljs.core.async.close_BANG_.call(null, out);
                        var state_12209__$1 = state_12209;
                        var statearr_12216_12245 = state_12209__$1;
                        statearr_12216_12245[2] = inst_12198;
                        statearr_12216_12245[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12210 === 6) {
                          var state_12209__$1 = state_12209;
                          var statearr_12217_12246 = state_12209__$1;
                          statearr_12217_12246[2] = null;
                          statearr_12217_12246[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12210 === 3) {
                            var inst_12207 = state_12209[2];
                            var state_12209__$1 = state_12209;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12209__$1, inst_12207);
                          } else {
                            if (state_val_12210 === 12) {
                              var inst_12195 = state_12209[8];
                              var inst_12195__$1 = state_12209[2];
                              var inst_12196 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_12195__$1);
                              var state_12209__$1 = function() {
                                var statearr_12218 = state_12209;
                                statearr_12218[8] = inst_12195__$1;
                                return statearr_12218;
                              }();
                              if (cljs.core.truth_(inst_12196)) {
                                var statearr_12219_12247 = state_12209__$1;
                                statearr_12219_12247[1] = 13;
                              } else {
                                var statearr_12220_12248 = state_12209__$1;
                                statearr_12220_12248[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12210 === 2) {
                                var inst_12172 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_12173 = 0;
                                var state_12209__$1 = function() {
                                  var statearr_12221 = state_12209;
                                  statearr_12221[7] = inst_12173;
                                  statearr_12221[9] = inst_12172;
                                  return statearr_12221;
                                }();
                                var statearr_12222_12249 = state_12209__$1;
                                statearr_12222_12249[2] = null;
                                statearr_12222_12249[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12210 === 11) {
                                  var inst_12173 = state_12209[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_12209, 10, Object, null, 9);
                                  var inst_12182 = chs__$1.call(null, inst_12173);
                                  var inst_12183 = done.call(null, inst_12173);
                                  var inst_12184 = cljs.core.async.take_BANG_.call(null, inst_12182, inst_12183);
                                  var state_12209__$1 = state_12209;
                                  var statearr_12223_12250 = state_12209__$1;
                                  statearr_12223_12250[2] = inst_12184;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12209__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12210 === 9) {
                                    var inst_12173 = state_12209[7];
                                    var inst_12186 = state_12209[2];
                                    var inst_12187 = inst_12173 + 1;
                                    var inst_12173__$1 = inst_12187;
                                    var state_12209__$1 = function() {
                                      var statearr_12224 = state_12209;
                                      statearr_12224[10] = inst_12186;
                                      statearr_12224[7] = inst_12173__$1;
                                      return statearr_12224;
                                    }();
                                    var statearr_12225_12251 = state_12209__$1;
                                    statearr_12225_12251[2] = null;
                                    statearr_12225_12251[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12210 === 5) {
                                      var inst_12193 = state_12209[2];
                                      var state_12209__$1 = function() {
                                        var statearr_12226 = state_12209;
                                        statearr_12226[11] = inst_12193;
                                        return statearr_12226;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12209__$1, 12, dchan);
                                    } else {
                                      if (state_val_12210 === 14) {
                                        var inst_12195 = state_12209[8];
                                        var inst_12200 = cljs.core.apply.call(null, f, inst_12195);
                                        var state_12209__$1 = state_12209;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12209__$1, 16, out, inst_12200);
                                      } else {
                                        if (state_val_12210 === 16) {
                                          var inst_12202 = state_12209[2];
                                          var state_12209__$1 = function() {
                                            var statearr_12227 = state_12209;
                                            statearr_12227[12] = inst_12202;
                                            return statearr_12227;
                                          }();
                                          var statearr_12228_12252 = state_12209__$1;
                                          statearr_12228_12252[2] = null;
                                          statearr_12228_12252[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12210 === 10) {
                                            var inst_12177 = state_12209[2];
                                            var inst_12178 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_12209__$1 = function() {
                                              var statearr_12229 = state_12209;
                                              statearr_12229[13] = inst_12177;
                                              return statearr_12229;
                                            }();
                                            var statearr_12230_12253 = state_12209__$1;
                                            statearr_12230_12253[2] = inst_12178;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12209__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12210 === 8) {
                                              var inst_12191 = state_12209[2];
                                              var state_12209__$1 = state_12209;
                                              var statearr_12231_12254 = state_12209__$1;
                                              statearr_12231_12254[2] = inst_12191;
                                              statearr_12231_12254[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___12239, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__7351__auto__, c__7407__auto___12239, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_12235 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_12235[0] = state_machine__7352__auto__;
                statearr_12235[1] = 1;
                return statearr_12235;
              };
              var state_machine__7352__auto____1 = function(state_12209) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_12209);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e12236) {
                      if (e12236 instanceof Object) {
                        var ex__7355__auto__ = e12236;
                        var statearr_12237_12255 = state_12209;
                        statearr_12237_12255[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12209);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12236;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12256 = state_12209;
                    state_12209 = G__12256;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_12209) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_12209);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___12239, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__7409__auto__ = function() {
          var statearr_12238 = f__7408__auto__.call(null);
          statearr_12238[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___12239;
          return statearr_12238;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___12239, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7407__auto___12364 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___12364, out) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___12364, out) {
            return function(state_12340) {
              var state_val_12341 = state_12340[1];
              if (state_val_12341 === 7) {
                var inst_12319 = state_12340[7];
                var inst_12320 = state_12340[8];
                var inst_12319__$1 = state_12340[2];
                var inst_12320__$1 = cljs.core.nth.call(null, inst_12319__$1, 0, null);
                var inst_12321 = cljs.core.nth.call(null, inst_12319__$1, 1, null);
                var inst_12322 = inst_12320__$1 == null;
                var state_12340__$1 = function() {
                  var statearr_12342 = state_12340;
                  statearr_12342[7] = inst_12319__$1;
                  statearr_12342[8] = inst_12320__$1;
                  statearr_12342[9] = inst_12321;
                  return statearr_12342;
                }();
                if (cljs.core.truth_(inst_12322)) {
                  var statearr_12343_12365 = state_12340__$1;
                  statearr_12343_12365[1] = 8;
                } else {
                  var statearr_12344_12366 = state_12340__$1;
                  statearr_12344_12366[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12341 === 1) {
                  var inst_12311 = cljs.core.vec.call(null, chs);
                  var inst_12312 = inst_12311;
                  var state_12340__$1 = function() {
                    var statearr_12345 = state_12340;
                    statearr_12345[10] = inst_12312;
                    return statearr_12345;
                  }();
                  var statearr_12346_12367 = state_12340__$1;
                  statearr_12346_12367[2] = null;
                  statearr_12346_12367[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12341 === 4) {
                    var inst_12312 = state_12340[10];
                    var state_12340__$1 = state_12340;
                    return cljs.core.async.ioc_alts_BANG_.call(null, state_12340__$1, 7, inst_12312);
                  } else {
                    if (state_val_12341 === 6) {
                      var inst_12336 = state_12340[2];
                      var state_12340__$1 = state_12340;
                      var statearr_12347_12368 = state_12340__$1;
                      statearr_12347_12368[2] = inst_12336;
                      statearr_12347_12368[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12341 === 3) {
                        var inst_12338 = state_12340[2];
                        var state_12340__$1 = state_12340;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12340__$1, inst_12338);
                      } else {
                        if (state_val_12341 === 2) {
                          var inst_12312 = state_12340[10];
                          var inst_12314 = cljs.core.count.call(null, inst_12312);
                          var inst_12315 = inst_12314 > 0;
                          var state_12340__$1 = state_12340;
                          if (cljs.core.truth_(inst_12315)) {
                            var statearr_12349_12369 = state_12340__$1;
                            statearr_12349_12369[1] = 4;
                          } else {
                            var statearr_12350_12370 = state_12340__$1;
                            statearr_12350_12370[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12341 === 11) {
                            var inst_12312 = state_12340[10];
                            var inst_12329 = state_12340[2];
                            var tmp12348 = inst_12312;
                            var inst_12312__$1 = tmp12348;
                            var state_12340__$1 = function() {
                              var statearr_12351 = state_12340;
                              statearr_12351[10] = inst_12312__$1;
                              statearr_12351[11] = inst_12329;
                              return statearr_12351;
                            }();
                            var statearr_12352_12371 = state_12340__$1;
                            statearr_12352_12371[2] = null;
                            statearr_12352_12371[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12341 === 9) {
                              var inst_12320 = state_12340[8];
                              var state_12340__$1 = state_12340;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12340__$1, 11, out, inst_12320);
                            } else {
                              if (state_val_12341 === 5) {
                                var inst_12334 = cljs.core.async.close_BANG_.call(null, out);
                                var state_12340__$1 = state_12340;
                                var statearr_12353_12372 = state_12340__$1;
                                statearr_12353_12372[2] = inst_12334;
                                statearr_12353_12372[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12341 === 10) {
                                  var inst_12332 = state_12340[2];
                                  var state_12340__$1 = state_12340;
                                  var statearr_12354_12373 = state_12340__$1;
                                  statearr_12354_12373[2] = inst_12332;
                                  statearr_12354_12373[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12341 === 8) {
                                    var inst_12312 = state_12340[10];
                                    var inst_12319 = state_12340[7];
                                    var inst_12320 = state_12340[8];
                                    var inst_12321 = state_12340[9];
                                    var inst_12324 = function() {
                                      var c = inst_12321;
                                      var v = inst_12320;
                                      var vec__12317 = inst_12319;
                                      var cs = inst_12312;
                                      return function(c, v, vec__12317, cs, inst_12312, inst_12319, inst_12320, inst_12321, state_val_12341, c__7407__auto___12364, out) {
                                        return function(p1__12257_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__12257_SHARP_);
                                        };
                                      }(c, v, vec__12317, cs, inst_12312, inst_12319, inst_12320, inst_12321, state_val_12341, c__7407__auto___12364, out);
                                    }();
                                    var inst_12325 = cljs.core.filterv.call(null, inst_12324, inst_12312);
                                    var inst_12312__$1 = inst_12325;
                                    var state_12340__$1 = function() {
                                      var statearr_12355 = state_12340;
                                      statearr_12355[10] = inst_12312__$1;
                                      return statearr_12355;
                                    }();
                                    var statearr_12356_12374 = state_12340__$1;
                                    statearr_12356_12374[2] = null;
                                    statearr_12356_12374[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___12364, out);
          return function(switch__7351__auto__, c__7407__auto___12364, out) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_12360 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_12360[0] = state_machine__7352__auto__;
                statearr_12360[1] = 1;
                return statearr_12360;
              };
              var state_machine__7352__auto____1 = function(state_12340) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_12340);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e12361) {
                      if (e12361 instanceof Object) {
                        var ex__7355__auto__ = e12361;
                        var statearr_12362_12375 = state_12340;
                        statearr_12362_12375[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12340);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12361;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12376 = state_12340;
                    state_12340 = G__12376;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_12340) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_12340);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___12364, out);
        }();
        var state__7409__auto__ = function() {
          var statearr_12363 = f__7408__auto__.call(null);
          statearr_12363[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___12364;
          return statearr_12363;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___12364, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7407__auto___12469 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___12469, out) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___12469, out) {
            return function(state_12446) {
              var state_val_12447 = state_12446[1];
              if (state_val_12447 === 7) {
                var inst_12428 = state_12446[7];
                var inst_12428__$1 = state_12446[2];
                var inst_12429 = inst_12428__$1 == null;
                var inst_12430 = cljs.core.not.call(null, inst_12429);
                var state_12446__$1 = function() {
                  var statearr_12448 = state_12446;
                  statearr_12448[7] = inst_12428__$1;
                  return statearr_12448;
                }();
                if (inst_12430) {
                  var statearr_12449_12470 = state_12446__$1;
                  statearr_12449_12470[1] = 8;
                } else {
                  var statearr_12450_12471 = state_12446__$1;
                  statearr_12450_12471[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12447 === 1) {
                  var inst_12423 = 0;
                  var state_12446__$1 = function() {
                    var statearr_12451 = state_12446;
                    statearr_12451[8] = inst_12423;
                    return statearr_12451;
                  }();
                  var statearr_12452_12472 = state_12446__$1;
                  statearr_12452_12472[2] = null;
                  statearr_12452_12472[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12447 === 4) {
                    var state_12446__$1 = state_12446;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12446__$1, 7, ch);
                  } else {
                    if (state_val_12447 === 6) {
                      var inst_12441 = state_12446[2];
                      var state_12446__$1 = state_12446;
                      var statearr_12453_12473 = state_12446__$1;
                      statearr_12453_12473[2] = inst_12441;
                      statearr_12453_12473[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12447 === 3) {
                        var inst_12443 = state_12446[2];
                        var inst_12444 = cljs.core.async.close_BANG_.call(null, out);
                        var state_12446__$1 = function() {
                          var statearr_12454 = state_12446;
                          statearr_12454[9] = inst_12443;
                          return statearr_12454;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12446__$1, inst_12444);
                      } else {
                        if (state_val_12447 === 2) {
                          var inst_12423 = state_12446[8];
                          var inst_12425 = inst_12423 < n;
                          var state_12446__$1 = state_12446;
                          if (cljs.core.truth_(inst_12425)) {
                            var statearr_12455_12474 = state_12446__$1;
                            statearr_12455_12474[1] = 4;
                          } else {
                            var statearr_12456_12475 = state_12446__$1;
                            statearr_12456_12475[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12447 === 11) {
                            var inst_12423 = state_12446[8];
                            var inst_12433 = state_12446[2];
                            var inst_12434 = inst_12423 + 1;
                            var inst_12423__$1 = inst_12434;
                            var state_12446__$1 = function() {
                              var statearr_12457 = state_12446;
                              statearr_12457[10] = inst_12433;
                              statearr_12457[8] = inst_12423__$1;
                              return statearr_12457;
                            }();
                            var statearr_12458_12476 = state_12446__$1;
                            statearr_12458_12476[2] = null;
                            statearr_12458_12476[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12447 === 9) {
                              var state_12446__$1 = state_12446;
                              var statearr_12459_12477 = state_12446__$1;
                              statearr_12459_12477[2] = null;
                              statearr_12459_12477[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12447 === 5) {
                                var state_12446__$1 = state_12446;
                                var statearr_12460_12478 = state_12446__$1;
                                statearr_12460_12478[2] = null;
                                statearr_12460_12478[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12447 === 10) {
                                  var inst_12438 = state_12446[2];
                                  var state_12446__$1 = state_12446;
                                  var statearr_12461_12479 = state_12446__$1;
                                  statearr_12461_12479[2] = inst_12438;
                                  statearr_12461_12479[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12447 === 8) {
                                    var inst_12428 = state_12446[7];
                                    var state_12446__$1 = state_12446;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12446__$1, 11, out, inst_12428);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___12469, out);
          return function(switch__7351__auto__, c__7407__auto___12469, out) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_12465 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_12465[0] = state_machine__7352__auto__;
                statearr_12465[1] = 1;
                return statearr_12465;
              };
              var state_machine__7352__auto____1 = function(state_12446) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_12446);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e12466) {
                      if (e12466 instanceof Object) {
                        var ex__7355__auto__ = e12466;
                        var statearr_12467_12480 = state_12446;
                        statearr_12467_12480[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12446);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12466;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12481 = state_12446;
                    state_12446 = G__12481;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_12446) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_12446);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___12469, out);
        }();
        var state__7409__auto__ = function() {
          var statearr_12468 = f__7408__auto__.call(null);
          statearr_12468[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___12469;
          return statearr_12468;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___12469, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t12489 !== "undefined") {
  } else {
    cljs.core.async.t12489 = function(ch, f, map_LT_, meta12490) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta12490 = meta12490;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12489.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12489.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t12489.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12489.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t12492 !== "undefined") {
        } else {
          cljs.core.async.t12492 = function(fn1, _, meta12490, map_LT_, f, ch, meta12493) {
            this.fn1 = fn1;
            this._ = _;
            this.meta12490 = meta12490;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta12493 = meta12493;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t12492.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t12492.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t12492.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__12482_SHARP_) {
                  return f1.call(null, p1__12482_SHARP_ == null ? null : self__.f.call(null, p1__12482_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t12492.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_12494) {
              var self__ = this;
              var _12494__$1 = this;
              return self__.meta12493;
            };
          }(___$1);
          cljs.core.async.t12492.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_12494, meta12493__$1) {
              var self__ = this;
              var _12494__$1 = this;
              return new cljs.core.async.t12492(self__.fn1, self__._, self__.meta12490, self__.map_LT_, self__.f, self__.ch, meta12493__$1);
            };
          }(___$1);
          cljs.core.async.t12492.cljs$lang$type = true;
          cljs.core.async.t12492.cljs$lang$ctorStr = "cljs.core.async/t12492";
          cljs.core.async.t12492.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
              return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t12492");
            };
          }(___$1);
          cljs.core.async.__GT_t12492 = function(___$1) {
            return function __GT_t12492(fn1__$1, ___$2, meta12490__$1, map_LT___$1, f__$1, ch__$1, meta12493) {
              return new cljs.core.async.t12492(fn1__$1, ___$2, meta12490__$1, map_LT___$1, f__$1, ch__$1, meta12493);
            };
          }(___$1);
        }
        return new cljs.core.async.t12492(fn1, ___$1, self__.meta12490, self__.map_LT_, self__.f, self__.ch, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 46, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 737, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 731, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
        null));
      }());
      if (cljs.core.truth_(function() {
        var and__3785__auto__ = ret;
        if (cljs.core.truth_(and__3785__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3785__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t12489.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12489.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12489.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t12489.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12491) {
      var self__ = this;
      var _12491__$1 = this;
      return self__.meta12490;
    };
    cljs.core.async.t12489.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12491, meta12490__$1) {
      var self__ = this;
      var _12491__$1 = this;
      return new cljs.core.async.t12489(self__.ch, self__.f, self__.map_LT_, meta12490__$1);
    };
    cljs.core.async.t12489.cljs$lang$type = true;
    cljs.core.async.t12489.cljs$lang$ctorStr = "cljs.core.async/t12489";
    cljs.core.async.t12489.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t12489");
    };
    cljs.core.async.__GT_t12489 = function __GT_t12489(ch__$1, f__$1, map_LT___$1, meta12490) {
      return new cljs.core.async.t12489(ch__$1, f__$1, map_LT___$1, meta12490);
    };
  }
  return new cljs.core.async.t12489(ch, f, map_LT_, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 46, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 743, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 722, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t12498 !== "undefined") {
  } else {
    cljs.core.async.t12498 = function(ch, f, map_GT_, meta12499) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta12499 = meta12499;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12498.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12498.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t12498.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12498.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12498.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12498.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12498.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12500) {
      var self__ = this;
      var _12500__$1 = this;
      return self__.meta12499;
    };
    cljs.core.async.t12498.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12500, meta12499__$1) {
      var self__ = this;
      var _12500__$1 = this;
      return new cljs.core.async.t12498(self__.ch, self__.f, self__.map_GT_, meta12499__$1);
    };
    cljs.core.async.t12498.cljs$lang$type = true;
    cljs.core.async.t12498.cljs$lang$ctorStr = "cljs.core.async/t12498";
    cljs.core.async.t12498.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t12498");
    };
    cljs.core.async.__GT_t12498 = function __GT_t12498(ch__$1, f__$1, map_GT___$1, meta12499) {
      return new cljs.core.async.t12498(ch__$1, f__$1, map_GT___$1, meta12499);
    };
  }
  return new cljs.core.async.t12498(ch, f, map_GT_, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 757, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 748, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t12504 !== "undefined") {
  } else {
    cljs.core.async.t12504 = function(ch, p, filter_GT_, meta12505) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta12505 = meta12505;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12504.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12504.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t12504.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12504.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12504.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12504.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12504.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t12504.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12506) {
      var self__ = this;
      var _12506__$1 = this;
      return self__.meta12505;
    };
    cljs.core.async.t12504.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12506, meta12505__$1) {
      var self__ = this;
      var _12506__$1 = this;
      return new cljs.core.async.t12504(self__.ch, self__.p, self__.filter_GT_, meta12505__$1);
    };
    cljs.core.async.t12504.cljs$lang$type = true;
    cljs.core.async.t12504.cljs$lang$ctorStr = "cljs.core.async/t12504";
    cljs.core.async.t12504.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write.call(null, writer__4385__auto__, "cljs.core.async/t12504");
    };
    cljs.core.async.__GT_t12504 = function __GT_t12504(ch__$1, p__$1, filter_GT___$1, meta12505) {
      return new cljs.core.async.t12504(ch__$1, p__$1, filter_GT___$1, meta12505);
    };
  }
  return new cljs.core.async.t12504(ch, p, filter_GT_, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 48, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 774, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 762, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7407__auto___12589 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___12589, out) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___12589, out) {
            return function(state_12568) {
              var state_val_12569 = state_12568[1];
              if (state_val_12569 === 7) {
                var inst_12564 = state_12568[2];
                var state_12568__$1 = state_12568;
                var statearr_12570_12590 = state_12568__$1;
                statearr_12570_12590[2] = inst_12564;
                statearr_12570_12590[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12569 === 1) {
                  var state_12568__$1 = state_12568;
                  var statearr_12571_12591 = state_12568__$1;
                  statearr_12571_12591[2] = null;
                  statearr_12571_12591[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12569 === 4) {
                    var inst_12550 = state_12568[7];
                    var inst_12550__$1 = state_12568[2];
                    var inst_12551 = inst_12550__$1 == null;
                    var state_12568__$1 = function() {
                      var statearr_12572 = state_12568;
                      statearr_12572[7] = inst_12550__$1;
                      return statearr_12572;
                    }();
                    if (cljs.core.truth_(inst_12551)) {
                      var statearr_12573_12592 = state_12568__$1;
                      statearr_12573_12592[1] = 5;
                    } else {
                      var statearr_12574_12593 = state_12568__$1;
                      statearr_12574_12593[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12569 === 6) {
                      var inst_12550 = state_12568[7];
                      var inst_12555 = p.call(null, inst_12550);
                      var state_12568__$1 = state_12568;
                      if (cljs.core.truth_(inst_12555)) {
                        var statearr_12575_12594 = state_12568__$1;
                        statearr_12575_12594[1] = 8;
                      } else {
                        var statearr_12576_12595 = state_12568__$1;
                        statearr_12576_12595[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12569 === 3) {
                        var inst_12566 = state_12568[2];
                        var state_12568__$1 = state_12568;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12568__$1, inst_12566);
                      } else {
                        if (state_val_12569 === 2) {
                          var state_12568__$1 = state_12568;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12568__$1, 4, ch);
                        } else {
                          if (state_val_12569 === 11) {
                            var inst_12558 = state_12568[2];
                            var state_12568__$1 = state_12568;
                            var statearr_12577_12596 = state_12568__$1;
                            statearr_12577_12596[2] = inst_12558;
                            statearr_12577_12596[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12569 === 9) {
                              var state_12568__$1 = state_12568;
                              var statearr_12578_12597 = state_12568__$1;
                              statearr_12578_12597[2] = null;
                              statearr_12578_12597[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12569 === 5) {
                                var inst_12553 = cljs.core.async.close_BANG_.call(null, out);
                                var state_12568__$1 = state_12568;
                                var statearr_12579_12598 = state_12568__$1;
                                statearr_12579_12598[2] = inst_12553;
                                statearr_12579_12598[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12569 === 10) {
                                  var inst_12561 = state_12568[2];
                                  var state_12568__$1 = function() {
                                    var statearr_12580 = state_12568;
                                    statearr_12580[8] = inst_12561;
                                    return statearr_12580;
                                  }();
                                  var statearr_12581_12599 = state_12568__$1;
                                  statearr_12581_12599[2] = null;
                                  statearr_12581_12599[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12569 === 8) {
                                    var inst_12550 = state_12568[7];
                                    var state_12568__$1 = state_12568;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12568__$1, 11, out, inst_12550);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___12589, out);
          return function(switch__7351__auto__, c__7407__auto___12589, out) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_12585 = [null, null, null, null, null, null, null, null, null];
                statearr_12585[0] = state_machine__7352__auto__;
                statearr_12585[1] = 1;
                return statearr_12585;
              };
              var state_machine__7352__auto____1 = function(state_12568) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_12568);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e12586) {
                      if (e12586 instanceof Object) {
                        var ex__7355__auto__ = e12586;
                        var statearr_12587_12600 = state_12568;
                        statearr_12587_12600[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12568);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12586;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12601 = state_12568;
                    state_12568 = G__12601;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_12568) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_12568);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___12589, out);
        }();
        var state__7409__auto__ = function() {
          var statearr_12588 = f__7408__auto__.call(null);
          statearr_12588[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___12589;
          return statearr_12588;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___12589, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__7407__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto__) {
    return function() {
      var f__7408__auto__ = function() {
        var switch__7351__auto__ = function(c__7407__auto__) {
          return function(state_12767) {
            var state_val_12768 = state_12767[1];
            if (state_val_12768 === 7) {
              var inst_12763 = state_12767[2];
              var state_12767__$1 = state_12767;
              var statearr_12769_12810 = state_12767__$1;
              statearr_12769_12810[2] = inst_12763;
              statearr_12769_12810[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12768 === 20) {
                var inst_12733 = state_12767[7];
                var inst_12744 = state_12767[2];
                var inst_12745 = cljs.core.next.call(null, inst_12733);
                var inst_12719 = inst_12745;
                var inst_12720 = null;
                var inst_12721 = 0;
                var inst_12722 = 0;
                var state_12767__$1 = function() {
                  var statearr_12770 = state_12767;
                  statearr_12770[8] = inst_12722;
                  statearr_12770[9] = inst_12721;
                  statearr_12770[10] = inst_12719;
                  statearr_12770[11] = inst_12720;
                  statearr_12770[12] = inst_12744;
                  return statearr_12770;
                }();
                var statearr_12771_12811 = state_12767__$1;
                statearr_12771_12811[2] = null;
                statearr_12771_12811[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12768 === 1) {
                  var state_12767__$1 = state_12767;
                  var statearr_12772_12812 = state_12767__$1;
                  statearr_12772_12812[2] = null;
                  statearr_12772_12812[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12768 === 4) {
                    var inst_12708 = state_12767[13];
                    var inst_12708__$1 = state_12767[2];
                    var inst_12709 = inst_12708__$1 == null;
                    var state_12767__$1 = function() {
                      var statearr_12773 = state_12767;
                      statearr_12773[13] = inst_12708__$1;
                      return statearr_12773;
                    }();
                    if (cljs.core.truth_(inst_12709)) {
                      var statearr_12774_12813 = state_12767__$1;
                      statearr_12774_12813[1] = 5;
                    } else {
                      var statearr_12775_12814 = state_12767__$1;
                      statearr_12775_12814[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12768 === 15) {
                      var state_12767__$1 = state_12767;
                      var statearr_12779_12815 = state_12767__$1;
                      statearr_12779_12815[2] = null;
                      statearr_12779_12815[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12768 === 21) {
                        var state_12767__$1 = state_12767;
                        var statearr_12780_12816 = state_12767__$1;
                        statearr_12780_12816[2] = null;
                        statearr_12780_12816[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12768 === 13) {
                          var inst_12722 = state_12767[8];
                          var inst_12721 = state_12767[9];
                          var inst_12719 = state_12767[10];
                          var inst_12720 = state_12767[11];
                          var inst_12729 = state_12767[2];
                          var inst_12730 = inst_12722 + 1;
                          var tmp12776 = inst_12721;
                          var tmp12777 = inst_12719;
                          var tmp12778 = inst_12720;
                          var inst_12719__$1 = tmp12777;
                          var inst_12720__$1 = tmp12778;
                          var inst_12721__$1 = tmp12776;
                          var inst_12722__$1 = inst_12730;
                          var state_12767__$1 = function() {
                            var statearr_12781 = state_12767;
                            statearr_12781[8] = inst_12722__$1;
                            statearr_12781[9] = inst_12721__$1;
                            statearr_12781[10] = inst_12719__$1;
                            statearr_12781[14] = inst_12729;
                            statearr_12781[11] = inst_12720__$1;
                            return statearr_12781;
                          }();
                          var statearr_12782_12817 = state_12767__$1;
                          statearr_12782_12817[2] = null;
                          statearr_12782_12817[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12768 === 22) {
                            var state_12767__$1 = state_12767;
                            var statearr_12783_12818 = state_12767__$1;
                            statearr_12783_12818[2] = null;
                            statearr_12783_12818[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12768 === 6) {
                              var inst_12708 = state_12767[13];
                              var inst_12717 = f.call(null, inst_12708);
                              var inst_12718 = cljs.core.seq.call(null, inst_12717);
                              var inst_12719 = inst_12718;
                              var inst_12720 = null;
                              var inst_12721 = 0;
                              var inst_12722 = 0;
                              var state_12767__$1 = function() {
                                var statearr_12784 = state_12767;
                                statearr_12784[8] = inst_12722;
                                statearr_12784[9] = inst_12721;
                                statearr_12784[10] = inst_12719;
                                statearr_12784[11] = inst_12720;
                                return statearr_12784;
                              }();
                              var statearr_12785_12819 = state_12767__$1;
                              statearr_12785_12819[2] = null;
                              statearr_12785_12819[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12768 === 17) {
                                var inst_12733 = state_12767[7];
                                var inst_12737 = cljs.core.chunk_first.call(null, inst_12733);
                                var inst_12738 = cljs.core.chunk_rest.call(null, inst_12733);
                                var inst_12739 = cljs.core.count.call(null, inst_12737);
                                var inst_12719 = inst_12738;
                                var inst_12720 = inst_12737;
                                var inst_12721 = inst_12739;
                                var inst_12722 = 0;
                                var state_12767__$1 = function() {
                                  var statearr_12786 = state_12767;
                                  statearr_12786[8] = inst_12722;
                                  statearr_12786[9] = inst_12721;
                                  statearr_12786[10] = inst_12719;
                                  statearr_12786[11] = inst_12720;
                                  return statearr_12786;
                                }();
                                var statearr_12787_12820 = state_12767__$1;
                                statearr_12787_12820[2] = null;
                                statearr_12787_12820[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12768 === 3) {
                                  var inst_12765 = state_12767[2];
                                  var state_12767__$1 = state_12767;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12767__$1, inst_12765);
                                } else {
                                  if (state_val_12768 === 12) {
                                    var inst_12753 = state_12767[2];
                                    var state_12767__$1 = state_12767;
                                    var statearr_12788_12821 = state_12767__$1;
                                    statearr_12788_12821[2] = inst_12753;
                                    statearr_12788_12821[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12768 === 2) {
                                      var state_12767__$1 = state_12767;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12767__$1, 4, in$);
                                    } else {
                                      if (state_val_12768 === 23) {
                                        var inst_12761 = state_12767[2];
                                        var state_12767__$1 = state_12767;
                                        var statearr_12789_12822 = state_12767__$1;
                                        statearr_12789_12822[2] = inst_12761;
                                        statearr_12789_12822[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12768 === 19) {
                                          var inst_12748 = state_12767[2];
                                          var state_12767__$1 = state_12767;
                                          var statearr_12790_12823 = state_12767__$1;
                                          statearr_12790_12823[2] = inst_12748;
                                          statearr_12790_12823[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12768 === 11) {
                                            var inst_12719 = state_12767[10];
                                            var inst_12733 = state_12767[7];
                                            var inst_12733__$1 = cljs.core.seq.call(null, inst_12719);
                                            var state_12767__$1 = function() {
                                              var statearr_12791 = state_12767;
                                              statearr_12791[7] = inst_12733__$1;
                                              return statearr_12791;
                                            }();
                                            if (inst_12733__$1) {
                                              var statearr_12792_12824 = state_12767__$1;
                                              statearr_12792_12824[1] = 14;
                                            } else {
                                              var statearr_12793_12825 = state_12767__$1;
                                              statearr_12793_12825[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12768 === 9) {
                                              var inst_12755 = state_12767[2];
                                              var inst_12756 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_12767__$1 = function() {
                                                var statearr_12794 = state_12767;
                                                statearr_12794[15] = inst_12755;
                                                return statearr_12794;
                                              }();
                                              if (cljs.core.truth_(inst_12756)) {
                                                var statearr_12795_12826 = state_12767__$1;
                                                statearr_12795_12826[1] = 21;
                                              } else {
                                                var statearr_12796_12827 = state_12767__$1;
                                                statearr_12796_12827[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12768 === 5) {
                                                var inst_12711 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_12767__$1 = state_12767;
                                                var statearr_12797_12828 = state_12767__$1;
                                                statearr_12797_12828[2] = inst_12711;
                                                statearr_12797_12828[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12768 === 14) {
                                                  var inst_12733 = state_12767[7];
                                                  var inst_12735 = cljs.core.chunked_seq_QMARK_.call(null, inst_12733);
                                                  var state_12767__$1 = state_12767;
                                                  if (inst_12735) {
                                                    var statearr_12798_12829 = state_12767__$1;
                                                    statearr_12798_12829[1] = 17;
                                                  } else {
                                                    var statearr_12799_12830 = state_12767__$1;
                                                    statearr_12799_12830[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12768 === 16) {
                                                    var inst_12751 = state_12767[2];
                                                    var state_12767__$1 = state_12767;
                                                    var statearr_12800_12831 = state_12767__$1;
                                                    statearr_12800_12831[2] = inst_12751;
                                                    statearr_12800_12831[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12768 === 10) {
                                                      var inst_12722 = state_12767[8];
                                                      var inst_12720 = state_12767[11];
                                                      var inst_12727 = cljs.core._nth.call(null, inst_12720, inst_12722);
                                                      var state_12767__$1 = state_12767;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12767__$1, 13, out, inst_12727);
                                                    } else {
                                                      if (state_val_12768 === 18) {
                                                        var inst_12733 = state_12767[7];
                                                        var inst_12742 = cljs.core.first.call(null, inst_12733);
                                                        var state_12767__$1 = state_12767;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12767__$1, 20, out, inst_12742);
                                                      } else {
                                                        if (state_val_12768 === 8) {
                                                          var inst_12722 = state_12767[8];
                                                          var inst_12721 = state_12767[9];
                                                          var inst_12724 = inst_12722 < inst_12721;
                                                          var inst_12725 = inst_12724;
                                                          var state_12767__$1 = state_12767;
                                                          if (cljs.core.truth_(inst_12725)) {
                                                            var statearr_12801_12832 = state_12767__$1;
                                                            statearr_12801_12832[1] = 10;
                                                          } else {
                                                            var statearr_12802_12833 = state_12767__$1;
                                                            statearr_12802_12833[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7407__auto__);
        return function(switch__7351__auto__, c__7407__auto__) {
          return function() {
            var state_machine__7352__auto__ = null;
            var state_machine__7352__auto____0 = function() {
              var statearr_12806 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12806[0] = state_machine__7352__auto__;
              statearr_12806[1] = 1;
              return statearr_12806;
            };
            var state_machine__7352__auto____1 = function(state_12767) {
              while (true) {
                var ret_value__7353__auto__ = function() {
                  try {
                    while (true) {
                      var result__7354__auto__ = switch__7351__auto__.call(null, state_12767);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7354__auto__;
                      }
                      break;
                    }
                  } catch (e12807) {
                    if (e12807 instanceof Object) {
                      var ex__7355__auto__ = e12807;
                      var statearr_12808_12834 = state_12767;
                      statearr_12808_12834[5] = ex__7355__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12767);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12807;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12835 = state_12767;
                  state_12767 = G__12835;
                  continue;
                } else {
                  return ret_value__7353__auto__;
                }
                break;
              }
            };
            state_machine__7352__auto__ = function(state_12767) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7352__auto____0.call(this);
                case 1:
                  return state_machine__7352__auto____1.call(this, state_12767);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
            state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
            return state_machine__7352__auto__;
          }();
        }(switch__7351__auto__, c__7407__auto__);
      }();
      var state__7409__auto__ = function() {
        var statearr_12809 = f__7408__auto__.call(null);
        statearr_12809[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto__;
        return statearr_12809;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
    };
  }(c__7407__auto__));
  return c__7407__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7407__auto___12932 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___12932, out) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___12932, out) {
            return function(state_12907) {
              var state_val_12908 = state_12907[1];
              if (state_val_12908 === 7) {
                var inst_12902 = state_12907[2];
                var state_12907__$1 = state_12907;
                var statearr_12909_12933 = state_12907__$1;
                statearr_12909_12933[2] = inst_12902;
                statearr_12909_12933[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12908 === 1) {
                  var inst_12884 = null;
                  var state_12907__$1 = function() {
                    var statearr_12910 = state_12907;
                    statearr_12910[7] = inst_12884;
                    return statearr_12910;
                  }();
                  var statearr_12911_12934 = state_12907__$1;
                  statearr_12911_12934[2] = null;
                  statearr_12911_12934[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12908 === 4) {
                    var inst_12887 = state_12907[8];
                    var inst_12887__$1 = state_12907[2];
                    var inst_12888 = inst_12887__$1 == null;
                    var inst_12889 = cljs.core.not.call(null, inst_12888);
                    var state_12907__$1 = function() {
                      var statearr_12912 = state_12907;
                      statearr_12912[8] = inst_12887__$1;
                      return statearr_12912;
                    }();
                    if (inst_12889) {
                      var statearr_12913_12935 = state_12907__$1;
                      statearr_12913_12935[1] = 5;
                    } else {
                      var statearr_12914_12936 = state_12907__$1;
                      statearr_12914_12936[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12908 === 6) {
                      var state_12907__$1 = state_12907;
                      var statearr_12915_12937 = state_12907__$1;
                      statearr_12915_12937[2] = null;
                      statearr_12915_12937[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12908 === 3) {
                        var inst_12904 = state_12907[2];
                        var inst_12905 = cljs.core.async.close_BANG_.call(null, out);
                        var state_12907__$1 = function() {
                          var statearr_12916 = state_12907;
                          statearr_12916[9] = inst_12904;
                          return statearr_12916;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12907__$1, inst_12905);
                      } else {
                        if (state_val_12908 === 2) {
                          var state_12907__$1 = state_12907;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12907__$1, 4, ch);
                        } else {
                          if (state_val_12908 === 11) {
                            var inst_12887 = state_12907[8];
                            var inst_12896 = state_12907[2];
                            var inst_12884 = inst_12887;
                            var state_12907__$1 = function() {
                              var statearr_12917 = state_12907;
                              statearr_12917[7] = inst_12884;
                              statearr_12917[10] = inst_12896;
                              return statearr_12917;
                            }();
                            var statearr_12918_12938 = state_12907__$1;
                            statearr_12918_12938[2] = null;
                            statearr_12918_12938[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12908 === 9) {
                              var inst_12887 = state_12907[8];
                              var state_12907__$1 = state_12907;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12907__$1, 11, out, inst_12887);
                            } else {
                              if (state_val_12908 === 5) {
                                var inst_12887 = state_12907[8];
                                var inst_12884 = state_12907[7];
                                var inst_12891 = cljs.core._EQ_.call(null, inst_12887, inst_12884);
                                var state_12907__$1 = state_12907;
                                if (inst_12891) {
                                  var statearr_12920_12939 = state_12907__$1;
                                  statearr_12920_12939[1] = 8;
                                } else {
                                  var statearr_12921_12940 = state_12907__$1;
                                  statearr_12921_12940[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12908 === 10) {
                                  var inst_12899 = state_12907[2];
                                  var state_12907__$1 = state_12907;
                                  var statearr_12922_12941 = state_12907__$1;
                                  statearr_12922_12941[2] = inst_12899;
                                  statearr_12922_12941[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12908 === 8) {
                                    var inst_12884 = state_12907[7];
                                    var tmp12919 = inst_12884;
                                    var inst_12884__$1 = tmp12919;
                                    var state_12907__$1 = function() {
                                      var statearr_12923 = state_12907;
                                      statearr_12923[7] = inst_12884__$1;
                                      return statearr_12923;
                                    }();
                                    var statearr_12924_12942 = state_12907__$1;
                                    statearr_12924_12942[2] = null;
                                    statearr_12924_12942[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___12932, out);
          return function(switch__7351__auto__, c__7407__auto___12932, out) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_12928 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_12928[0] = state_machine__7352__auto__;
                statearr_12928[1] = 1;
                return statearr_12928;
              };
              var state_machine__7352__auto____1 = function(state_12907) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_12907);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e12929) {
                      if (e12929 instanceof Object) {
                        var ex__7355__auto__ = e12929;
                        var statearr_12930_12943 = state_12907;
                        statearr_12930_12943[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12907);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12929;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12944 = state_12907;
                    state_12907 = G__12944;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_12907) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_12907);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___12932, out);
        }();
        var state__7409__auto__ = function() {
          var statearr_12931 = f__7408__auto__.call(null);
          statearr_12931[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___12932;
          return statearr_12931;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___12932, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7407__auto___13079 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___13079, out) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___13079, out) {
            return function(state_13049) {
              var state_val_13050 = state_13049[1];
              if (state_val_13050 === 7) {
                var inst_13045 = state_13049[2];
                var state_13049__$1 = state_13049;
                var statearr_13051_13080 = state_13049__$1;
                statearr_13051_13080[2] = inst_13045;
                statearr_13051_13080[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13050 === 1) {
                  var inst_13012 = new Array(n);
                  var inst_13013 = inst_13012;
                  var inst_13014 = 0;
                  var state_13049__$1 = function() {
                    var statearr_13052 = state_13049;
                    statearr_13052[7] = inst_13013;
                    statearr_13052[8] = inst_13014;
                    return statearr_13052;
                  }();
                  var statearr_13053_13081 = state_13049__$1;
                  statearr_13053_13081[2] = null;
                  statearr_13053_13081[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13050 === 4) {
                    var inst_13017 = state_13049[9];
                    var inst_13017__$1 = state_13049[2];
                    var inst_13018 = inst_13017__$1 == null;
                    var inst_13019 = cljs.core.not.call(null, inst_13018);
                    var state_13049__$1 = function() {
                      var statearr_13054 = state_13049;
                      statearr_13054[9] = inst_13017__$1;
                      return statearr_13054;
                    }();
                    if (inst_13019) {
                      var statearr_13055_13082 = state_13049__$1;
                      statearr_13055_13082[1] = 5;
                    } else {
                      var statearr_13056_13083 = state_13049__$1;
                      statearr_13056_13083[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13050 === 15) {
                      var inst_13039 = state_13049[2];
                      var state_13049__$1 = state_13049;
                      var statearr_13057_13084 = state_13049__$1;
                      statearr_13057_13084[2] = inst_13039;
                      statearr_13057_13084[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13050 === 13) {
                        var state_13049__$1 = state_13049;
                        var statearr_13058_13085 = state_13049__$1;
                        statearr_13058_13085[2] = null;
                        statearr_13058_13085[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13050 === 6) {
                          var inst_13014 = state_13049[8];
                          var inst_13035 = inst_13014 > 0;
                          var state_13049__$1 = state_13049;
                          if (cljs.core.truth_(inst_13035)) {
                            var statearr_13059_13086 = state_13049__$1;
                            statearr_13059_13086[1] = 12;
                          } else {
                            var statearr_13060_13087 = state_13049__$1;
                            statearr_13060_13087[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13050 === 3) {
                            var inst_13047 = state_13049[2];
                            var state_13049__$1 = state_13049;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13049__$1, inst_13047);
                          } else {
                            if (state_val_13050 === 12) {
                              var inst_13013 = state_13049[7];
                              var inst_13037 = cljs.core.vec.call(null, inst_13013);
                              var state_13049__$1 = state_13049;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13049__$1, 15, out, inst_13037);
                            } else {
                              if (state_val_13050 === 2) {
                                var state_13049__$1 = state_13049;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13049__$1, 4, ch);
                              } else {
                                if (state_val_13050 === 11) {
                                  var inst_13029 = state_13049[2];
                                  var inst_13030 = new Array(n);
                                  var inst_13013 = inst_13030;
                                  var inst_13014 = 0;
                                  var state_13049__$1 = function() {
                                    var statearr_13061 = state_13049;
                                    statearr_13061[10] = inst_13029;
                                    statearr_13061[7] = inst_13013;
                                    statearr_13061[8] = inst_13014;
                                    return statearr_13061;
                                  }();
                                  var statearr_13062_13088 = state_13049__$1;
                                  statearr_13062_13088[2] = null;
                                  statearr_13062_13088[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13050 === 9) {
                                    var inst_13013 = state_13049[7];
                                    var inst_13027 = cljs.core.vec.call(null, inst_13013);
                                    var state_13049__$1 = state_13049;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13049__$1, 11, out, inst_13027);
                                  } else {
                                    if (state_val_13050 === 5) {
                                      var inst_13017 = state_13049[9];
                                      var inst_13022 = state_13049[11];
                                      var inst_13013 = state_13049[7];
                                      var inst_13014 = state_13049[8];
                                      var inst_13021 = inst_13013[inst_13014] = inst_13017;
                                      var inst_13022__$1 = inst_13014 + 1;
                                      var inst_13023 = inst_13022__$1 < n;
                                      var state_13049__$1 = function() {
                                        var statearr_13063 = state_13049;
                                        statearr_13063[11] = inst_13022__$1;
                                        statearr_13063[12] = inst_13021;
                                        return statearr_13063;
                                      }();
                                      if (cljs.core.truth_(inst_13023)) {
                                        var statearr_13064_13089 = state_13049__$1;
                                        statearr_13064_13089[1] = 8;
                                      } else {
                                        var statearr_13065_13090 = state_13049__$1;
                                        statearr_13065_13090[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13050 === 14) {
                                        var inst_13042 = state_13049[2];
                                        var inst_13043 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_13049__$1 = function() {
                                          var statearr_13067 = state_13049;
                                          statearr_13067[13] = inst_13042;
                                          return statearr_13067;
                                        }();
                                        var statearr_13068_13091 = state_13049__$1;
                                        statearr_13068_13091[2] = inst_13043;
                                        statearr_13068_13091[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13050 === 10) {
                                          var inst_13033 = state_13049[2];
                                          var state_13049__$1 = state_13049;
                                          var statearr_13069_13092 = state_13049__$1;
                                          statearr_13069_13092[2] = inst_13033;
                                          statearr_13069_13092[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13050 === 8) {
                                            var inst_13022 = state_13049[11];
                                            var inst_13013 = state_13049[7];
                                            var tmp13066 = inst_13013;
                                            var inst_13013__$1 = tmp13066;
                                            var inst_13014 = inst_13022;
                                            var state_13049__$1 = function() {
                                              var statearr_13070 = state_13049;
                                              statearr_13070[7] = inst_13013__$1;
                                              statearr_13070[8] = inst_13014;
                                              return statearr_13070;
                                            }();
                                            var statearr_13071_13093 = state_13049__$1;
                                            statearr_13071_13093[2] = null;
                                            statearr_13071_13093[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___13079, out);
          return function(switch__7351__auto__, c__7407__auto___13079, out) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_13075 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_13075[0] = state_machine__7352__auto__;
                statearr_13075[1] = 1;
                return statearr_13075;
              };
              var state_machine__7352__auto____1 = function(state_13049) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_13049);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e13076) {
                      if (e13076 instanceof Object) {
                        var ex__7355__auto__ = e13076;
                        var statearr_13077_13094 = state_13049;
                        statearr_13077_13094[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13049);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13076;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13095 = state_13049;
                    state_13049 = G__13095;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_13049) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_13049);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___13079, out);
        }();
        var state__7409__auto__ = function() {
          var statearr_13078 = f__7408__auto__.call(null);
          statearr_13078[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___13079;
          return statearr_13078;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___13079, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7407__auto___13238 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7407__auto___13238, out) {
      return function() {
        var f__7408__auto__ = function() {
          var switch__7351__auto__ = function(c__7407__auto___13238, out) {
            return function(state_13208) {
              var state_val_13209 = state_13208[1];
              if (state_val_13209 === 7) {
                var inst_13204 = state_13208[2];
                var state_13208__$1 = state_13208;
                var statearr_13210_13239 = state_13208__$1;
                statearr_13210_13239[2] = inst_13204;
                statearr_13210_13239[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13209 === 1) {
                  var inst_13167 = [];
                  var inst_13168 = inst_13167;
                  var inst_13169 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_13208__$1 = function() {
                    var statearr_13211 = state_13208;
                    statearr_13211[7] = inst_13169;
                    statearr_13211[8] = inst_13168;
                    return statearr_13211;
                  }();
                  var statearr_13212_13240 = state_13208__$1;
                  statearr_13212_13240[2] = null;
                  statearr_13212_13240[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13209 === 4) {
                    var inst_13172 = state_13208[9];
                    var inst_13172__$1 = state_13208[2];
                    var inst_13173 = inst_13172__$1 == null;
                    var inst_13174 = cljs.core.not.call(null, inst_13173);
                    var state_13208__$1 = function() {
                      var statearr_13213 = state_13208;
                      statearr_13213[9] = inst_13172__$1;
                      return statearr_13213;
                    }();
                    if (inst_13174) {
                      var statearr_13214_13241 = state_13208__$1;
                      statearr_13214_13241[1] = 5;
                    } else {
                      var statearr_13215_13242 = state_13208__$1;
                      statearr_13215_13242[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13209 === 15) {
                      var inst_13198 = state_13208[2];
                      var state_13208__$1 = state_13208;
                      var statearr_13216_13243 = state_13208__$1;
                      statearr_13216_13243[2] = inst_13198;
                      statearr_13216_13243[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13209 === 13) {
                        var state_13208__$1 = state_13208;
                        var statearr_13217_13244 = state_13208__$1;
                        statearr_13217_13244[2] = null;
                        statearr_13217_13244[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13209 === 6) {
                          var inst_13168 = state_13208[8];
                          var inst_13193 = inst_13168.length;
                          var inst_13194 = inst_13193 > 0;
                          var state_13208__$1 = state_13208;
                          if (cljs.core.truth_(inst_13194)) {
                            var statearr_13218_13245 = state_13208__$1;
                            statearr_13218_13245[1] = 12;
                          } else {
                            var statearr_13219_13246 = state_13208__$1;
                            statearr_13219_13246[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13209 === 3) {
                            var inst_13206 = state_13208[2];
                            var state_13208__$1 = state_13208;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13208__$1, inst_13206);
                          } else {
                            if (state_val_13209 === 12) {
                              var inst_13168 = state_13208[8];
                              var inst_13196 = cljs.core.vec.call(null, inst_13168);
                              var state_13208__$1 = state_13208;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13208__$1, 15, out, inst_13196);
                            } else {
                              if (state_val_13209 === 2) {
                                var state_13208__$1 = state_13208;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13208__$1, 4, ch);
                              } else {
                                if (state_val_13209 === 11) {
                                  var inst_13176 = state_13208[10];
                                  var inst_13172 = state_13208[9];
                                  var inst_13186 = state_13208[2];
                                  var inst_13187 = [];
                                  var inst_13188 = inst_13187.push(inst_13172);
                                  var inst_13168 = inst_13187;
                                  var inst_13169 = inst_13176;
                                  var state_13208__$1 = function() {
                                    var statearr_13220 = state_13208;
                                    statearr_13220[11] = inst_13186;
                                    statearr_13220[12] = inst_13188;
                                    statearr_13220[7] = inst_13169;
                                    statearr_13220[8] = inst_13168;
                                    return statearr_13220;
                                  }();
                                  var statearr_13221_13247 = state_13208__$1;
                                  statearr_13221_13247[2] = null;
                                  statearr_13221_13247[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13209 === 9) {
                                    var inst_13168 = state_13208[8];
                                    var inst_13184 = cljs.core.vec.call(null, inst_13168);
                                    var state_13208__$1 = state_13208;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13208__$1, 11, out, inst_13184);
                                  } else {
                                    if (state_val_13209 === 5) {
                                      var inst_13176 = state_13208[10];
                                      var inst_13172 = state_13208[9];
                                      var inst_13169 = state_13208[7];
                                      var inst_13176__$1 = f.call(null, inst_13172);
                                      var inst_13177 = cljs.core._EQ_.call(null, inst_13176__$1, inst_13169);
                                      var inst_13178 = cljs.core.keyword_identical_QMARK_.call(null, inst_13169, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_13179 = inst_13177 || inst_13178;
                                      var state_13208__$1 = function() {
                                        var statearr_13222 = state_13208;
                                        statearr_13222[10] = inst_13176__$1;
                                        return statearr_13222;
                                      }();
                                      if (cljs.core.truth_(inst_13179)) {
                                        var statearr_13223_13248 = state_13208__$1;
                                        statearr_13223_13248[1] = 8;
                                      } else {
                                        var statearr_13224_13249 = state_13208__$1;
                                        statearr_13224_13249[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13209 === 14) {
                                        var inst_13201 = state_13208[2];
                                        var inst_13202 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_13208__$1 = function() {
                                          var statearr_13226 = state_13208;
                                          statearr_13226[13] = inst_13201;
                                          return statearr_13226;
                                        }();
                                        var statearr_13227_13250 = state_13208__$1;
                                        statearr_13227_13250[2] = inst_13202;
                                        statearr_13227_13250[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13209 === 10) {
                                          var inst_13191 = state_13208[2];
                                          var state_13208__$1 = state_13208;
                                          var statearr_13228_13251 = state_13208__$1;
                                          statearr_13228_13251[2] = inst_13191;
                                          statearr_13228_13251[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13209 === 8) {
                                            var inst_13176 = state_13208[10];
                                            var inst_13172 = state_13208[9];
                                            var inst_13168 = state_13208[8];
                                            var inst_13181 = inst_13168.push(inst_13172);
                                            var tmp13225 = inst_13168;
                                            var inst_13168__$1 = tmp13225;
                                            var inst_13169 = inst_13176;
                                            var state_13208__$1 = function() {
                                              var statearr_13229 = state_13208;
                                              statearr_13229[14] = inst_13181;
                                              statearr_13229[7] = inst_13169;
                                              statearr_13229[8] = inst_13168__$1;
                                              return statearr_13229;
                                            }();
                                            var statearr_13230_13252 = state_13208__$1;
                                            statearr_13230_13252[2] = null;
                                            statearr_13230_13252[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7407__auto___13238, out);
          return function(switch__7351__auto__, c__7407__auto___13238, out) {
            return function() {
              var state_machine__7352__auto__ = null;
              var state_machine__7352__auto____0 = function() {
                var statearr_13234 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_13234[0] = state_machine__7352__auto__;
                statearr_13234[1] = 1;
                return statearr_13234;
              };
              var state_machine__7352__auto____1 = function(state_13208) {
                while (true) {
                  var ret_value__7353__auto__ = function() {
                    try {
                      while (true) {
                        var result__7354__auto__ = switch__7351__auto__.call(null, state_13208);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7354__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7354__auto__;
                        }
                        break;
                      }
                    } catch (e13235) {
                      if (e13235 instanceof Object) {
                        var ex__7355__auto__ = e13235;
                        var statearr_13236_13253 = state_13208;
                        statearr_13236_13253[5] = ex__7355__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13208);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13235;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7353__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13254 = state_13208;
                    state_13208 = G__13254;
                    continue;
                  } else {
                    return ret_value__7353__auto__;
                  }
                  break;
                }
              };
              state_machine__7352__auto__ = function(state_13208) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7352__auto____0.call(this);
                  case 1:
                    return state_machine__7352__auto____1.call(this, state_13208);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7352__auto____0;
              state_machine__7352__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7352__auto____1;
              return state_machine__7352__auto__;
            }();
          }(switch__7351__auto__, c__7407__auto___13238, out);
        }();
        var state__7409__auto__ = function() {
          var statearr_13237 = f__7408__auto__.call(null);
          statearr_13237[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7407__auto___13238;
          return statearr_13237;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7409__auto__);
      };
    }(c__7407__auto___13238, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("hoard.acquire");
goog.require("cljs.core");
goog.require("hoard.twitter");
goog.require("hoard.backup");
goog.require("cljs.nodejs");
goog.require("cljs.core.async");
hoard.acquire.load_sample_data_QMARK_ = true;
hoard.acquire.data = function data(screen_name, channel) {
  if (cljs.core.truth_(hoard.acquire.load_sample_data_QMARK_)) {
    return hoard.acquire.from_file.call(null, screen_name, channel);
  } else {
    return hoard.acquire.from_twitter.call(null, screen_name, channel);
  }
};
hoard.acquire.from_file = function from_file(screen_name, channel) {
  var data = cljs.nodejs.require.call(null, "./tweets.json");
  console.log("Placing data on channel");
  return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "user-tweets", "user-tweets", 96109777), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [screen_name, data], null)], null));
};
hoard.acquire.from_twitter = function from_twitter(screen_name, channel) {
  console.log("getting data from twitter");
  return hoard.twitter.get_user_tweets.call(null, screen_name, function(error, tweets, response) {
    if (cljs.core.truth_(error)) {
      return console.log(error);
    } else {
      console.log("Placing data on channel");
      return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "user-tweets", "user-tweets", 96109777), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [screen_name, tweets], null)], null));
    }
  });
};
goog.provide("goog.ui.IdGenerator");
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return ":" + (this.nextId_++).toString(36);
};
goog.provide("goog.dom.forms");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || el.disabled || el.tagName.toLowerCase() == "fieldset") {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case "file":
      ;
      case "submit":
      ;
      case "reset":
      ;
      case "button":
        break;
      case "select-multiple":
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName("input");
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == "image") {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && el.type && el.type.toLowerCase() == "file") {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == "FORM") {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return!!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return!!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case "checkbox":
    ;
    case "radio":
      return goog.dom.forms.getInputChecked_(el);
    case "select-one":
      return goog.dom.forms.getSelectSingle_(el);
    case "select-multiple":
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els) {
    if (els.type) {
      return goog.dom.forms.getValue(els);
    } else {
      for (var i = 0;i < els.length;i++) {
        var val = goog.dom.forms.getValue(els[i]);
        if (val) {
          return val;
        }
      }
    }
  }
  return null;
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case "checkbox":
      ;
      case "radio":
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case "select-one":
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case "select-multiple":
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value ? "checked" : null;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events.EventType");
goog.require("goog.events.EventTarget");
goog.require("goog.events");
clojure.browser.event.IEventType = function() {
  var obj5396 = {};
  return obj5396;
}();
clojure.browser.event.event_types = function event_types(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.clojure$browser$event$IEventType$event_types$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.clojure$browser$event$IEventType$event_types$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = clojure.browser.event.event_types[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = clojure.browser.event.event_types["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEventType.event-types", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__5397) {
      var vec__5398 = p__5397;
      var k = cljs.core.nth.call(null, vec__5398, 0, null);
      var v = cljs.core.nth.call(null, vec__5398, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
if (typeof Element !== "undefined") {
  Element.prototype.clojure$browser$event$IEventType$ = true;
  Element.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
    var this$__$1 = this;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
      return function(p__5399) {
        var vec__5400 = p__5399;
        var k = cljs.core.nth.call(null, vec__5400, 0, null);
        var v = cljs.core.nth.call(null, vec__5400, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
      };
    }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
  };
} else {
}
clojure.browser.event.listen = function() {
  var listen = null;
  var listen__3 = function(src, type, fn) {
    return listen.call(null, src, type, fn, false);
  };
  var listen__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen__3.call(this, src, type, fn);
      case 4:
        return listen__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen.cljs$core$IFn$_invoke$arity$3 = listen__3;
  listen.cljs$core$IFn$_invoke$arity$4 = listen__4;
  return listen;
}();
clojure.browser.event.listen_once = function() {
  var listen_once = null;
  var listen_once__3 = function(src, type, fn) {
    return listen_once.call(null, src, type, fn, false);
  };
  var listen_once__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen_once = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen_once__3.call(this, src, type, fn);
      case 4:
        return listen_once__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once.cljs$core$IFn$_invoke$arity$3 = listen_once__3;
  listen_once.cljs$core$IFn$_invoke$arity$4 = listen_once__4;
  return listen_once;
}();
clojure.browser.event.unlisten = function() {
  var unlisten = null;
  var unlisten__3 = function(src, type, fn) {
    return unlisten.call(null, src, type, fn, false);
  };
  var unlisten__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  unlisten = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return unlisten__3.call(this, src, type, fn);
      case 4:
        return unlisten__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten.cljs$core$IFn$_invoke$arity$3 = unlisten__3;
  unlisten.cljs$core$IFn$_invoke$arity$4 = unlisten__4;
  return unlisten;
}();
clojure.browser.event.unlisten_by_key = function unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.json");
goog.require("clojure.browser.event");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__5517) {
  var vec__5518 = p__5517;
  var k = cljs.core.nth.call(null, vec__5518, 0, null);
  var v = cljs.core.nth.call(null, vec__5518, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
  var obj5520 = {};
  return obj5520;
}();
clojure.browser.net.connect = function() {
  var connect = null;
  var connect__1 = function(this$) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$1;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.connect[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var connect__2 = function(this$, opt1) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.connect[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1);
    }
  };
  var connect__3 = function(this$, opt1, opt2) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.connect[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2);
    }
  };
  var connect__4 = function(this$, opt1, opt2, opt3) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$4;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.connect[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2, opt3);
    }
  };
  connect = function(this$, opt1, opt2, opt3) {
    switch(arguments.length) {
      case 1:
        return connect__1.call(this, this$);
      case 2:
        return connect__2.call(this, this$, opt1);
      case 3:
        return connect__3.call(this, this$, opt1, opt2);
      case 4:
        return connect__4.call(this, this$, opt1, opt2, opt3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  connect.cljs$core$IFn$_invoke$arity$1 = connect__1;
  connect.cljs$core$IFn$_invoke$arity$2 = connect__2;
  connect.cljs$core$IFn$_invoke$arity$3 = connect__3;
  connect.cljs$core$IFn$_invoke$arity$4 = connect__4;
  return connect;
}();
clojure.browser.net.transmit = function() {
  var transmit = null;
  var transmit__2 = function(this$, opt) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt);
    }
  };
  var transmit__3 = function(this$, opt, opt2) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2);
    }
  };
  var transmit__4 = function(this$, opt, opt2, opt3) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$4;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3);
    }
  };
  var transmit__5 = function(this$, opt, opt2, opt3, opt4) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$5;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4);
    }
  };
  var transmit__6 = function(this$, opt, opt2, opt3, opt4, opt5) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$6;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4, opt5);
    }
  };
  transmit = function(this$, opt, opt2, opt3, opt4, opt5) {
    switch(arguments.length) {
      case 2:
        return transmit__2.call(this, this$, opt);
      case 3:
        return transmit__3.call(this, this$, opt, opt2);
      case 4:
        return transmit__4.call(this, this$, opt, opt2, opt3);
      case 5:
        return transmit__5.call(this, this$, opt, opt2, opt3, opt4);
      case 6:
        return transmit__6.call(this, this$, opt, opt2, opt3, opt4, opt5);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transmit.cljs$core$IFn$_invoke$arity$2 = transmit__2;
  transmit.cljs$core$IFn$_invoke$arity$3 = transmit__3;
  transmit.cljs$core$IFn$_invoke$arity$4 = transmit__4;
  transmit.cljs$core$IFn$_invoke$arity$5 = transmit__5;
  transmit.cljs$core$IFn$_invoke$arity$6 = transmit__6;
  return transmit;
}();
clojure.browser.net.close = function close(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.clojure$browser$net$IConnection$close$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = clojure.browser.net.close[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = clojure.browser.net.close["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__5521) {
      var vec__5522 = p__5521;
      var k = cljs.core.nth.call(null, vec__5522, 0, null);
      var v = cljs.core.nth.call(null, vec__5522, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__5523) {
  var vec__5524 = p__5523;
  var k = cljs.core.nth.call(null, vec__5524, 0, null);
  var v = cljs.core.nth.call(null, vec__5524, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
  var obj5526 = {};
  return obj5526;
}();
clojure.browser.net.register_service = function() {
  var register_service = null;
  var register_service__3 = function(this$, service_name, fn) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn);
    }
  };
  var register_service__4 = function(this$, service_name, fn, encode_json_QMARK_) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn, encode_json_QMARK_);
    }
  };
  register_service = function(this$, service_name, fn, encode_json_QMARK_) {
    switch(arguments.length) {
      case 3:
        return register_service__3.call(this, this$, service_name, fn);
      case 4:
        return register_service__4.call(this, this$, service_name, fn, encode_json_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  register_service.cljs$core$IFn$_invoke$arity$3 = register_service__3;
  register_service.cljs$core$IFn$_invoke$arity$4 = register_service__4;
  return register_service;
}();
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close();
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
clojure.browser.net.xpc_connection = function() {
  var xpc_connection = null;
  var xpc_connection__0 = function() {
    var temp__4126__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
    if (cljs.core.truth_(temp__4126__auto__)) {
      var config = temp__4126__auto__;
      return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
    } else {
      return null;
    }
  };
  var xpc_connection__1 = function(config) {
    return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__5532) {
      var vec__5533 = p__5532;
      var k = cljs.core.nth.call(null, vec__5533, 0, null);
      var v = cljs.core.nth.call(null, vec__5533, 1, null);
      var temp__4124__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var field = temp__4124__auto__;
        var G__5534 = sum;
        G__5534[field] = v;
        return G__5534;
      } else {
        return sum;
      }
    }, function() {
      var obj5536 = {};
      return obj5536;
    }(), config));
  };
  xpc_connection = function(config) {
    switch(arguments.length) {
      case 0:
        return xpc_connection__0.call(this);
      case 1:
        return xpc_connection__1.call(this, config);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpc_connection.cljs$core$IFn$_invoke$arity$0 = xpc_connection__0;
  xpc_connection.cljs$core$IFn$_invoke$arity$1 = xpc_connection__1;
  return xpc_connection;
}();
goog.provide("goog.net.WebSocket");
goog.provide("goog.net.WebSocket.ErrorEvent");
goog.provide("goog.net.WebSocket.EventType");
goog.provide("goog.net.WebSocket.MessageEvent");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.require("goog.log");
goog.net.WebSocket = function(opt_autoReconnect, opt_getNextReconnect) {
  goog.net.WebSocket.base(this, "constructor");
  this.autoReconnect_ = goog.isDef(opt_autoReconnect) ? opt_autoReconnect : true;
  this.getNextReconnect_ = opt_getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.inherits(goog.net.WebSocket, goog.events.EventTarget);
goog.net.WebSocket.prototype.webSocket_ = null;
goog.net.WebSocket.prototype.url_ = null;
goog.net.WebSocket.prototype.protocol_ = undefined;
goog.net.WebSocket.prototype.closeExpected_ = false;
goog.net.WebSocket.prototype.reconnectAttempt_ = 0;
goog.net.WebSocket.prototype.logger_ = goog.log.getLogger("goog.net.WebSocket");
goog.net.WebSocket.EventType = {CLOSED:goog.events.getUniqueId("closed"), ERROR:goog.events.getUniqueId("error"), MESSAGE:goog.events.getUniqueId("message"), OPENED:goog.events.getUniqueId("opened")};
goog.net.WebSocket.ReadyState_ = {CONNECTING:0, OPEN:1, CLOSING:2, CLOSED:3};
goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1E3;
goog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {
  var time = Math.pow(2, attempt) * 1E3;
  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_);
};
goog.net.WebSocket.protectEntryPoints = function(errorHandler) {
  goog.net.WebSocket.prototype.onOpen_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_);
};
goog.net.WebSocket.prototype.open = function(url, opt_protocol) {
  goog.asserts.assert(goog.global["WebSocket"], "This browser does not support WebSocket");
  goog.asserts.assert(!this.isOpen(), "The WebSocket is already open");
  this.clearReconnectTimer_();
  this.url_ = url;
  this.protocol_ = opt_protocol;
  if (this.protocol_) {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_ + " with protocol " + this.protocol_);
    this.webSocket_ = new WebSocket(this.url_, this.protocol_);
  } else {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_);
    this.webSocket_ = new WebSocket(this.url_);
  }
  this.webSocket_.onopen = goog.bind(this.onOpen_, this);
  this.webSocket_.onclose = goog.bind(this.onClose_, this);
  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);
  this.webSocket_.onerror = goog.bind(this.onError_, this);
};
goog.net.WebSocket.prototype.close = function() {
  this.clearReconnectTimer_();
  if (this.webSocket_) {
    goog.log.info(this.logger_, "Closing the WebSocket.");
    this.closeExpected_ = true;
    this.webSocket_.close();
    this.webSocket_ = null;
  }
};
goog.net.WebSocket.prototype.send = function(message) {
  goog.asserts.assert(this.isOpen(), "Cannot send without an open socket");
  this.webSocket_.send(message);
};
goog.net.WebSocket.prototype.isOpen = function() {
  return!!this.webSocket_ && this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN;
};
goog.net.WebSocket.prototype.onOpen_ = function() {
  goog.log.info(this.logger_, "WebSocket opened on " + this.url_);
  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);
  this.reconnectAttempt_ = 0;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.net.WebSocket.prototype.onClose_ = function(event) {
  goog.log.info(this.logger_, "The WebSocket on " + this.url_ + " closed.");
  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);
  this.webSocket_ = null;
  if (this.closeExpected_) {
    goog.log.info(this.logger_, "The WebSocket closed normally.");
    this.url_ = null;
    this.protocol_ = undefined;
  } else {
    goog.log.error(this.logger_, "The WebSocket disconnected unexpectedly: " + event.data);
    if (this.autoReconnect_) {
      var seconds = Math.floor(this.nextReconnect_ / 1E3);
      goog.log.info(this.logger_, "Seconds until next reconnect attempt: " + seconds);
      this.reconnectTimer_ = goog.Timer.callOnce(goog.bind(this.open, this, this.url_, this.protocol_), this.nextReconnect_, this);
      this.reconnectAttempt_++;
      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
    }
  }
  this.closeExpected_ = false;
};
goog.net.WebSocket.prototype.onMessage_ = function(event) {
  var message = event.data;
  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message));
};
goog.net.WebSocket.prototype.onError_ = function(event) {
  var data = (event.data);
  goog.log.error(this.logger_, "An error occurred: " + data);
  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data));
};
goog.net.WebSocket.prototype.clearReconnectTimer_ = function() {
  if (goog.isDefAndNotNull(this.reconnectTimer_)) {
    goog.Timer.clear(this.reconnectTimer_);
  }
  this.reconnectTimer_ = null;
};
goog.net.WebSocket.prototype.disposeInternal = function() {
  goog.net.WebSocket.base(this, "disposeInternal");
  this.close();
};
goog.net.WebSocket.MessageEvent = function(message) {
  goog.net.WebSocket.MessageEvent.base(this, "constructor", goog.net.WebSocket.EventType.MESSAGE);
  this.message = message;
};
goog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);
goog.net.WebSocket.ErrorEvent = function(data) {
  goog.net.WebSocket.ErrorEvent.base(this, "constructor", goog.net.WebSocket.EventType.ERROR);
  this.data = data;
};
goog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.WebSocket.prototype.onOpen_ = transformer(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = transformer(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = transformer(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = transformer(goog.net.WebSocket.prototype.onError_);
});
goog.provide("weasel.impls.websocket");
goog.require("cljs.core");
goog.require("goog.net.WebSocket");
goog.require("clojure.browser.event");
goog.require("clojure.browser.net");
weasel.impls.websocket.IWebSocket = function() {
  var obj5540 = {};
  return obj5540;
}();
weasel.impls.websocket.open_QMARK_ = function open_QMARK_(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.weasel$impls$websocket$IWebSocket$open_QMARK_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.weasel$impls$websocket$IWebSocket$open_QMARK_$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = weasel.impls.websocket.open_QMARK_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = weasel.impls.websocket.open_QMARK_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWebSocket.open?", this$);
        }
      }
    }().call(null, this$);
  }
};
weasel.impls.websocket.websocket_connection = function() {
  var websocket_connection = null;
  var websocket_connection__0 = function() {
    return websocket_connection.call(null, null, null);
  };
  var websocket_connection__1 = function(auto_reconnect_QMARK_) {
    return websocket_connection.call(null, auto_reconnect_QMARK_, null);
  };
  var websocket_connection__2 = function(auto_reconnect_QMARK_, next_reconnect_fn) {
    return new goog.net.WebSocket(auto_reconnect_QMARK_, next_reconnect_fn);
  };
  websocket_connection = function(auto_reconnect_QMARK_, next_reconnect_fn) {
    switch(arguments.length) {
      case 0:
        return websocket_connection__0.call(this);
      case 1:
        return websocket_connection__1.call(this, auto_reconnect_QMARK_);
      case 2:
        return websocket_connection__2.call(this, auto_reconnect_QMARK_, next_reconnect_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  websocket_connection.cljs$core$IFn$_invoke$arity$0 = websocket_connection__0;
  websocket_connection.cljs$core$IFn$_invoke$arity$1 = websocket_connection__1;
  websocket_connection.cljs$core$IFn$_invoke$arity$2 = websocket_connection__2;
  return websocket_connection;
}();
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$ = true;
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__5541) {
      var vec__5542 = p__5541;
      var k = cljs.core.nth.call(null, vec__5542, 0, null);
      var v = cljs.core.nth.call(null, vec__5542, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.WebSocket.EventType))));
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, url) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, url, null);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, url, protocol) {
  var this$__$1 = this;
  return this$__$1.open(url, protocol);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, message) {
  var this$__$1 = this;
  return this$__$1.send(message);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.weasel$impls$websocket$IWebSocket$ = true;
goog.net.WebSocket.prototype.weasel$impls$websocket$IWebSocket$open_QMARK_$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.isOpen(cljs.core.List.EMPTY);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj5404 = {};
  return obj5404;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3785__auto__ = reader;
    if (and__3785__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4441__auto__ = reader == null ? null : reader;
    return function() {
      var or__3797__auto__ = cljs.reader.read_char[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.reader.read_char["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3785__auto__ = reader;
    if (and__3785__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4441__auto__ = reader == null ? null : reader;
    return function() {
      var or__3797__auto__ = cljs.reader.unread[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.reader.unread["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3797__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3797__auto__)) {
    return or__3797__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      var G__5405__i = 0, G__5405__a = new Array(arguments.length - 1);
      while (G__5405__i < G__5405__a.length) {
        G__5405__a[G__5405__i] = arguments[G__5405__i + 1];
        ++G__5405__i;
      }
      msg = new cljs.core.IndexedSeq(G__5405__a, 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__5406) {
    var rdr = cljs.core.first(arglist__5406);
    var msg = cljs.core.rest(arglist__5406);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3785__auto__ = !(ch === "#");
  if (and__3785__auto__) {
    var and__3785__auto____$1 = !(ch === "'");
    if (and__3785__auto____$1) {
      var and__3785__auto____$2 = !(ch === ":");
      if (and__3785__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3785__auto____$2;
      }
    } else {
      return and__3785__auto____$1;
    }
  } else {
    return and__3785__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__5407 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__5408 = cljs.reader.read_char.call(null, rdr);
      sb = G__5407;
      ch = G__5408;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__5409 = cljs.reader.read_char.call(null, rdr);
      ch = G__5409;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__5410 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__5410;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__5411 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__5411;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3797__auto__ = ch == null;
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3797__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__5412 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__5413 = cljs.reader.read_char.call(null, reader);
      buffer = G__5412;
      ch = G__5413;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__5414 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__5415 = cljs.reader.read_char.call(null, reader);
        buffer = G__5414;
        ch = G__5415;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__5416 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__5417 = cljs.reader.read_char.call(null, reader);
          buffer = G__5416;
          ch = G__5417;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__5422 = function() {
            var G__5420 = buffer;
            G__5420.append(nch);
            return G__5420;
          }();
          var G__5423 = cljs.reader.read_char.call(null, reader);
          buffer = G__5422;
          ch = G__5423;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__5424 = function() {
            var G__5421 = buffer;
            G__5421.append(ch);
            return G__5421;
          }();
          var G__5425 = cljs.reader.read_char.call(null, reader);
          buffer = G__5424;
          ch = G__5425;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__3785__auto__)) {
      return!(token.length === 1);
    } else {
      return and__3785__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__5427 = o;
    if (G__5427) {
      var bit__4478__auto__ = G__5427.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4478__auto__ || G__5427.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__5427.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__5427);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__5427);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__5428 = reader;
        var G__5429 = eof_is_error;
        var G__5430 = sentinel;
        var G__5431 = is_recursive;
        reader = G__5428;
        eof_is_error = G__5429;
        sentinel = G__5430;
        is_recursive = G__5431;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__5432 = cljs.reader.read_comment.call(null, reader, ch);
          var G__5433 = eof_is_error;
          var G__5434 = sentinel;
          var G__5435 = is_recursive;
          reader = G__5432;
          eof_is_error = G__5433;
          sentinel = G__5434;
          is_recursive = G__5435;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__5436 = reader;
            var G__5437 = eof_is_error;
            var G__5438 = sentinel;
            var G__5439 = is_recursive;
            reader = G__5436;
            eof_is_error = G__5437;
            sentinel = G__5438;
            is_recursive = G__5439;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__5440 = b.append("0");
          b = G__5440;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__5442 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__5442, 0, null);
  var years = cljs.core.nth.call(null, vec__5442, 1, null);
  var months = cljs.core.nth.call(null, vec__5442, 2, null);
  var days = cljs.core.nth.call(null, vec__5442, 3, null);
  var hours = cljs.core.nth.call(null, vec__5442, 4, null);
  var minutes = cljs.core.nth.call(null, vec__5442, 5, null);
  var seconds = cljs.core.nth.call(null, vec__5442, 6, null);
  var fraction = cljs.core.nth.call(null, vec__5442, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__5442, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__5442, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__5442, 10, null);
  var v = vec__5442;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3797__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3797__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3797__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3797__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3797__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3797__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3797__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3797__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__5444 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__5444, 0, null);
    var months = cljs.core.nth.call(null, vec__5444, 1, null);
    var days = cljs.core.nth.call(null, vec__5444, 2, null);
    var hours = cljs.core.nth.call(null, vec__5444, 3, null);
    var minutes = cljs.core.nth.call(null, vec__5444, 4, null);
    var seconds = cljs.core.nth.call(null, vec__5444, 5, null);
    var ms = cljs.core.nth.call(null, vec__5444, 6, null);
    var offset = cljs.core.nth.call(null, vec__5444, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__5457_5469 = cljs.core.seq.call(null, form);
    var chunk__5458_5470 = null;
    var count__5459_5471 = 0;
    var i__5460_5472 = 0;
    while (true) {
      if (i__5460_5472 < count__5459_5471) {
        var x_5473 = cljs.core._nth.call(null, chunk__5458_5470, i__5460_5472);
        arr.push(x_5473);
        var G__5474 = seq__5457_5469;
        var G__5475 = chunk__5458_5470;
        var G__5476 = count__5459_5471;
        var G__5477 = i__5460_5472 + 1;
        seq__5457_5469 = G__5474;
        chunk__5458_5470 = G__5475;
        count__5459_5471 = G__5476;
        i__5460_5472 = G__5477;
        continue;
      } else {
        var temp__4126__auto___5478 = cljs.core.seq.call(null, seq__5457_5469);
        if (temp__4126__auto___5478) {
          var seq__5457_5479__$1 = temp__4126__auto___5478;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__5457_5479__$1)) {
            var c__4584__auto___5480 = cljs.core.chunk_first.call(null, seq__5457_5479__$1);
            var G__5481 = cljs.core.chunk_rest.call(null, seq__5457_5479__$1);
            var G__5482 = c__4584__auto___5480;
            var G__5483 = cljs.core.count.call(null, c__4584__auto___5480);
            var G__5484 = 0;
            seq__5457_5469 = G__5481;
            chunk__5458_5470 = G__5482;
            count__5459_5471 = G__5483;
            i__5460_5472 = G__5484;
            continue;
          } else {
            var x_5485 = cljs.core.first.call(null, seq__5457_5479__$1);
            arr.push(x_5485);
            var G__5486 = cljs.core.next.call(null, seq__5457_5479__$1);
            var G__5487 = null;
            var G__5488 = 0;
            var G__5489 = 0;
            seq__5457_5469 = G__5486;
            chunk__5458_5470 = G__5487;
            count__5459_5471 = G__5488;
            i__5460_5472 = G__5489;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj5462 = {};
        return obj5462;
      }();
      var seq__5463_5490 = cljs.core.seq.call(null, form);
      var chunk__5464_5491 = null;
      var count__5465_5492 = 0;
      var i__5466_5493 = 0;
      while (true) {
        if (i__5466_5493 < count__5465_5492) {
          var vec__5467_5494 = cljs.core._nth.call(null, chunk__5464_5491, i__5466_5493);
          var k_5495 = cljs.core.nth.call(null, vec__5467_5494, 0, null);
          var v_5496 = cljs.core.nth.call(null, vec__5467_5494, 1, null);
          obj[cljs.core.name.call(null, k_5495)] = v_5496;
          var G__5497 = seq__5463_5490;
          var G__5498 = chunk__5464_5491;
          var G__5499 = count__5465_5492;
          var G__5500 = i__5466_5493 + 1;
          seq__5463_5490 = G__5497;
          chunk__5464_5491 = G__5498;
          count__5465_5492 = G__5499;
          i__5466_5493 = G__5500;
          continue;
        } else {
          var temp__4126__auto___5501 = cljs.core.seq.call(null, seq__5463_5490);
          if (temp__4126__auto___5501) {
            var seq__5463_5502__$1 = temp__4126__auto___5501;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__5463_5502__$1)) {
              var c__4584__auto___5503 = cljs.core.chunk_first.call(null, seq__5463_5502__$1);
              var G__5504 = cljs.core.chunk_rest.call(null, seq__5463_5502__$1);
              var G__5505 = c__4584__auto___5503;
              var G__5506 = cljs.core.count.call(null, c__4584__auto___5503);
              var G__5507 = 0;
              seq__5463_5490 = G__5504;
              chunk__5464_5491 = G__5505;
              count__5465_5492 = G__5506;
              i__5466_5493 = G__5507;
              continue;
            } else {
              var vec__5468_5508 = cljs.core.first.call(null, seq__5463_5502__$1);
              var k_5509 = cljs.core.nth.call(null, vec__5468_5508, 0, null);
              var v_5510 = cljs.core.nth.call(null, vec__5468_5508, 1, null);
              obj[cljs.core.name.call(null, k_5509)] = v_5510;
              var G__5511 = cljs.core.next.call(null, seq__5463_5502__$1);
              var G__5512 = null;
              var G__5513 = 0;
              var G__5514 = 0;
              seq__5463_5490 = G__5511;
              chunk__5464_5491 = G__5512;
              count__5465_5492 = G__5513;
              i__5466_5493 = G__5514;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("weasel.repl");
goog.require("cljs.core");
goog.require("weasel.impls.websocket");
goog.require("cljs.reader");
goog.require("clojure.browser.net");
goog.require("clojure.browser.event");
weasel.repl.ws_connection = cljs.core.atom.call(null, null);
weasel.repl.alive_QMARK_ = function alive_QMARK_() {
  return!(cljs.core.deref.call(null, weasel.repl.ws_connection) == null);
};
weasel.repl.process_message = function() {
  var method_table__4694__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4695__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4696__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4697__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4698__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn(cljs.core.symbol.call(null, "weasel.repl", "process-message"), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4698__auto__, method_table__4694__auto__, prefer_table__4695__auto__, method_cache__4696__auto__, cached_hierarchy__4697__auto__);
}();
cljs.core._add_method.call(null, weasel.repl.process_message, new cljs.core.Keyword(null, "error", "error", -978969032), function(message) {
  return console.error([cljs.core.str("Websocket REPL error "), cljs.core.str((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(message))].join(""));
});
cljs.core._add_method.call(null, weasel.repl.process_message, new cljs.core.Keyword(null, "eval-js", "eval-js", 760905924), function(message) {
  var code = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(message);
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "result", "result", 1415092211), new cljs.core.Keyword(null, "value", "value", 305978217), function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(eval(code))].join("")], null);
    } catch (e5378) {
      if (e5378 instanceof Error) {
        var e = e5378;
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.pr_str.call(null, e), new cljs.core.Keyword(null, "stacktrace", "stacktrace", -95588394), cljs.core.truth_(e.hasOwnProperty("stack")) ? e.stack : "No stacktrace available."], null);
      } else {
        var e = e5378;
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.pr_str.call(null, e), new cljs.core.Keyword(null, "stacktrace", "stacktrace", -95588394), "No stacktrace available."], null);
      }
    }
  }()], null);
});
weasel.repl.repl_print = function() {
  var repl_print__delegate = function(args) {
    var temp__4124__auto__ = cljs.core.deref.call(null, weasel.repl.ws_connection);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var conn = temp__4124__auto__;
      return clojure.browser.net.transmit.call(null, cljs.core.deref.call(null, weasel.repl.ws_connection), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "print", "print", 1299562414), new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.apply.call(null, cljs.core.pr_str, args)], null));
    } else {
      return null;
    }
  };
  var repl_print = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__5379__i = 0, G__5379__a = new Array(arguments.length - 0);
      while (G__5379__i < G__5379__a.length) {
        G__5379__a[G__5379__i] = arguments[G__5379__i + 0];
        ++G__5379__i;
      }
      args = new cljs.core.IndexedSeq(G__5379__a, 0);
    }
    return repl_print__delegate.call(this, args);
  };
  repl_print.cljs$lang$maxFixedArity = 0;
  repl_print.cljs$lang$applyTo = function(arglist__5380) {
    var args = cljs.core.seq(arglist__5380);
    return repl_print__delegate(args);
  };
  repl_print.cljs$core$IFn$_invoke$arity$variadic = repl_print__delegate;
  return repl_print;
}();
weasel.repl.console_print = function() {
  var console_print__delegate = function(args) {
    return console.log.apply(console, cljs.core.into_array.call(null, args));
  };
  var console_print = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__5381__i = 0, G__5381__a = new Array(arguments.length - 0);
      while (G__5381__i < G__5381__a.length) {
        G__5381__a[G__5381__i] = arguments[G__5381__i + 0];
        ++G__5381__i;
      }
      args = new cljs.core.IndexedSeq(G__5381__a, 0);
    }
    return console_print__delegate.call(this, args);
  };
  console_print.cljs$lang$maxFixedArity = 0;
  console_print.cljs$lang$applyTo = function(arglist__5382) {
    var args = cljs.core.seq(arglist__5382);
    return console_print__delegate(args);
  };
  console_print.cljs$core$IFn$_invoke$arity$variadic = console_print__delegate;
  return console_print;
}();
weasel.repl.print_fns = new cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "repl", "repl", -35398667), weasel.repl.repl_print, new cljs.core.Keyword(null, "console", "console", 1228072057), weasel.repl.console_print, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "repl", "repl", -35398667), null, new cljs.core.Keyword(null, "console", "console", 1228072057), null], null), null), function() {
  var G__5383__delegate = function(args) {
    cljs.core.apply.call(null, weasel.repl.console_print, args);
    return cljs.core.apply.call(null, weasel.repl.repl_print, args);
  };
  var G__5383 = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__5384__i = 0, G__5384__a = new Array(arguments.length - 0);
      while (G__5384__i < G__5384__a.length) {
        G__5384__a[G__5384__i] = arguments[G__5384__i + 0];
        ++G__5384__i;
      }
      args = new cljs.core.IndexedSeq(G__5384__a, 0);
    }
    return G__5383__delegate.call(this, args);
  };
  G__5383.cljs$lang$maxFixedArity = 0;
  G__5383.cljs$lang$applyTo = function(arglist__5385) {
    var args = cljs.core.seq(arglist__5385);
    return G__5383__delegate(args);
  };
  G__5383.cljs$core$IFn$_invoke$arity$variadic = G__5383__delegate;
  return G__5383;
}()], true, false);
weasel.repl.connect = function() {
  var connect__delegate = function(repl_server_url, p__5386) {
    var map__5389 = p__5386;
    var map__5389__$1 = cljs.core.seq_QMARK_.call(null, map__5389) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5389) : map__5389;
    var print = cljs.core.get.call(null, map__5389__$1, new cljs.core.Keyword(null, "print", "print", 1299562414), new cljs.core.Keyword(null, "repl", "repl", -35398667));
    var on_close = cljs.core.get.call(null, map__5389__$1, new cljs.core.Keyword(null, "on-close", "on-close", -761178394));
    var on_error = cljs.core.get.call(null, map__5389__$1, new cljs.core.Keyword(null, "on-error", "on-error", 1728533530));
    var on_open = cljs.core.get.call(null, map__5389__$1, new cljs.core.Keyword(null, "on-open", "on-open", -1391088163));
    var verbose = cljs.core.get.call(null, map__5389__$1, new cljs.core.Keyword(null, "verbose", "verbose", 1694226060), true);
    var repl_connection = weasel.impls.websocket.websocket_connection.call(null);
    cljs.core.swap_BANG_.call(null, weasel.repl.ws_connection, cljs.core.constantly.call(null, repl_connection));
    clojure.browser.event.listen.call(null, repl_connection, new cljs.core.Keyword(null, "opened", "opened", -1451743091), function(repl_connection, map__5389, map__5389__$1, print, on_close, on_error, on_open, verbose) {
      return function(evt) {
        cljs.core.set_print_fn_BANG_.call(null, cljs.core.fn_QMARK_.call(null, print) ? print : cljs.core.get.call(null, weasel.repl.print_fns, print));
        clojure.browser.net.transmit.call(null, repl_connection, cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "ready", "ready", 1086465795)], null)));
        if (cljs.core.truth_(verbose)) {
          console.info("Opened Websocket REPL connection");
        } else {
        }
        if (cljs.core.fn_QMARK_.call(null, on_open)) {
          return on_open.call(null);
        } else {
          return null;
        }
      };
    }(repl_connection, map__5389, map__5389__$1, print, on_close, on_error, on_open, verbose));
    clojure.browser.event.listen.call(null, repl_connection, new cljs.core.Keyword(null, "message", "message", -406056002), function(repl_connection, map__5389, map__5389__$1, print, on_close, on_error, on_open, verbose) {
      return function(evt) {
        var map__5390 = cljs.reader.read_string.call(null, evt.message);
        var map__5390__$1 = cljs.core.seq_QMARK_.call(null, map__5390) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5390) : map__5390;
        var message = map__5390__$1;
        var op = cljs.core.get.call(null, map__5390__$1, new cljs.core.Keyword(null, "op", "op", -1882987955));
        var response = cljs.core.pr_str.call(null, weasel.repl.process_message.call(null, message));
        return clojure.browser.net.transmit.call(null, repl_connection, response);
      };
    }(repl_connection, map__5389, map__5389__$1, print, on_close, on_error, on_open, verbose));
    clojure.browser.event.listen.call(null, repl_connection, new cljs.core.Keyword(null, "closed", "closed", -919675359), function(repl_connection, map__5389, map__5389__$1, print, on_close, on_error, on_open, verbose) {
      return function(evt) {
        cljs.core.reset_BANG_.call(null, weasel.repl.ws_connection, null);
        if (cljs.core.truth_(verbose)) {
          console.info("Closed Websocket REPL connection");
        } else {
        }
        if (cljs.core.fn_QMARK_.call(null, on_close)) {
          return on_close.call(null);
        } else {
          return null;
        }
      };
    }(repl_connection, map__5389, map__5389__$1, print, on_close, on_error, on_open, verbose));
    clojure.browser.event.listen.call(null, repl_connection, new cljs.core.Keyword(null, "error", "error", -978969032), function(repl_connection, map__5389, map__5389__$1, print, on_close, on_error, on_open, verbose) {
      return function(evt) {
        if (cljs.core.truth_(verbose)) {
          console.error("WebSocket error", evt);
        } else {
        }
        if (cljs.core.fn_QMARK_.call(null, on_error)) {
          return on_error.call(null, evt);
        } else {
          return null;
        }
      };
    }(repl_connection, map__5389, map__5389__$1, print, on_close, on_error, on_open, verbose));
    return clojure.browser.net.connect.call(null, repl_connection, repl_server_url);
  };
  var connect = function(repl_server_url, var_args) {
    var p__5386 = null;
    if (arguments.length > 1) {
      var G__5391__i = 0, G__5391__a = new Array(arguments.length - 1);
      while (G__5391__i < G__5391__a.length) {
        G__5391__a[G__5391__i] = arguments[G__5391__i + 1];
        ++G__5391__i;
      }
      p__5386 = new cljs.core.IndexedSeq(G__5391__a, 0);
    }
    return connect__delegate.call(this, repl_server_url, p__5386);
  };
  connect.cljs$lang$maxFixedArity = 1;
  connect.cljs$lang$applyTo = function(arglist__5392) {
    var repl_server_url = cljs.core.first(arglist__5392);
    var p__5386 = cljs.core.rest(arglist__5392);
    return connect__delegate(repl_server_url, p__5386);
  };
  connect.cljs$core$IFn$_invoke$arity$variadic = connect__delegate;
  return connect;
}();
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("domina.support");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.dom");
var div_13001 = document.createElement("div");
var test_html_13002 = "   \x3clink/\x3e\x3ctable\x3e\x3c/table\x3e\x3ca href\x3d'/a' style\x3d'top:1px;float:left;opacity:.55;'\x3ea\x3c/a\x3e\x3cinput type\x3d'checkbox'/\x3e";
div_13001.innerHTML = test_html_13002;
domina.support.leading_whitespace_QMARK_ = cljs.core._EQ_.call(null, div_13001.firstChild.nodeType, 3);
domina.support.extraneous_tbody_QMARK_ = cljs.core._EQ_.call(null, div_13001.getElementsByTagName("tbody").length, 0);
domina.support.unscoped_html_elements_QMARK_ = cljs.core._EQ_.call(null, div_13001.getElementsByTagName("link").length, 0);
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var G__12514 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var G__12515 = cljs.core.next.call(null, coll__$1);
        sb = G__12514;
        coll__$1 = G__12515;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  var join__2 = function(separator, coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var coll__$2 = cljs.core.next.call(null, coll__$1);
        if (coll__$2 == null) {
        } else {
          sb.append(separator);
        }
        var G__12516 = sb;
        var G__12517 = coll__$2;
        sb = G__12516;
        coll__$1 = G__12517;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__12518 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__12518;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__12522 = cljs.core._EQ_;
    var expr__12523 = limit;
    if (cljs.core.truth_(pred__12522.call(null, 1, expr__12523))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__12522.call(null, 2, expr__12523))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__12525 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__12526 = limit__$1 - 1;
            var G__12527 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__12525;
            limit__$1 = G__12526;
            parts = G__12527;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__12528 = index - 1;
        index = G__12528;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___12529 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___12529)) {
        var replacement_12530 = temp__4124__auto___12529;
        buffer.append([cljs.core.str(replacement_12530)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__12531 = index + 1;
      index = G__12531;
      continue;
    }
    break;
  }
};
goog.provide("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri) {
  if (opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if (document.implementation && document.implementation.createDocument) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null);
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      if (doc) {
        if (opt_rootTagName) {
          doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || ""));
        }
        return doc;
      }
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml) {
  if (typeof DOMParser != "undefined") {
    return(new DOMParser).parseFromString(xml, "application/xml");
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      doc.loadXML(xml);
      return doc;
    }
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  if (typeof XMLSerializer != "undefined") {
    return(new XMLSerializer).serializeToString(xml);
  }
  var text = xml.xml;
  if (text) {
    return text;
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if (typeof node.selectSingleNode != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectSingleNode(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    }
  }
  return null;
};
goog.dom.xml.selectNodes = function(node, path) {
  if (typeof node.selectNodes != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectNodes(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      var results = [];
      var count = nodes.snapshotLength;
      for (var i = 0;i < count;i++) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    } else {
      return[];
    }
  }
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if (doc) {
    doc.resolveExternals = false;
    doc.validateOnParse = false;
    try {
      doc.setProperty("ProhibitDTD", true);
      doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB);
      doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH);
    } catch (e) {
    }
  }
  return doc;
};
goog.provide("domina");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.xml");
goog.require("goog.string");
goog.require("cljs.core");
goog.require("domina.support");
goog.require("goog.events");
goog.require("goog.style");
goog.require("clojure.string");
domina.re_html = /<|&#?\w+;/;
domina.re_leading_whitespace = /^\s+/;
domina.re_xhtml_tag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/i;
domina.re_tag_name = /<([\w:]+)/;
domina.re_no_inner_html = /<(?:script|style)/i;
domina.re_tbody = /<tbody/i;
var opt_wrapper_12544 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cselect multiple\x3d'multiple'\x3e", "\x3c/select\x3e"], null);
var table_section_wrapper_12545 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3ctable\x3e", "\x3c/table\x3e"], null);
var cell_wrapper_12546 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, "\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e", "\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e"], null);
domina.wrap_map = cljs.core.PersistentHashMap.fromArrays(["td", "optgroup", "tfoot", "tr", "area", new cljs.core.Keyword(null, "default", "default", -1987822328), "option", "legend", "thead", "col", "caption", "th", "colgroup", "tbody"], [cell_wrapper_12546, opt_wrapper_12544, table_section_wrapper_12545, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e", "\x3c/tbody\x3e\x3c/table\x3e"], null), new cljs.core.PersistentVector(null, 3, 
5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cmap\x3e", "\x3c/map\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, "", ""], null), opt_wrapper_12544, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cfieldset\x3e", "\x3c/fieldset\x3e"], null), table_section_wrapper_12545, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e", 
"\x3c/colgroup\x3e\x3c/table\x3e"], null), table_section_wrapper_12545, cell_wrapper_12546, table_section_wrapper_12545, table_section_wrapper_12545]);
domina.remove_extraneous_tbody_BANG_ = function remove_extraneous_tbody_BANG_(div, html, tag_name, start_wrap) {
  var no_tbody_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_tbody, html));
  var tbody = cljs.core._EQ_.call(null, tag_name, "table") && no_tbody_QMARK_ ? function() {
    var and__3785__auto__ = div.firstChild;
    if (cljs.core.truth_(and__3785__auto__)) {
      return div.firstChild.childNodes;
    } else {
      return and__3785__auto__;
    }
  }() : cljs.core._EQ_.call(null, start_wrap, "\x3ctable\x3e") && no_tbody_QMARK_ ? div.childNodes : cljs.core.PersistentVector.EMPTY;
  var seq__12551 = cljs.core.seq.call(null, tbody);
  var chunk__12552 = null;
  var count__12553 = 0;
  var i__12554 = 0;
  while (true) {
    if (i__12554 < count__12553) {
      var child = cljs.core._nth.call(null, chunk__12552, i__12554);
      if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
        child.parentNode.removeChild(child);
      } else {
      }
      var G__12555 = seq__12551;
      var G__12556 = chunk__12552;
      var G__12557 = count__12553;
      var G__12558 = i__12554 + 1;
      seq__12551 = G__12555;
      chunk__12552 = G__12556;
      count__12553 = G__12557;
      i__12554 = G__12558;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12551);
      if (temp__4126__auto__) {
        var seq__12551__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12551__$1)) {
          var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12551__$1);
          var G__12559 = cljs.core.chunk_rest.call(null, seq__12551__$1);
          var G__12560 = c__4584__auto__;
          var G__12561 = cljs.core.count.call(null, c__4584__auto__);
          var G__12562 = 0;
          seq__12551 = G__12559;
          chunk__12552 = G__12560;
          count__12553 = G__12561;
          i__12554 = G__12562;
          continue;
        } else {
          var child = cljs.core.first.call(null, seq__12551__$1);
          if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
            child.parentNode.removeChild(child);
          } else {
          }
          var G__12563 = cljs.core.next.call(null, seq__12551__$1);
          var G__12564 = null;
          var G__12565 = 0;
          var G__12566 = 0;
          seq__12551 = G__12563;
          chunk__12552 = G__12564;
          count__12553 = G__12565;
          i__12554 = G__12566;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
domina.restore_leading_whitespace_BANG_ = function restore_leading_whitespace_BANG_(div, html) {
  return div.insertBefore(document.createTextNode(cljs.core.first.call(null, cljs.core.re_find.call(null, domina.re_leading_whitespace, html))), div.firstChild);
};
domina.html_to_dom = function html_to_dom(html) {
  var html__$1 = clojure.string.replace.call(null, html, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html__$1)))].join("").toLowerCase();
  var vec__12568 = cljs.core.get.call(null, domina.wrap_map, tag_name, (new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(domina.wrap_map));
  var depth = cljs.core.nth.call(null, vec__12568, 0, null);
  var start_wrap = cljs.core.nth.call(null, vec__12568, 1, null);
  var end_wrap = cljs.core.nth.call(null, vec__12568, 2, null);
  var div = function() {
    var wrapper = function() {
      var div = document.createElement("div");
      div.innerHTML = [cljs.core.str(start_wrap), cljs.core.str(html__$1), cljs.core.str(end_wrap)].join("");
      return div;
    }();
    var level = depth;
    while (true) {
      if (level > 0) {
        var G__12569 = wrapper.lastChild;
        var G__12570 = level - 1;
        wrapper = G__12569;
        level = G__12570;
        continue;
      } else {
        return wrapper;
      }
      break;
    }
  }();
  if (cljs.core.truth_(domina.support.extraneous_tbody_QMARK_)) {
    domina.remove_extraneous_tbody_BANG_.call(null, div, html__$1, tag_name, start_wrap);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = cljs.core.not.call(null, domina.support.leading_whitespace_QMARK_);
    if (and__3785__auto__) {
      return cljs.core.re_find.call(null, domina.re_leading_whitespace, html__$1);
    } else {
      return and__3785__auto__;
    }
  }())) {
    domina.restore_leading_whitespace_BANG_.call(null, div, html__$1);
  } else {
  }
  return div.childNodes;
};
domina.string_to_dom = function string_to_dom(s) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, domina.re_html, s))) {
    return domina.html_to_dom.call(null, s);
  } else {
    return document.createTextNode(s);
  }
};
domina.DomContent = function() {
  var obj12572 = {};
  return obj12572;
}();
domina.nodes = function nodes(content) {
  if (function() {
    var and__3785__auto__ = content;
    if (and__3785__auto__) {
      return content.domina$DomContent$nodes$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return content.domina$DomContent$nodes$arity$1(content);
  } else {
    var x__4441__auto__ = content == null ? null : content;
    return function() {
      var or__3797__auto__ = domina.nodes[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = domina.nodes["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.nodes", content);
        }
      }
    }().call(null, content);
  }
};
domina.single_node = function single_node(nodeseq) {
  if (function() {
    var and__3785__auto__ = nodeseq;
    if (and__3785__auto__) {
      return nodeseq.domina$DomContent$single_node$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return nodeseq.domina$DomContent$single_node$arity$1(nodeseq);
  } else {
    var x__4441__auto__ = nodeseq == null ? null : nodeseq;
    return function() {
      var or__3797__auto__ = domina.single_node[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = domina.single_node["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.single-node", nodeseq);
        }
      }
    }().call(null, nodeseq);
  }
};
domina._STAR_debug_STAR_ = true;
domina.log_debug = function() {
  var log_debug__delegate = function(mesg) {
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = domina._STAR_debug_STAR_;
      if (cljs.core.truth_(and__3785__auto__)) {
        return!cljs.core._EQ_.call(null, window.console, undefined);
      } else {
        return and__3785__auto__;
      }
    }())) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log_debug = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      var G__12573__i = 0, G__12573__a = new Array(arguments.length - 0);
      while (G__12573__i < G__12573__a.length) {
        G__12573__a[G__12573__i] = arguments[G__12573__i + 0];
        ++G__12573__i;
      }
      mesg = new cljs.core.IndexedSeq(G__12573__a, 0);
    }
    return log_debug__delegate.call(this, mesg);
  };
  log_debug.cljs$lang$maxFixedArity = 0;
  log_debug.cljs$lang$applyTo = function(arglist__12574) {
    var mesg = cljs.core.seq(arglist__12574);
    return log_debug__delegate(mesg);
  };
  log_debug.cljs$core$IFn$_invoke$arity$variadic = log_debug__delegate;
  return log_debug;
}();
domina.log = function() {
  var log__delegate = function(mesg) {
    if (cljs.core.truth_(window.console)) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      var G__12575__i = 0, G__12575__a = new Array(arguments.length - 0);
      while (G__12575__i < G__12575__a.length) {
        G__12575__a[G__12575__i] = arguments[G__12575__i + 0];
        ++G__12575__i;
      }
      mesg = new cljs.core.IndexedSeq(G__12575__a, 0);
    }
    return log__delegate.call(this, mesg);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__12576) {
    var mesg = cljs.core.seq(arglist__12576);
    return log__delegate(mesg);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
domina.by_id = function by_id(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
domina.by_class = function by_class(class_name) {
  return domina.normalize_seq.call(null, goog.dom.getElementsByClass(cljs.core.name.call(null, class_name)));
};
domina.children = function children(content) {
  return cljs.core.doall.call(null, cljs.core.mapcat.call(null, goog.dom.getChildren, domina.nodes.call(null, content)));
};
domina.common_ancestor = function() {
  var common_ancestor__delegate = function(contents) {
    return cljs.core.apply.call(null, goog.dom.findCommonAncestor, cljs.core.map.call(null, domina.single_node, contents));
  };
  var common_ancestor = function(var_args) {
    var contents = null;
    if (arguments.length > 0) {
      var G__12577__i = 0, G__12577__a = new Array(arguments.length - 0);
      while (G__12577__i < G__12577__a.length) {
        G__12577__a[G__12577__i] = arguments[G__12577__i + 0];
        ++G__12577__i;
      }
      contents = new cljs.core.IndexedSeq(G__12577__a, 0);
    }
    return common_ancestor__delegate.call(this, contents);
  };
  common_ancestor.cljs$lang$maxFixedArity = 0;
  common_ancestor.cljs$lang$applyTo = function(arglist__12578) {
    var contents = cljs.core.seq(arglist__12578);
    return common_ancestor__delegate(contents);
  };
  common_ancestor.cljs$core$IFn$_invoke$arity$variadic = common_ancestor__delegate;
  return common_ancestor;
}();
domina.ancestor_QMARK_ = function ancestor_QMARK_(ancestor_content, descendant_content) {
  return cljs.core._EQ_.call(null, domina.common_ancestor.call(null, ancestor_content, descendant_content), domina.single_node.call(null, ancestor_content));
};
domina.clone = function clone(content) {
  return cljs.core.map.call(null, function(p1__12579_SHARP_) {
    return p1__12579_SHARP_.cloneNode(true);
  }, domina.nodes.call(null, content));
};
domina.append_BANG_ = function append_BANG_(parent_content, child_content) {
  domina.apply_with_cloning.call(null, goog.dom.appendChild, parent_content, child_content);
  return parent_content;
};
domina.insert_BANG_ = function insert_BANG_(parent_content, child_content, idx) {
  domina.apply_with_cloning.call(null, function(p1__12580_SHARP_, p2__12581_SHARP_) {
    return goog.dom.insertChildAt(p1__12580_SHARP_, p2__12581_SHARP_, idx);
  }, parent_content, child_content);
  return parent_content;
};
domina.prepend_BANG_ = function prepend_BANG_(parent_content, child_content) {
  domina.insert_BANG_.call(null, parent_content, child_content, 0);
  return parent_content;
};
domina.insert_before_BANG_ = function insert_before_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__12583_SHARP_, p2__12582_SHARP_) {
    return goog.dom.insertSiblingBefore(p2__12582_SHARP_, p1__12583_SHARP_);
  }, content, new_content);
  return content;
};
domina.insert_after_BANG_ = function insert_after_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__12585_SHARP_, p2__12584_SHARP_) {
    return goog.dom.insertSiblingAfter(p2__12584_SHARP_, p1__12585_SHARP_);
  }, content, new_content);
  return content;
};
domina.swap_content_BANG_ = function swap_content_BANG_(old_content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__12587_SHARP_, p2__12586_SHARP_) {
    return goog.dom.replaceNode(p2__12586_SHARP_, p1__12587_SHARP_);
  }, old_content, new_content);
  return old_content;
};
domina.detach_BANG_ = function detach_BANG_(content) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_BANG_ = function destroy_BANG_(content) {
  return cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_children_BANG_ = function destroy_children_BANG_(content) {
  cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeChildren, domina.nodes.call(null, content)));
  return content;
};
domina.style = function style(content, name) {
  var s = goog.style.getStyle(domina.single_node.call(null, content), cljs.core.name.call(null, name));
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
    return null;
  } else {
    return s;
  }
};
domina.attr = function attr(content, name) {
  return domina.single_node.call(null, content).getAttribute(cljs.core.name.call(null, name));
};
domina.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(content, name, value) {
    var seq__12592_12596 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__12593_12597 = null;
    var count__12594_12598 = 0;
    var i__12595_12599 = 0;
    while (true) {
      if (i__12595_12599 < count__12594_12598) {
        var n_12600 = cljs.core._nth.call(null, chunk__12593_12597, i__12595_12599);
        goog.style.setStyle(n_12600, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__12601 = seq__12592_12596;
        var G__12602 = chunk__12593_12597;
        var G__12603 = count__12594_12598;
        var G__12604 = i__12595_12599 + 1;
        seq__12592_12596 = G__12601;
        chunk__12593_12597 = G__12602;
        count__12594_12598 = G__12603;
        i__12595_12599 = G__12604;
        continue;
      } else {
        var temp__4126__auto___12605 = cljs.core.seq.call(null, seq__12592_12596);
        if (temp__4126__auto___12605) {
          var seq__12592_12606__$1 = temp__4126__auto___12605;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12592_12606__$1)) {
            var c__4584__auto___12607 = cljs.core.chunk_first.call(null, seq__12592_12606__$1);
            var G__12608 = cljs.core.chunk_rest.call(null, seq__12592_12606__$1);
            var G__12609 = c__4584__auto___12607;
            var G__12610 = cljs.core.count.call(null, c__4584__auto___12607);
            var G__12611 = 0;
            seq__12592_12596 = G__12608;
            chunk__12593_12597 = G__12609;
            count__12594_12598 = G__12610;
            i__12595_12599 = G__12611;
            continue;
          } else {
            var n_12612 = cljs.core.first.call(null, seq__12592_12606__$1);
            goog.style.setStyle(n_12612, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__12613 = cljs.core.next.call(null, seq__12592_12606__$1);
            var G__12614 = null;
            var G__12615 = 0;
            var G__12616 = 0;
            seq__12592_12596 = G__12613;
            chunk__12593_12597 = G__12614;
            count__12594_12598 = G__12615;
            i__12595_12599 = G__12616;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_style_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      var G__12617__i = 0, G__12617__a = new Array(arguments.length - 2);
      while (G__12617__i < G__12617__a.length) {
        G__12617__a[G__12617__i] = arguments[G__12617__i + 2];
        ++G__12617__i;
      }
      value = new cljs.core.IndexedSeq(G__12617__a, 0);
    }
    return set_style_BANG___delegate.call(this, content, name, value);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 2;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__12618) {
    var content = cljs.core.first(arglist__12618);
    arglist__12618 = cljs.core.next(arglist__12618);
    var name = cljs.core.first(arglist__12618);
    var value = cljs.core.rest(arglist__12618);
    return set_style_BANG___delegate(content, name, value);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
domina.set_attr_BANG_ = function() {
  var set_attr_BANG___delegate = function(content, name, value) {
    var seq__12623_12627 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__12624_12628 = null;
    var count__12625_12629 = 0;
    var i__12626_12630 = 0;
    while (true) {
      if (i__12626_12630 < count__12625_12629) {
        var n_12631 = cljs.core._nth.call(null, chunk__12624_12628, i__12626_12630);
        n_12631.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__12632 = seq__12623_12627;
        var G__12633 = chunk__12624_12628;
        var G__12634 = count__12625_12629;
        var G__12635 = i__12626_12630 + 1;
        seq__12623_12627 = G__12632;
        chunk__12624_12628 = G__12633;
        count__12625_12629 = G__12634;
        i__12626_12630 = G__12635;
        continue;
      } else {
        var temp__4126__auto___12636 = cljs.core.seq.call(null, seq__12623_12627);
        if (temp__4126__auto___12636) {
          var seq__12623_12637__$1 = temp__4126__auto___12636;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12623_12637__$1)) {
            var c__4584__auto___12638 = cljs.core.chunk_first.call(null, seq__12623_12637__$1);
            var G__12639 = cljs.core.chunk_rest.call(null, seq__12623_12637__$1);
            var G__12640 = c__4584__auto___12638;
            var G__12641 = cljs.core.count.call(null, c__4584__auto___12638);
            var G__12642 = 0;
            seq__12623_12627 = G__12639;
            chunk__12624_12628 = G__12640;
            count__12625_12629 = G__12641;
            i__12626_12630 = G__12642;
            continue;
          } else {
            var n_12643 = cljs.core.first.call(null, seq__12623_12637__$1);
            n_12643.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__12644 = cljs.core.next.call(null, seq__12623_12637__$1);
            var G__12645 = null;
            var G__12646 = 0;
            var G__12647 = 0;
            seq__12623_12627 = G__12644;
            chunk__12624_12628 = G__12645;
            count__12625_12629 = G__12646;
            i__12626_12630 = G__12647;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_attr_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      var G__12648__i = 0, G__12648__a = new Array(arguments.length - 2);
      while (G__12648__i < G__12648__a.length) {
        G__12648__a[G__12648__i] = arguments[G__12648__i + 2];
        ++G__12648__i;
      }
      value = new cljs.core.IndexedSeq(G__12648__a, 0);
    }
    return set_attr_BANG___delegate.call(this, content, name, value);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 2;
  set_attr_BANG_.cljs$lang$applyTo = function(arglist__12649) {
    var content = cljs.core.first(arglist__12649);
    arglist__12649 = cljs.core.next(arglist__12649);
    var name = cljs.core.first(arglist__12649);
    var value = cljs.core.rest(arglist__12649);
    return set_attr_BANG___delegate(content, name, value);
  };
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___delegate;
  return set_attr_BANG_;
}();
domina.remove_attr_BANG_ = function remove_attr_BANG_(content, name) {
  var seq__12654_12658 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__12655_12659 = null;
  var count__12656_12660 = 0;
  var i__12657_12661 = 0;
  while (true) {
    if (i__12657_12661 < count__12656_12660) {
      var n_12662 = cljs.core._nth.call(null, chunk__12655_12659, i__12657_12661);
      n_12662.removeAttribute(cljs.core.name.call(null, name));
      var G__12663 = seq__12654_12658;
      var G__12664 = chunk__12655_12659;
      var G__12665 = count__12656_12660;
      var G__12666 = i__12657_12661 + 1;
      seq__12654_12658 = G__12663;
      chunk__12655_12659 = G__12664;
      count__12656_12660 = G__12665;
      i__12657_12661 = G__12666;
      continue;
    } else {
      var temp__4126__auto___12667 = cljs.core.seq.call(null, seq__12654_12658);
      if (temp__4126__auto___12667) {
        var seq__12654_12668__$1 = temp__4126__auto___12667;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12654_12668__$1)) {
          var c__4584__auto___12669 = cljs.core.chunk_first.call(null, seq__12654_12668__$1);
          var G__12670 = cljs.core.chunk_rest.call(null, seq__12654_12668__$1);
          var G__12671 = c__4584__auto___12669;
          var G__12672 = cljs.core.count.call(null, c__4584__auto___12669);
          var G__12673 = 0;
          seq__12654_12658 = G__12670;
          chunk__12655_12659 = G__12671;
          count__12656_12660 = G__12672;
          i__12657_12661 = G__12673;
          continue;
        } else {
          var n_12674 = cljs.core.first.call(null, seq__12654_12668__$1);
          n_12674.removeAttribute(cljs.core.name.call(null, name));
          var G__12675 = cljs.core.next.call(null, seq__12654_12668__$1);
          var G__12676 = null;
          var G__12677 = 0;
          var G__12678 = 0;
          seq__12654_12658 = G__12675;
          chunk__12655_12659 = G__12676;
          count__12656_12660 = G__12677;
          i__12657_12661 = G__12678;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.parse_style_attributes = function parse_style_attributes(style) {
  return cljs.core.reduce.call(null, function(acc, pair) {
    var vec__12680 = pair.split(/\s*:\s*/);
    var k = cljs.core.nth.call(null, vec__12680, 0, null);
    var v = cljs.core.nth.call(null, vec__12680, 1, null);
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = k;
      if (cljs.core.truth_(and__3785__auto__)) {
        return v;
      } else {
        return and__3785__auto__;
      }
    }())) {
      return cljs.core.assoc.call(null, acc, cljs.core.keyword.call(null, k.toLowerCase()), v);
    } else {
      return acc;
    }
  }, cljs.core.PersistentArrayMap.EMPTY, style.split(/\s*;\s*/));
};
domina.styles = function styles(content) {
  var style = domina.attr.call(null, content, "style");
  if (typeof style === "string") {
    return domina.parse_style_attributes.call(null, style);
  } else {
    if (style == null) {
      return cljs.core.PersistentArrayMap.EMPTY;
    } else {
      if (cljs.core.truth_(style.cssText)) {
        return domina.parse_style_attributes.call(null, style.cssText);
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }
  }
};
domina.attrs = function attrs(content) {
  var node = domina.single_node.call(null, content);
  var attrs__$1 = node.attributes;
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, function(node, attrs__$1) {
    return function(p1__12681_SHARP_) {
      var attr = attrs__$1.item(p1__12681_SHARP_);
      var value = attr.nodeValue;
      if (cljs.core.not_EQ_.call(null, null, value) && cljs.core.not_EQ_.call(null, "", value)) {
        return new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, attr.nodeName.toLowerCase()), attr.nodeValue], true, false);
      } else {
        return null;
      }
    };
  }(node, attrs__$1), cljs.core.range.call(null, attrs__$1.length))));
};
domina.set_styles_BANG_ = function set_styles_BANG_(content, styles) {
  var seq__12688_12694 = cljs.core.seq.call(null, styles);
  var chunk__12689_12695 = null;
  var count__12690_12696 = 0;
  var i__12691_12697 = 0;
  while (true) {
    if (i__12691_12697 < count__12690_12696) {
      var vec__12692_12698 = cljs.core._nth.call(null, chunk__12689_12695, i__12691_12697);
      var name_12699 = cljs.core.nth.call(null, vec__12692_12698, 0, null);
      var value_12700 = cljs.core.nth.call(null, vec__12692_12698, 1, null);
      domina.set_style_BANG_.call(null, content, name_12699, value_12700);
      var G__12701 = seq__12688_12694;
      var G__12702 = chunk__12689_12695;
      var G__12703 = count__12690_12696;
      var G__12704 = i__12691_12697 + 1;
      seq__12688_12694 = G__12701;
      chunk__12689_12695 = G__12702;
      count__12690_12696 = G__12703;
      i__12691_12697 = G__12704;
      continue;
    } else {
      var temp__4126__auto___12705 = cljs.core.seq.call(null, seq__12688_12694);
      if (temp__4126__auto___12705) {
        var seq__12688_12706__$1 = temp__4126__auto___12705;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12688_12706__$1)) {
          var c__4584__auto___12707 = cljs.core.chunk_first.call(null, seq__12688_12706__$1);
          var G__12708 = cljs.core.chunk_rest.call(null, seq__12688_12706__$1);
          var G__12709 = c__4584__auto___12707;
          var G__12710 = cljs.core.count.call(null, c__4584__auto___12707);
          var G__12711 = 0;
          seq__12688_12694 = G__12708;
          chunk__12689_12695 = G__12709;
          count__12690_12696 = G__12710;
          i__12691_12697 = G__12711;
          continue;
        } else {
          var vec__12693_12712 = cljs.core.first.call(null, seq__12688_12706__$1);
          var name_12713 = cljs.core.nth.call(null, vec__12693_12712, 0, null);
          var value_12714 = cljs.core.nth.call(null, vec__12693_12712, 1, null);
          domina.set_style_BANG_.call(null, content, name_12713, value_12714);
          var G__12715 = cljs.core.next.call(null, seq__12688_12706__$1);
          var G__12716 = null;
          var G__12717 = 0;
          var G__12718 = 0;
          seq__12688_12694 = G__12715;
          chunk__12689_12695 = G__12716;
          count__12690_12696 = G__12717;
          i__12691_12697 = G__12718;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attrs_BANG_ = function set_attrs_BANG_(content, attrs) {
  var seq__12725_12731 = cljs.core.seq.call(null, attrs);
  var chunk__12726_12732 = null;
  var count__12727_12733 = 0;
  var i__12728_12734 = 0;
  while (true) {
    if (i__12728_12734 < count__12727_12733) {
      var vec__12729_12735 = cljs.core._nth.call(null, chunk__12726_12732, i__12728_12734);
      var name_12736 = cljs.core.nth.call(null, vec__12729_12735, 0, null);
      var value_12737 = cljs.core.nth.call(null, vec__12729_12735, 1, null);
      domina.set_attr_BANG_.call(null, content, name_12736, value_12737);
      var G__12738 = seq__12725_12731;
      var G__12739 = chunk__12726_12732;
      var G__12740 = count__12727_12733;
      var G__12741 = i__12728_12734 + 1;
      seq__12725_12731 = G__12738;
      chunk__12726_12732 = G__12739;
      count__12727_12733 = G__12740;
      i__12728_12734 = G__12741;
      continue;
    } else {
      var temp__4126__auto___12742 = cljs.core.seq.call(null, seq__12725_12731);
      if (temp__4126__auto___12742) {
        var seq__12725_12743__$1 = temp__4126__auto___12742;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12725_12743__$1)) {
          var c__4584__auto___12744 = cljs.core.chunk_first.call(null, seq__12725_12743__$1);
          var G__12745 = cljs.core.chunk_rest.call(null, seq__12725_12743__$1);
          var G__12746 = c__4584__auto___12744;
          var G__12747 = cljs.core.count.call(null, c__4584__auto___12744);
          var G__12748 = 0;
          seq__12725_12731 = G__12745;
          chunk__12726_12732 = G__12746;
          count__12727_12733 = G__12747;
          i__12728_12734 = G__12748;
          continue;
        } else {
          var vec__12730_12749 = cljs.core.first.call(null, seq__12725_12743__$1);
          var name_12750 = cljs.core.nth.call(null, vec__12730_12749, 0, null);
          var value_12751 = cljs.core.nth.call(null, vec__12730_12749, 1, null);
          domina.set_attr_BANG_.call(null, content, name_12750, value_12751);
          var G__12752 = cljs.core.next.call(null, seq__12725_12743__$1);
          var G__12753 = null;
          var G__12754 = 0;
          var G__12755 = 0;
          seq__12725_12731 = G__12752;
          chunk__12726_12732 = G__12753;
          count__12727_12733 = G__12754;
          i__12728_12734 = G__12755;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.has_class_QMARK_ = function has_class_QMARK_(content, class$) {
  return goog.dom.classes.has(domina.single_node.call(null, content), class$);
};
domina.add_class_BANG_ = function add_class_BANG_(content, class$) {
  var seq__12760_12764 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__12761_12765 = null;
  var count__12762_12766 = 0;
  var i__12763_12767 = 0;
  while (true) {
    if (i__12763_12767 < count__12762_12766) {
      var node_12768 = cljs.core._nth.call(null, chunk__12761_12765, i__12763_12767);
      goog.dom.classes.add(node_12768, class$);
      var G__12769 = seq__12760_12764;
      var G__12770 = chunk__12761_12765;
      var G__12771 = count__12762_12766;
      var G__12772 = i__12763_12767 + 1;
      seq__12760_12764 = G__12769;
      chunk__12761_12765 = G__12770;
      count__12762_12766 = G__12771;
      i__12763_12767 = G__12772;
      continue;
    } else {
      var temp__4126__auto___12773 = cljs.core.seq.call(null, seq__12760_12764);
      if (temp__4126__auto___12773) {
        var seq__12760_12774__$1 = temp__4126__auto___12773;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12760_12774__$1)) {
          var c__4584__auto___12775 = cljs.core.chunk_first.call(null, seq__12760_12774__$1);
          var G__12776 = cljs.core.chunk_rest.call(null, seq__12760_12774__$1);
          var G__12777 = c__4584__auto___12775;
          var G__12778 = cljs.core.count.call(null, c__4584__auto___12775);
          var G__12779 = 0;
          seq__12760_12764 = G__12776;
          chunk__12761_12765 = G__12777;
          count__12762_12766 = G__12778;
          i__12763_12767 = G__12779;
          continue;
        } else {
          var node_12780 = cljs.core.first.call(null, seq__12760_12774__$1);
          goog.dom.classes.add(node_12780, class$);
          var G__12781 = cljs.core.next.call(null, seq__12760_12774__$1);
          var G__12782 = null;
          var G__12783 = 0;
          var G__12784 = 0;
          seq__12760_12764 = G__12781;
          chunk__12761_12765 = G__12782;
          count__12762_12766 = G__12783;
          i__12763_12767 = G__12784;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.remove_class_BANG_ = function remove_class_BANG_(content, class$) {
  var seq__12789_12793 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__12790_12794 = null;
  var count__12791_12795 = 0;
  var i__12792_12796 = 0;
  while (true) {
    if (i__12792_12796 < count__12791_12795) {
      var node_12797 = cljs.core._nth.call(null, chunk__12790_12794, i__12792_12796);
      goog.dom.classes.remove(node_12797, class$);
      var G__12798 = seq__12789_12793;
      var G__12799 = chunk__12790_12794;
      var G__12800 = count__12791_12795;
      var G__12801 = i__12792_12796 + 1;
      seq__12789_12793 = G__12798;
      chunk__12790_12794 = G__12799;
      count__12791_12795 = G__12800;
      i__12792_12796 = G__12801;
      continue;
    } else {
      var temp__4126__auto___12802 = cljs.core.seq.call(null, seq__12789_12793);
      if (temp__4126__auto___12802) {
        var seq__12789_12803__$1 = temp__4126__auto___12802;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12789_12803__$1)) {
          var c__4584__auto___12804 = cljs.core.chunk_first.call(null, seq__12789_12803__$1);
          var G__12805 = cljs.core.chunk_rest.call(null, seq__12789_12803__$1);
          var G__12806 = c__4584__auto___12804;
          var G__12807 = cljs.core.count.call(null, c__4584__auto___12804);
          var G__12808 = 0;
          seq__12789_12793 = G__12805;
          chunk__12790_12794 = G__12806;
          count__12791_12795 = G__12807;
          i__12792_12796 = G__12808;
          continue;
        } else {
          var node_12809 = cljs.core.first.call(null, seq__12789_12803__$1);
          goog.dom.classes.remove(node_12809, class$);
          var G__12810 = cljs.core.next.call(null, seq__12789_12803__$1);
          var G__12811 = null;
          var G__12812 = 0;
          var G__12813 = 0;
          seq__12789_12793 = G__12810;
          chunk__12790_12794 = G__12811;
          count__12791_12795 = G__12812;
          i__12792_12796 = G__12813;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.toggle_class_BANG_ = function toggle_class_BANG_(content, class$) {
  var seq__12818_12822 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__12819_12823 = null;
  var count__12820_12824 = 0;
  var i__12821_12825 = 0;
  while (true) {
    if (i__12821_12825 < count__12820_12824) {
      var node_12826 = cljs.core._nth.call(null, chunk__12819_12823, i__12821_12825);
      goog.dom.classes.toggle(node_12826, class$);
      var G__12827 = seq__12818_12822;
      var G__12828 = chunk__12819_12823;
      var G__12829 = count__12820_12824;
      var G__12830 = i__12821_12825 + 1;
      seq__12818_12822 = G__12827;
      chunk__12819_12823 = G__12828;
      count__12820_12824 = G__12829;
      i__12821_12825 = G__12830;
      continue;
    } else {
      var temp__4126__auto___12831 = cljs.core.seq.call(null, seq__12818_12822);
      if (temp__4126__auto___12831) {
        var seq__12818_12832__$1 = temp__4126__auto___12831;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12818_12832__$1)) {
          var c__4584__auto___12833 = cljs.core.chunk_first.call(null, seq__12818_12832__$1);
          var G__12834 = cljs.core.chunk_rest.call(null, seq__12818_12832__$1);
          var G__12835 = c__4584__auto___12833;
          var G__12836 = cljs.core.count.call(null, c__4584__auto___12833);
          var G__12837 = 0;
          seq__12818_12822 = G__12834;
          chunk__12819_12823 = G__12835;
          count__12820_12824 = G__12836;
          i__12821_12825 = G__12837;
          continue;
        } else {
          var node_12838 = cljs.core.first.call(null, seq__12818_12832__$1);
          goog.dom.classes.toggle(node_12838, class$);
          var G__12839 = cljs.core.next.call(null, seq__12818_12832__$1);
          var G__12840 = null;
          var G__12841 = 0;
          var G__12842 = 0;
          seq__12818_12822 = G__12839;
          chunk__12819_12823 = G__12840;
          count__12820_12824 = G__12841;
          i__12821_12825 = G__12842;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.classes = function classes(content) {
  return cljs.core.seq.call(null, goog.dom.classes.get(domina.single_node.call(null, content)));
};
domina.set_classes_BANG_ = function set_classes_BANG_(content, classes) {
  var classes_12851__$1 = cljs.core.coll_QMARK_.call(null, classes) ? clojure.string.join.call(null, " ", classes) : classes;
  var seq__12847_12852 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__12848_12853 = null;
  var count__12849_12854 = 0;
  var i__12850_12855 = 0;
  while (true) {
    if (i__12850_12855 < count__12849_12854) {
      var node_12856 = cljs.core._nth.call(null, chunk__12848_12853, i__12850_12855);
      goog.dom.classes.set(node_12856, classes_12851__$1);
      var G__12857 = seq__12847_12852;
      var G__12858 = chunk__12848_12853;
      var G__12859 = count__12849_12854;
      var G__12860 = i__12850_12855 + 1;
      seq__12847_12852 = G__12857;
      chunk__12848_12853 = G__12858;
      count__12849_12854 = G__12859;
      i__12850_12855 = G__12860;
      continue;
    } else {
      var temp__4126__auto___12861 = cljs.core.seq.call(null, seq__12847_12852);
      if (temp__4126__auto___12861) {
        var seq__12847_12862__$1 = temp__4126__auto___12861;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12847_12862__$1)) {
          var c__4584__auto___12863 = cljs.core.chunk_first.call(null, seq__12847_12862__$1);
          var G__12864 = cljs.core.chunk_rest.call(null, seq__12847_12862__$1);
          var G__12865 = c__4584__auto___12863;
          var G__12866 = cljs.core.count.call(null, c__4584__auto___12863);
          var G__12867 = 0;
          seq__12847_12852 = G__12864;
          chunk__12848_12853 = G__12865;
          count__12849_12854 = G__12866;
          i__12850_12855 = G__12867;
          continue;
        } else {
          var node_12868 = cljs.core.first.call(null, seq__12847_12862__$1);
          goog.dom.classes.set(node_12868, classes_12851__$1);
          var G__12869 = cljs.core.next.call(null, seq__12847_12862__$1);
          var G__12870 = null;
          var G__12871 = 0;
          var G__12872 = 0;
          seq__12847_12852 = G__12869;
          chunk__12848_12853 = G__12870;
          count__12849_12854 = G__12871;
          i__12850_12855 = G__12872;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.text = function text(content) {
  return goog.string.trim(goog.dom.getTextContent(domina.single_node.call(null, content)));
};
domina.set_text_BANG_ = function set_text_BANG_(content, value) {
  var seq__12877_12881 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__12878_12882 = null;
  var count__12879_12883 = 0;
  var i__12880_12884 = 0;
  while (true) {
    if (i__12880_12884 < count__12879_12883) {
      var node_12885 = cljs.core._nth.call(null, chunk__12878_12882, i__12880_12884);
      goog.dom.setTextContent(node_12885, value);
      var G__12886 = seq__12877_12881;
      var G__12887 = chunk__12878_12882;
      var G__12888 = count__12879_12883;
      var G__12889 = i__12880_12884 + 1;
      seq__12877_12881 = G__12886;
      chunk__12878_12882 = G__12887;
      count__12879_12883 = G__12888;
      i__12880_12884 = G__12889;
      continue;
    } else {
      var temp__4126__auto___12890 = cljs.core.seq.call(null, seq__12877_12881);
      if (temp__4126__auto___12890) {
        var seq__12877_12891__$1 = temp__4126__auto___12890;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12877_12891__$1)) {
          var c__4584__auto___12892 = cljs.core.chunk_first.call(null, seq__12877_12891__$1);
          var G__12893 = cljs.core.chunk_rest.call(null, seq__12877_12891__$1);
          var G__12894 = c__4584__auto___12892;
          var G__12895 = cljs.core.count.call(null, c__4584__auto___12892);
          var G__12896 = 0;
          seq__12877_12881 = G__12893;
          chunk__12878_12882 = G__12894;
          count__12879_12883 = G__12895;
          i__12880_12884 = G__12896;
          continue;
        } else {
          var node_12897 = cljs.core.first.call(null, seq__12877_12891__$1);
          goog.dom.setTextContent(node_12897, value);
          var G__12898 = cljs.core.next.call(null, seq__12877_12891__$1);
          var G__12899 = null;
          var G__12900 = 0;
          var G__12901 = 0;
          seq__12877_12881 = G__12898;
          chunk__12878_12882 = G__12899;
          count__12879_12883 = G__12900;
          i__12880_12884 = G__12901;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.value = function value(content) {
  return goog.dom.forms.getValue(domina.single_node.call(null, content));
};
domina.set_value_BANG_ = function set_value_BANG_(content, value) {
  var seq__12906_12910 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__12907_12911 = null;
  var count__12908_12912 = 0;
  var i__12909_12913 = 0;
  while (true) {
    if (i__12909_12913 < count__12908_12912) {
      var node_12914 = cljs.core._nth.call(null, chunk__12907_12911, i__12909_12913);
      goog.dom.forms.setValue(node_12914, value);
      var G__12915 = seq__12906_12910;
      var G__12916 = chunk__12907_12911;
      var G__12917 = count__12908_12912;
      var G__12918 = i__12909_12913 + 1;
      seq__12906_12910 = G__12915;
      chunk__12907_12911 = G__12916;
      count__12908_12912 = G__12917;
      i__12909_12913 = G__12918;
      continue;
    } else {
      var temp__4126__auto___12919 = cljs.core.seq.call(null, seq__12906_12910);
      if (temp__4126__auto___12919) {
        var seq__12906_12920__$1 = temp__4126__auto___12919;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12906_12920__$1)) {
          var c__4584__auto___12921 = cljs.core.chunk_first.call(null, seq__12906_12920__$1);
          var G__12922 = cljs.core.chunk_rest.call(null, seq__12906_12920__$1);
          var G__12923 = c__4584__auto___12921;
          var G__12924 = cljs.core.count.call(null, c__4584__auto___12921);
          var G__12925 = 0;
          seq__12906_12910 = G__12922;
          chunk__12907_12911 = G__12923;
          count__12908_12912 = G__12924;
          i__12909_12913 = G__12925;
          continue;
        } else {
          var node_12926 = cljs.core.first.call(null, seq__12906_12920__$1);
          goog.dom.forms.setValue(node_12926, value);
          var G__12927 = cljs.core.next.call(null, seq__12906_12920__$1);
          var G__12928 = null;
          var G__12929 = 0;
          var G__12930 = 0;
          seq__12906_12910 = G__12927;
          chunk__12907_12911 = G__12928;
          count__12908_12912 = G__12929;
          i__12909_12913 = G__12930;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.html = function html(content) {
  return domina.single_node.call(null, content).innerHTML;
};
domina.replace_children_BANG_ = function replace_children_BANG_(content, inner_content) {
  return domina.append_BANG_.call(null, domina.destroy_children_BANG_.call(null, content), inner_content);
};
domina.set_inner_html_BANG_ = function set_inner_html_BANG_(content, html_string) {
  var allows_inner_html_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_no_inner_html, html_string));
  var leading_whitespace_QMARK_ = cljs.core.re_find.call(null, domina.re_leading_whitespace, html_string);
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html_string)))].join("").toLowerCase();
  var special_tag_QMARK_ = cljs.core.contains_QMARK_.call(null, domina.wrap_map, tag_name);
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = allows_inner_html_QMARK_;
    if (and__3785__auto__) {
      var and__3785__auto____$1 = function() {
        var or__3797__auto__ = domina.support.leading_whitespace_QMARK_;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return cljs.core.not.call(null, leading_whitespace_QMARK_);
        }
      }();
      if (cljs.core.truth_(and__3785__auto____$1)) {
        return!special_tag_QMARK_;
      } else {
        return and__3785__auto____$1;
      }
    } else {
      return and__3785__auto__;
    }
  }())) {
    var value_12941 = clojure.string.replace.call(null, html_string, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
    try {
      var seq__12937_12942 = cljs.core.seq.call(null, domina.nodes.call(null, content));
      var chunk__12938_12943 = null;
      var count__12939_12944 = 0;
      var i__12940_12945 = 0;
      while (true) {
        if (i__12940_12945 < count__12939_12944) {
          var node_12946 = cljs.core._nth.call(null, chunk__12938_12943, i__12940_12945);
          node_12946.innerHTML = value_12941;
          var G__12947 = seq__12937_12942;
          var G__12948 = chunk__12938_12943;
          var G__12949 = count__12939_12944;
          var G__12950 = i__12940_12945 + 1;
          seq__12937_12942 = G__12947;
          chunk__12938_12943 = G__12948;
          count__12939_12944 = G__12949;
          i__12940_12945 = G__12950;
          continue;
        } else {
          var temp__4126__auto___12951 = cljs.core.seq.call(null, seq__12937_12942);
          if (temp__4126__auto___12951) {
            var seq__12937_12952__$1 = temp__4126__auto___12951;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12937_12952__$1)) {
              var c__4584__auto___12953 = cljs.core.chunk_first.call(null, seq__12937_12952__$1);
              var G__12954 = cljs.core.chunk_rest.call(null, seq__12937_12952__$1);
              var G__12955 = c__4584__auto___12953;
              var G__12956 = cljs.core.count.call(null, c__4584__auto___12953);
              var G__12957 = 0;
              seq__12937_12942 = G__12954;
              chunk__12938_12943 = G__12955;
              count__12939_12944 = G__12956;
              i__12940_12945 = G__12957;
              continue;
            } else {
              var node_12958 = cljs.core.first.call(null, seq__12937_12952__$1);
              node_12958.innerHTML = value_12941;
              var G__12959 = cljs.core.next.call(null, seq__12937_12952__$1);
              var G__12960 = null;
              var G__12961 = 0;
              var G__12962 = 0;
              seq__12937_12942 = G__12959;
              chunk__12938_12943 = G__12960;
              count__12939_12944 = G__12961;
              i__12940_12945 = G__12962;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } catch (e12936) {
      if (e12936 instanceof Error) {
        var e_12963 = e12936;
        domina.replace_children_BANG_.call(null, content, value_12941);
      } else {
        throw e12936;
      }
    }
  } else {
    domina.replace_children_BANG_.call(null, content, html_string);
  }
  return content;
};
domina.set_html_BANG_ = function set_html_BANG_(content, inner_content) {
  if (typeof inner_content === "string") {
    return domina.set_inner_html_BANG_.call(null, content, inner_content);
  } else {
    return domina.replace_children_BANG_.call(null, content, inner_content);
  }
};
domina.get_data = function() {
  var get_data = null;
  var get_data__2 = function(node, key) {
    return get_data.call(null, node, key, false);
  };
  var get_data__3 = function(node, key, bubble) {
    var m = domina.single_node.call(null, node).__domina_data;
    var value = cljs.core.truth_(m) ? cljs.core.get.call(null, m, key) : null;
    if (cljs.core.truth_(function() {
      var and__3785__auto__ = bubble;
      if (cljs.core.truth_(and__3785__auto__)) {
        return value == null;
      } else {
        return and__3785__auto__;
      }
    }())) {
      var temp__4126__auto__ = domina.single_node.call(null, node).parentNode;
      if (cljs.core.truth_(temp__4126__auto__)) {
        var parent = temp__4126__auto__;
        return get_data.call(null, parent, key, true);
      } else {
        return null;
      }
    } else {
      return value;
    }
  };
  get_data = function(node, key, bubble) {
    switch(arguments.length) {
      case 2:
        return get_data__2.call(this, node, key);
      case 3:
        return get_data__3.call(this, node, key, bubble);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_data.cljs$core$IFn$_invoke$arity$2 = get_data__2;
  get_data.cljs$core$IFn$_invoke$arity$3 = get_data__3;
  return get_data;
}();
domina.set_data_BANG_ = function set_data_BANG_(node, key, value) {
  var m = function() {
    var or__3797__auto__ = domina.single_node.call(null, node).__domina_data;
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return domina.single_node.call(null, node).__domina_data = cljs.core.assoc.call(null, m, key, value);
};
domina.apply_with_cloning = function apply_with_cloning(f, parent_content, child_content) {
  var parents = domina.nodes.call(null, parent_content);
  var children = domina.nodes.call(null, child_content);
  var first_child = function() {
    var frag = document.createDocumentFragment();
    var seq__12970_12974 = cljs.core.seq.call(null, children);
    var chunk__12971_12975 = null;
    var count__12972_12976 = 0;
    var i__12973_12977 = 0;
    while (true) {
      if (i__12973_12977 < count__12972_12976) {
        var child_12978 = cljs.core._nth.call(null, chunk__12971_12975, i__12973_12977);
        frag.appendChild(child_12978);
        var G__12979 = seq__12970_12974;
        var G__12980 = chunk__12971_12975;
        var G__12981 = count__12972_12976;
        var G__12982 = i__12973_12977 + 1;
        seq__12970_12974 = G__12979;
        chunk__12971_12975 = G__12980;
        count__12972_12976 = G__12981;
        i__12973_12977 = G__12982;
        continue;
      } else {
        var temp__4126__auto___12983 = cljs.core.seq.call(null, seq__12970_12974);
        if (temp__4126__auto___12983) {
          var seq__12970_12984__$1 = temp__4126__auto___12983;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12970_12984__$1)) {
            var c__4584__auto___12985 = cljs.core.chunk_first.call(null, seq__12970_12984__$1);
            var G__12986 = cljs.core.chunk_rest.call(null, seq__12970_12984__$1);
            var G__12987 = c__4584__auto___12985;
            var G__12988 = cljs.core.count.call(null, c__4584__auto___12985);
            var G__12989 = 0;
            seq__12970_12974 = G__12986;
            chunk__12971_12975 = G__12987;
            count__12972_12976 = G__12988;
            i__12973_12977 = G__12989;
            continue;
          } else {
            var child_12990 = cljs.core.first.call(null, seq__12970_12984__$1);
            frag.appendChild(child_12990);
            var G__12991 = cljs.core.next.call(null, seq__12970_12984__$1);
            var G__12992 = null;
            var G__12993 = 0;
            var G__12994 = 0;
            seq__12970_12974 = G__12991;
            chunk__12971_12975 = G__12992;
            count__12972_12976 = G__12993;
            i__12973_12977 = G__12994;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return frag;
  }();
  var other_children = cljs.core.doall.call(null, cljs.core.repeatedly.call(null, cljs.core.count.call(null, parents) - 1, function(parents, children, first_child) {
    return function() {
      return first_child.cloneNode(true);
    };
  }(parents, children, first_child)));
  if (cljs.core.seq.call(null, parents)) {
    f.call(null, cljs.core.first.call(null, parents), first_child);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(parents, children, first_child, other_children) {
      return function(p1__12964_SHARP_, p2__12965_SHARP_) {
        return f.call(null, p1__12964_SHARP_, p2__12965_SHARP_);
      };
    }(parents, children, first_child, other_children), cljs.core.rest.call(null, parents), other_children));
  } else {
    return null;
  }
};
domina.lazy_nl_via_item = function() {
  var lazy_nl_via_item = null;
  var lazy_nl_via_item__1 = function(nl) {
    return lazy_nl_via_item.call(null, nl, 0);
  };
  var lazy_nl_via_item__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl.item(n), lazy_nl_via_item.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_item = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_item__1.call(this, nl);
      case 2:
        return lazy_nl_via_item__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_item__1;
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_item__2;
  return lazy_nl_via_item;
}();
domina.lazy_nl_via_array_ref = function() {
  var lazy_nl_via_array_ref = null;
  var lazy_nl_via_array_ref__1 = function(nl) {
    return lazy_nl_via_array_ref.call(null, nl, 0);
  };
  var lazy_nl_via_array_ref__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl[n], lazy_nl_via_array_ref.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_array_ref = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_array_ref__1.call(this, nl);
      case 2:
        return lazy_nl_via_array_ref__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_array_ref__1;
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_array_ref__2;
  return lazy_nl_via_array_ref;
}();
domina.lazy_nodelist = function lazy_nodelist(nl) {
  if (cljs.core.truth_(nl.item)) {
    return domina.lazy_nl_via_item.call(null, nl);
  } else {
    return domina.lazy_nl_via_array_ref.call(null, nl);
  }
};
domina.array_like_QMARK_ = function array_like_QMARK_(obj) {
  var and__3785__auto__ = obj;
  if (cljs.core.truth_(and__3785__auto__)) {
    var and__3785__auto____$1 = cljs.core.not.call(null, obj.nodeName);
    if (and__3785__auto____$1) {
      return obj.length;
    } else {
      return and__3785__auto____$1;
    }
  } else {
    return and__3785__auto__;
  }
};
domina.normalize_seq = function normalize_seq(list_thing) {
  if (list_thing == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__12996 = list_thing;
      if (G__12996) {
        var bit__4478__auto__ = G__12996.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4478__auto__ || G__12996.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__12996.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__12996);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__12996);
      }
    }()) {
      return cljs.core.seq.call(null, list_thing);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, list_thing))) {
        return domina.lazy_nodelist.call(null, list_thing);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [list_thing], null));
      }
    }
  }
};
domina.DomContent["_"] = true;
domina.nodes["_"] = function(content) {
  if (content == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__12997 = content;
      if (G__12997) {
        var bit__4478__auto__ = G__12997.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4478__auto__ || G__12997.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__12997.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__12997);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__12997);
      }
    }()) {
      return cljs.core.seq.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return domina.lazy_nodelist.call(null, content);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content], null));
      }
    }
  }
};
domina.single_node["_"] = function(content) {
  if (content == null) {
    return null;
  } else {
    if (function() {
      var G__12998 = content;
      if (G__12998) {
        var bit__4478__auto__ = G__12998.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4478__auto__ || G__12998.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__12998.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__12998);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__12998);
      }
    }()) {
      return cljs.core.first.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return content.item(0);
      } else {
        return content;
      }
    }
  }
};
domina.DomContent["string"] = true;
domina.nodes["string"] = function(s) {
  return cljs.core.doall.call(null, domina.nodes.call(null, domina.string_to_dom.call(null, s)));
};
domina.single_node["string"] = function(s) {
  return domina.single_node.call(null, domina.string_to_dom.call(null, s));
};
if (cljs.core.truth_(typeof NodeList != "undefined")) {
  NodeList.prototype.cljs$core$ISeqable$ = true;
  NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  NodeList.prototype.cljs$core$IIndexed$ = true;
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  NodeList.prototype.cljs$core$ICounted$ = true;
  NodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof StaticNodeList != "undefined")) {
  StaticNodeList.prototype.cljs$core$ISeqable$ = true;
  StaticNodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$ = true;
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  StaticNodeList.prototype.cljs$core$ICounted$ = true;
  StaticNodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof HTMLCollection != "undefined")) {
  HTMLCollection.prototype.cljs$core$ISeqable$ = true;
  HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
    var coll__$1 = this;
    return domina.lazy_nodelist.call(null, coll__$1);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$ = true;
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
    var coll__$1 = this;
    return coll__$1.item(n);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
    var coll__$1 = this;
    if (coll__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, coll__$1, n);
    }
  };
  HTMLCollection.prototype.cljs$core$ICounted$ = true;
  HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
    var coll__$1 = this;
    return coll__$1.length;
  };
} else {
}
;goog.provide("domina.css");
goog.require("cljs.core");
goog.require("goog.dom.query");
goog.require("goog.dom");
goog.require("domina");
domina.css.root_element = function root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.css.sel = function() {
  var sel = null;
  var sel__1 = function(expr) {
    return sel.call(null, domina.css.root_element.call(null), expr);
  };
  var sel__2 = function(base, expr) {
    if (typeof domina.css.t13010 !== "undefined") {
    } else {
      domina.css.t13010 = function(expr, base, sel, meta13011) {
        this.expr = expr;
        this.base = base;
        this.sel = sel;
        this.meta13011 = meta13011;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      domina.css.t13010.prototype.domina$DomContent$ = true;
      domina.css.t13010.prototype.domina$DomContent$nodes$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.mapcat.call(null, function(___$1) {
          return function(p1__13005_SHARP_) {
            return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__13005_SHARP_));
          };
        }(___$1), domina.nodes.call(null, self__.base));
      };
      domina.css.t13010.prototype.domina$DomContent$single_node$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.mapcat.call(null, function(___$1) {
          return function(p1__13006_SHARP_) {
            return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__13006_SHARP_));
          };
        }(___$1), domina.nodes.call(null, self__.base))));
      };
      domina.css.t13010.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13012) {
        var self__ = this;
        var _13012__$1 = this;
        return self__.meta13011;
      };
      domina.css.t13010.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13012, meta13011__$1) {
        var self__ = this;
        var _13012__$1 = this;
        return new domina.css.t13010(self__.expr, self__.base, self__.sel, meta13011__$1);
      };
      domina.css.t13010.cljs$lang$type = true;
      domina.css.t13010.cljs$lang$ctorStr = "domina.css/t13010";
      domina.css.t13010.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
        return cljs.core._write.call(null, writer__4385__auto__, "domina.css/t13010");
      };
      domina.css.__GT_t13010 = function __GT_t13010(expr__$1, base__$1, sel__$1, meta13011) {
        return new domina.css.t13010(expr__$1, base__$1, sel__$1, meta13011);
      };
    }
    return new domina.css.t13010(expr, base, sel, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 75, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 20, new cljs.core.Keyword(null, "column", "column", 2078222095), 16, new cljs.core.Keyword(null, "line", "line", 212345235), 14, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/domina/css.cljs"], 
    null));
  };
  sel = function(base, expr) {
    switch(arguments.length) {
      case 1:
        return sel__1.call(this, base);
      case 2:
        return sel__2.call(this, base, expr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sel.cljs$core$IFn$_invoke$arity$1 = sel__1;
  sel.cljs$core$IFn$_invoke$arity$2 = sel__2;
  return sel;
}();
goog.provide("goog.dom.ViewportSizeMonitor");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.math.Size");
goog.dom.ViewportSizeMonitor = function(opt_window) {
  goog.events.EventTarget.call(this);
  this.window_ = opt_window || window;
  this.listenerKey_ = goog.events.listen(this.window_, goog.events.EventType.RESIZE, this.handleResize_, false, this);
  this.size_ = goog.dom.getViewportSize(this.window_);
};
goog.inherits(goog.dom.ViewportSizeMonitor, goog.events.EventTarget);
goog.dom.ViewportSizeMonitor.getInstanceForWindow = function(opt_window) {
  var currentWindow = opt_window || window;
  var uid = goog.getUid(currentWindow);
  return goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid] = goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid] || new goog.dom.ViewportSizeMonitor(currentWindow);
};
goog.dom.ViewportSizeMonitor.removeInstanceForWindow = function(opt_window) {
  var uid = goog.getUid(opt_window || window);
  goog.dispose(goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid]);
  delete goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid];
};
goog.dom.ViewportSizeMonitor.windowInstanceMap_ = {};
goog.dom.ViewportSizeMonitor.prototype.listenerKey_ = null;
goog.dom.ViewportSizeMonitor.prototype.window_ = null;
goog.dom.ViewportSizeMonitor.prototype.size_ = null;
goog.dom.ViewportSizeMonitor.prototype.getSize = function() {
  return this.size_ ? this.size_.clone() : null;
};
goog.dom.ViewportSizeMonitor.prototype.disposeInternal = function() {
  goog.dom.ViewportSizeMonitor.superClass_.disposeInternal.call(this);
  if (this.listenerKey_) {
    goog.events.unlistenByKey(this.listenerKey_);
    this.listenerKey_ = null;
  }
  this.window_ = null;
  this.size_ = null;
};
goog.dom.ViewportSizeMonitor.prototype.handleResize_ = function(event) {
  var size = goog.dom.getViewportSize(this.window_);
  if (!goog.math.Size.equals(size, this.size_)) {
    this.size_ = size;
    this.dispatchEvent(goog.events.EventType.RESIZE);
  }
};
goog.provide("domina.xpath");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("domina");
domina.xpath.select_node_STAR_ = function select_node_STAR_(path, node, technique_1, technique_2) {
  var doc = goog.dom.getOwnerDocument(node);
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = node.selectSingleNode;
    if (cljs.core.truth_(and__3785__auto__)) {
      return doc.setProperty;
    } else {
      return and__3785__auto__;
    }
  }())) {
    doc.setProperty("SelectionLanguage", "XPath");
    return technique_1.call(null, node, path);
  } else {
    if (cljs.core.truth_(doc.evaluate)) {
      return technique_2.call(null, null, doc, node, path);
    } else {
      throw new Error("Could not find XPath support in this browser.");
    }
  }
};
domina.xpath.select_node = function select_node(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectSingleNode(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    return result.singleNodeValue;
  });
};
domina.xpath.select_nodes = function select_nodes(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectNodes(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    var num_results = result.snapshotLength;
    var i = 0;
    var acc = null;
    while (true) {
      if (i < num_results) {
        var G__12534 = i + 1;
        var G__12535 = cljs.core.cons.call(null, result.snapshotItem(i), acc);
        i = G__12534;
        acc = G__12535;
        continue;
      } else {
        return acc;
      }
      break;
    }
  });
};
domina.xpath.root_element = function root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.xpath.xpath = function() {
  var xpath = null;
  var xpath__1 = function(expr) {
    return xpath.call(null, domina.xpath.root_element.call(null), expr);
  };
  var xpath__2 = function(base, expr) {
    if (typeof domina.xpath.t12539 !== "undefined") {
    } else {
      domina.xpath.t12539 = function(expr, base, xpath, meta12540) {
        this.expr = expr;
        this.base = base;
        this.xpath = xpath;
        this.meta12540 = meta12540;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      domina.xpath.t12539.prototype.domina$DomContent$ = true;
      domina.xpath.t12539.prototype.domina$DomContent$nodes$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.mapcat.call(null, cljs.core.partial.call(null, domina.xpath.select_nodes, self__.expr), domina.nodes.call(null, self__.base));
      };
      domina.xpath.t12539.prototype.domina$DomContent$single_node$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, cljs.core.partial.call(null, domina.xpath.select_node, self__.expr), domina.nodes.call(null, self__.base))));
      };
      domina.xpath.t12539.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12541) {
        var self__ = this;
        var _12541__$1 = this;
        return self__.meta12540;
      };
      domina.xpath.t12539.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12541, meta12540__$1) {
        var self__ = this;
        var _12541__$1 = this;
        return new domina.xpath.t12539(self__.expr, self__.base, self__.xpath, meta12540__$1);
      };
      domina.xpath.t12539.cljs$lang$type = true;
      domina.xpath.t12539.cljs$lang$ctorStr = "domina.xpath/t12539";
      domina.xpath.t12539.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
        return cljs.core._write.call(null, writer__4385__auto__, "domina.xpath/t12539");
      };
      domina.xpath.__GT_t12539 = function __GT_t12539(expr__$1, base__$1, xpath__$1, meta12540) {
        return new domina.xpath.t12539(expr__$1, base__$1, xpath__$1, meta12540);
      };
    }
    return new domina.xpath.t12539(expr, base, xpath, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 79, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 59, new cljs.core.Keyword(null, "column", "column", 2078222095), 16, new cljs.core.Keyword(null, "line", "line", 212345235), 55, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/domina/xpath.cljs"], 
    null));
  };
  xpath = function(base, expr) {
    switch(arguments.length) {
      case 1:
        return xpath__1.call(this, base);
      case 2:
        return xpath__2.call(this, base, expr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpath.cljs$core$IFn$_invoke$arity$1 = xpath__1;
  xpath.cljs$core$IFn$_invoke$arity$2 = xpath__2;
  return xpath;
}();
goog.provide("enfocus.enlive.syntax");
goog.require("cljs.core");
enfocus.enlive.syntax.sel_to_str = function sel_to_str(input) {
  var item = cljs.core.first.call(null, input);
  var rest = cljs.core.rest.call(null, input);
  var end = cljs.core.empty_QMARK_.call(null, rest) ? cljs.core.list(cljs.core.List.EMPTY) : sel_to_str.call(null, rest);
  if (item instanceof cljs.core.Keyword) {
    return cljs.core.map.call(null, function(item, rest, end) {
      return function(p1__12473_SHARP_) {
        return cljs.core.conj.call(null, p1__12473_SHARP_, cljs.core.name.call(null, item));
      };
    }(item, rest, end), end);
  } else {
    if (typeof item === "string") {
      return cljs.core.map.call(null, function(item, rest, end) {
        return function(p1__12474_SHARP_) {
          return cljs.core.conj.call(null, p1__12474_SHARP_, item);
        };
      }(item, rest, end), end);
    } else {
      if (cljs.core.set_QMARK_.call(null, item)) {
        return cljs.core.reduce.call(null, function(item, rest, end) {
          return function(r1, it) {
            return cljs.core.concat.call(null, r1, cljs.core.map.call(null, function(item, rest, end) {
              return function(p1__12475_SHARP_) {
                return cljs.core.conj.call(null, p1__12475_SHARP_, it);
              };
            }(item, rest, end), end));
          };
        }(item, rest, end), cljs.core.PersistentVector.EMPTY, cljs.core.flatten.call(null, sel_to_str.call(null, item)));
      } else {
        if (cljs.core.coll_QMARK_.call(null, item)) {
          var x1 = sel_to_str.call(null, item);
          var sub = cljs.core.map.call(null, function(x1, item, rest, end) {
            return function(p1__12476_SHARP_) {
              return cljs.core.apply.call(null, cljs.core.str, p1__12476_SHARP_);
            };
          }(x1, item, rest, end), sel_to_str.call(null, item));
          var iter__4553__auto__ = function(x1, sub, item, rest, end) {
            return function iter__12483(s__12484) {
              return new cljs.core.LazySeq(null, function(x1, sub, item, rest, end) {
                return function() {
                  var s__12484__$1 = s__12484;
                  while (true) {
                    var temp__4126__auto__ = cljs.core.seq.call(null, s__12484__$1);
                    if (temp__4126__auto__) {
                      var xs__4624__auto__ = temp__4126__auto__;
                      var s = cljs.core.first.call(null, xs__4624__auto__);
                      var iterys__4549__auto__ = function(s__12484__$1, s, xs__4624__auto__, temp__4126__auto__, x1, sub, item, rest, end) {
                        return function iter__12485(s__12486) {
                          return new cljs.core.LazySeq(null, function(s__12484__$1, s, xs__4624__auto__, temp__4126__auto__, x1, sub, item, rest, end) {
                            return function() {
                              var s__12486__$1 = s__12486;
                              while (true) {
                                var temp__4126__auto____$1 = cljs.core.seq.call(null, s__12486__$1);
                                if (temp__4126__auto____$1) {
                                  var s__12486__$2 = temp__4126__auto____$1;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__12486__$2)) {
                                    var c__4551__auto__ = cljs.core.chunk_first.call(null, s__12486__$2);
                                    var size__4552__auto__ = cljs.core.count.call(null, c__4551__auto__);
                                    var b__12488 = cljs.core.chunk_buffer.call(null, size__4552__auto__);
                                    if (function() {
                                      var i__12487 = 0;
                                      while (true) {
                                        if (i__12487 < size__4552__auto__) {
                                          var e = cljs.core._nth.call(null, c__4551__auto__, i__12487);
                                          cljs.core.chunk_append.call(null, b__12488, function() {
                                            cljs.core.println.call(null, s, e);
                                            return cljs.core.conj.call(null, e, s);
                                          }());
                                          var G__12489 = i__12487 + 1;
                                          i__12487 = G__12489;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12488), iter__12485.call(null, cljs.core.chunk_rest.call(null, s__12486__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12488), null);
                                    }
                                  } else {
                                    var e = cljs.core.first.call(null, s__12486__$2);
                                    return cljs.core.cons.call(null, function() {
                                      cljs.core.println.call(null, s, e);
                                      return cljs.core.conj.call(null, e, s);
                                    }(), iter__12485.call(null, cljs.core.rest.call(null, s__12486__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(s__12484__$1, s, xs__4624__auto__, temp__4126__auto__, x1, sub, item, rest, end), null, null);
                        };
                      }(s__12484__$1, s, xs__4624__auto__, temp__4126__auto__, x1, sub, item, rest, end);
                      var fs__4550__auto__ = cljs.core.seq.call(null, iterys__4549__auto__.call(null, end));
                      if (fs__4550__auto__) {
                        return cljs.core.concat.call(null, fs__4550__auto__, iter__12483.call(null, cljs.core.rest.call(null, s__12484__$1)));
                      } else {
                        var G__12490 = cljs.core.rest.call(null, s__12484__$1);
                        s__12484__$1 = G__12490;
                        continue;
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(x1, sub, item, rest, end), null, null);
            };
          }(x1, sub, item, rest, end);
          return iter__4553__auto__.call(null, sub);
        } else {
          return input;
        }
      }
    }
  }
};
enfocus.enlive.syntax.convert = function convert(sel) {
  if (typeof sel === "string") {
    return sel;
  } else {
    var temp__4124__auto__ = enfocus.enlive.syntax.sel_to_str.call(null, sel);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ors = temp__4124__auto__;
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.apply.call(null, cljs.core.concat, cljs.core.interpose.call(null, ",", ors))));
    } else {
      return null;
    }
  }
};
enfocus.enlive.syntax.attr_pairs = function attr_pairs(op, elms) {
  var ts = function(p__12493) {
    var vec__12494 = p__12493;
    var x = cljs.core.nth.call(null, vec__12494, 0, null);
    var y = cljs.core.nth.call(null, vec__12494, 1, null);
    return[cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, x)), cljs.core.str(op), cljs.core.str("\x3d'"), cljs.core.str(y), cljs.core.str("']")].join("");
  };
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, ts, cljs.core.partition.call(null, 2, elms)));
};
enfocus.enlive.syntax.attr_QMARK_ = function() {
  var attr_QMARK___delegate = function(elms) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(p1__12495_SHARP_) {
      return[cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, p1__12495_SHARP_)), cljs.core.str("]")].join("");
    }, elms));
  };
  var attr_QMARK_ = function(var_args) {
    var elms = null;
    if (arguments.length > 0) {
      var G__12496__i = 0, G__12496__a = new Array(arguments.length - 0);
      while (G__12496__i < G__12496__a.length) {
        G__12496__a[G__12496__i] = arguments[G__12496__i + 0];
        ++G__12496__i;
      }
      elms = new cljs.core.IndexedSeq(G__12496__a, 0);
    }
    return attr_QMARK___delegate.call(this, elms);
  };
  attr_QMARK_.cljs$lang$maxFixedArity = 0;
  attr_QMARK_.cljs$lang$applyTo = function(arglist__12497) {
    var elms = cljs.core.seq(arglist__12497);
    return attr_QMARK___delegate(elms);
  };
  attr_QMARK_.cljs$core$IFn$_invoke$arity$variadic = attr_QMARK___delegate;
  return attr_QMARK_;
}();
enfocus.enlive.syntax.attr_EQ_ = function() {
  var attr_EQ___delegate = function(elms) {
    return enfocus.enlive.syntax.attr_pairs.call(null, "", elms);
  };
  var attr_EQ_ = function(var_args) {
    var elms = null;
    if (arguments.length > 0) {
      var G__12498__i = 0, G__12498__a = new Array(arguments.length - 0);
      while (G__12498__i < G__12498__a.length) {
        G__12498__a[G__12498__i] = arguments[G__12498__i + 0];
        ++G__12498__i;
      }
      elms = new cljs.core.IndexedSeq(G__12498__a, 0);
    }
    return attr_EQ___delegate.call(this, elms);
  };
  attr_EQ_.cljs$lang$maxFixedArity = 0;
  attr_EQ_.cljs$lang$applyTo = function(arglist__12499) {
    var elms = cljs.core.seq(arglist__12499);
    return attr_EQ___delegate(elms);
  };
  attr_EQ_.cljs$core$IFn$_invoke$arity$variadic = attr_EQ___delegate;
  return attr_EQ_;
}();
enfocus.enlive.syntax.attr_has = function() {
  var attr_has__delegate = function(x, vals) {
    var ts = function(y) {
      return[cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, x)), cljs.core.str("~\x3d'"), cljs.core.str(y), cljs.core.str("']")].join("");
    };
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, ts, vals));
  };
  var attr_has = function(x, var_args) {
    var vals = null;
    if (arguments.length > 1) {
      var G__12500__i = 0, G__12500__a = new Array(arguments.length - 1);
      while (G__12500__i < G__12500__a.length) {
        G__12500__a[G__12500__i] = arguments[G__12500__i + 1];
        ++G__12500__i;
      }
      vals = new cljs.core.IndexedSeq(G__12500__a, 0);
    }
    return attr_has__delegate.call(this, x, vals);
  };
  attr_has.cljs$lang$maxFixedArity = 1;
  attr_has.cljs$lang$applyTo = function(arglist__12501) {
    var x = cljs.core.first(arglist__12501);
    var vals = cljs.core.rest(arglist__12501);
    return attr_has__delegate(x, vals);
  };
  attr_has.cljs$core$IFn$_invoke$arity$variadic = attr_has__delegate;
  return attr_has;
}();
enfocus.enlive.syntax.attr_starts = function() {
  var attr_starts__delegate = function(elms) {
    return enfocus.enlive.syntax.attr_pairs.call(null, "^", elms);
  };
  var attr_starts = function(var_args) {
    var elms = null;
    if (arguments.length > 0) {
      var G__12502__i = 0, G__12502__a = new Array(arguments.length - 0);
      while (G__12502__i < G__12502__a.length) {
        G__12502__a[G__12502__i] = arguments[G__12502__i + 0];
        ++G__12502__i;
      }
      elms = new cljs.core.IndexedSeq(G__12502__a, 0);
    }
    return attr_starts__delegate.call(this, elms);
  };
  attr_starts.cljs$lang$maxFixedArity = 0;
  attr_starts.cljs$lang$applyTo = function(arglist__12503) {
    var elms = cljs.core.seq(arglist__12503);
    return attr_starts__delegate(elms);
  };
  attr_starts.cljs$core$IFn$_invoke$arity$variadic = attr_starts__delegate;
  return attr_starts;
}();
enfocus.enlive.syntax.attr_ends = function() {
  var attr_ends__delegate = function(elms) {
    return enfocus.enlive.syntax.attr_pairs.call(null, "$", elms);
  };
  var attr_ends = function(var_args) {
    var elms = null;
    if (arguments.length > 0) {
      var G__12504__i = 0, G__12504__a = new Array(arguments.length - 0);
      while (G__12504__i < G__12504__a.length) {
        G__12504__a[G__12504__i] = arguments[G__12504__i + 0];
        ++G__12504__i;
      }
      elms = new cljs.core.IndexedSeq(G__12504__a, 0);
    }
    return attr_ends__delegate.call(this, elms);
  };
  attr_ends.cljs$lang$maxFixedArity = 0;
  attr_ends.cljs$lang$applyTo = function(arglist__12505) {
    var elms = cljs.core.seq(arglist__12505);
    return attr_ends__delegate(elms);
  };
  attr_ends.cljs$core$IFn$_invoke$arity$variadic = attr_ends__delegate;
  return attr_ends;
}();
enfocus.enlive.syntax.attr_contains = function() {
  var attr_contains__delegate = function(elms) {
    return enfocus.enlive.syntax.attr_pairs.call(null, "*", elms);
  };
  var attr_contains = function(var_args) {
    var elms = null;
    if (arguments.length > 0) {
      var G__12506__i = 0, G__12506__a = new Array(arguments.length - 0);
      while (G__12506__i < G__12506__a.length) {
        G__12506__a[G__12506__i] = arguments[G__12506__i + 0];
        ++G__12506__i;
      }
      elms = new cljs.core.IndexedSeq(G__12506__a, 0);
    }
    return attr_contains__delegate.call(this, elms);
  };
  attr_contains.cljs$lang$maxFixedArity = 0;
  attr_contains.cljs$lang$applyTo = function(arglist__12507) {
    var elms = cljs.core.seq(arglist__12507);
    return attr_contains__delegate(elms);
  };
  attr_contains.cljs$core$IFn$_invoke$arity$variadic = attr_contains__delegate;
  return attr_contains;
}();
enfocus.enlive.syntax.attr_BAR__EQ_ = function() {
  var attr_BAR__EQ___delegate = function(elms) {
    return enfocus.enlive.syntax.attr_pairs.call(null, "|", elms);
  };
  var attr_BAR__EQ_ = function(var_args) {
    var elms = null;
    if (arguments.length > 0) {
      var G__12508__i = 0, G__12508__a = new Array(arguments.length - 0);
      while (G__12508__i < G__12508__a.length) {
        G__12508__a[G__12508__i] = arguments[G__12508__i + 0];
        ++G__12508__i;
      }
      elms = new cljs.core.IndexedSeq(G__12508__a, 0);
    }
    return attr_BAR__EQ___delegate.call(this, elms);
  };
  attr_BAR__EQ_.cljs$lang$maxFixedArity = 0;
  attr_BAR__EQ_.cljs$lang$applyTo = function(arglist__12509) {
    var elms = cljs.core.seq(arglist__12509);
    return attr_BAR__EQ___delegate(elms);
  };
  attr_BAR__EQ_.cljs$core$IFn$_invoke$arity$variadic = attr_BAR__EQ___delegate;
  return attr_BAR__EQ_;
}();
enfocus.enlive.syntax.nth_op = function() {
  var nth_op = null;
  var nth_op__2 = function(op, x) {
    return[cljs.core.str(":nth-"), cljs.core.str(op), cljs.core.str("("), cljs.core.str(x), cljs.core.str(")")].join("");
  };
  var nth_op__3 = function(op, x, y) {
    return[cljs.core.str(":nth-"), cljs.core.str(op), cljs.core.str("("), cljs.core.str(x), cljs.core.str("n"), cljs.core.str(y > 0 ? "+" : null), cljs.core.str(y)].join("");
  };
  nth_op = function(op, x, y) {
    switch(arguments.length) {
      case 2:
        return nth_op__2.call(this, op, x);
      case 3:
        return nth_op__3.call(this, op, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth_op.cljs$core$IFn$_invoke$arity$2 = nth_op__2;
  nth_op.cljs$core$IFn$_invoke$arity$3 = nth_op__3;
  return nth_op;
}();
enfocus.enlive.syntax.nth_child = function() {
  var nth_child = null;
  var nth_child__1 = function(x) {
    return enfocus.enlive.syntax.nth_op.call(null, "child", x);
  };
  var nth_child__2 = function(x, y) {
    return enfocus.enlive.syntax.nth_op.call(null, "child", x, y);
  };
  nth_child = function(x, y) {
    switch(arguments.length) {
      case 1:
        return nth_child__1.call(this, x);
      case 2:
        return nth_child__2.call(this, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth_child.cljs$core$IFn$_invoke$arity$1 = nth_child__1;
  nth_child.cljs$core$IFn$_invoke$arity$2 = nth_child__2;
  return nth_child;
}();
enfocus.enlive.syntax.nth_last_child = function() {
  var nth_last_child = null;
  var nth_last_child__1 = function(x) {
    return enfocus.enlive.syntax.nth_op.call(null, "last-child", x);
  };
  var nth_last_child__2 = function(x, y) {
    return enfocus.enlive.syntax.nth_op.call(null, "last-child", x, y);
  };
  nth_last_child = function(x, y) {
    switch(arguments.length) {
      case 1:
        return nth_last_child__1.call(this, x);
      case 2:
        return nth_last_child__2.call(this, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth_last_child.cljs$core$IFn$_invoke$arity$1 = nth_last_child__1;
  nth_last_child.cljs$core$IFn$_invoke$arity$2 = nth_last_child__2;
  return nth_last_child;
}();
enfocus.enlive.syntax.nth_of_type = function() {
  var nth_of_type = null;
  var nth_of_type__1 = function(x) {
    return enfocus.enlive.syntax.nth_op.call(null, "of-type", x);
  };
  var nth_of_type__2 = function(x, y) {
    return enfocus.enlive.syntax.nth_op.call(null, "of-type", x, y);
  };
  nth_of_type = function(x, y) {
    switch(arguments.length) {
      case 1:
        return nth_of_type__1.call(this, x);
      case 2:
        return nth_of_type__2.call(this, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth_of_type.cljs$core$IFn$_invoke$arity$1 = nth_of_type__1;
  nth_of_type.cljs$core$IFn$_invoke$arity$2 = nth_of_type__2;
  return nth_of_type;
}();
enfocus.enlive.syntax.nth_last_of_type = function() {
  var nth_last_of_type = null;
  var nth_last_of_type__1 = function(x) {
    return enfocus.enlive.syntax.nth_op.call(null, "last-of-type", x);
  };
  var nth_last_of_type__2 = function(x, y) {
    return enfocus.enlive.syntax.nth_op.call(null, "last-of-type", x, y);
  };
  nth_last_of_type = function(x, y) {
    switch(arguments.length) {
      case 1:
        return nth_last_of_type__1.call(this, x);
      case 2:
        return nth_last_of_type__2.call(this, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth_last_of_type.cljs$core$IFn$_invoke$arity$1 = nth_last_of_type__1;
  nth_last_of_type.cljs$core$IFn$_invoke$arity$2 = nth_last_of_type__2;
  return nth_last_of_type;
}();
enfocus.enlive.syntax.but = function() {
  var but__delegate = function(sel) {
    return[cljs.core.str("not("), cljs.core.str(enfocus.enlive.syntax.convert.call(null, sel)), cljs.core.str(")")].join("");
  };
  var but = function(var_args) {
    var sel = null;
    if (arguments.length > 0) {
      var G__12510__i = 0, G__12510__a = new Array(arguments.length - 0);
      while (G__12510__i < G__12510__a.length) {
        G__12510__a[G__12510__i] = arguments[G__12510__i + 0];
        ++G__12510__i;
      }
      sel = new cljs.core.IndexedSeq(G__12510__a, 0);
    }
    return but__delegate.call(this, sel);
  };
  but.cljs$lang$maxFixedArity = 0;
  but.cljs$lang$applyTo = function(arglist__12511) {
    var sel = cljs.core.seq(arglist__12511);
    return but__delegate(sel);
  };
  but.cljs$core$IFn$_invoke$arity$variadic = but__delegate;
  return but;
}();
goog.provide("enfocus.core");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom.query");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("domina.css");
goog.require("goog.Timer");
goog.require("goog.net.XhrIo");
goog.require("goog.dom.ViewportSizeMonitor");
goog.require("domina");
goog.require("goog.async.Delay");
goog.require("goog.events");
goog.require("domina.xpath");
goog.require("clojure.string");
goog.require("goog.style");
goog.require("enfocus.enlive.syntax");
enfocus.core.ISelector = function() {
  var obj11893 = {};
  return obj11893;
}();
enfocus.core.select = function() {
  var select = null;
  var select__1 = function(this$) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.enfocus$core$ISelector$select$arity$1;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.enfocus$core$ISelector$select$arity$1(this$);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = enfocus.core.select[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = enfocus.core.select["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISelector.select", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var select__2 = function(this$, root) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.enfocus$core$ISelector$select$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.enfocus$core$ISelector$select$arity$2(this$, root);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = enfocus.core.select[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = enfocus.core.select["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISelector.select", this$);
          }
        }
      }().call(null, this$, root);
    }
  };
  var select__3 = function(this$, root, id_mask) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.enfocus$core$ISelector$select$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.enfocus$core$ISelector$select$arity$3(this$, root, id_mask);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = enfocus.core.select[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = enfocus.core.select["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISelector.select", this$);
          }
        }
      }().call(null, this$, root, id_mask);
    }
  };
  select = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return select__1.call(this, this$);
      case 2:
        return select__2.call(this, this$, root);
      case 3:
        return select__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  select.cljs$core$IFn$_invoke$arity$1 = select__1;
  select.cljs$core$IFn$_invoke$arity$2 = select__2;
  select.cljs$core$IFn$_invoke$arity$3 = select__3;
  return select;
}();
enfocus.core.ITransform = function() {
  var obj11895 = {};
  return obj11895;
}();
enfocus.core.apply_transform = function() {
  var apply_transform = null;
  var apply_transform__2 = function(this$, nodes) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.enfocus$core$ITransform$apply_transform$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.enfocus$core$ITransform$apply_transform$arity$2(this$, nodes);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = enfocus.core.apply_transform[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = enfocus.core.apply_transform["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ITransform.apply-transform", this$);
          }
        }
      }().call(null, this$, nodes);
    }
  };
  var apply_transform__3 = function(this$, nodes, callback) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.enfocus$core$ITransform$apply_transform$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.enfocus$core$ITransform$apply_transform$arity$3(this$, nodes, callback);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = enfocus.core.apply_transform[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = enfocus.core.apply_transform["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ITransform.apply-transform", this$);
          }
        }
      }().call(null, this$, nodes, callback);
    }
  };
  apply_transform = function(this$, nodes, callback) {
    switch(arguments.length) {
      case 2:
        return apply_transform__2.call(this, this$, nodes);
      case 3:
        return apply_transform__3.call(this, this$, nodes, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply_transform.cljs$core$IFn$_invoke$arity$2 = apply_transform__2;
  apply_transform.cljs$core$IFn$_invoke$arity$3 = apply_transform__3;
  return apply_transform;
}();
enfocus.core.debug = false;
enfocus.core.log_debug = function log_debug(mesg) {
  if (cljs.core.truth_(function() {
    var and__3785__auto__ = enfocus.core.debug;
    if (cljs.core.truth_(and__3785__auto__)) {
      return!cljs.core._EQ_.call(null, window.console, undefined);
    } else {
      return and__3785__auto__;
    }
  }())) {
    return console.log(mesg);
  } else {
    return null;
  }
};
enfocus.core.setTimeout = function setTimeout(func, ttime) {
  return goog.Timer.callOnce(func, ttime);
};
enfocus.core.node_QMARK_ = function node_QMARK_(tst) {
  return goog.dom.isNodeLike(tst);
};
enfocus.core.nodelist_QMARK_ = function nodelist_QMARK_(tst) {
  return tst instanceof NodeList;
};
enfocus.core.nodes__GT_coll = function nodes__GT_coll(nl) {
  if (nl === window) {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [nl], null);
  } else {
    return domina.nodes.call(null, nl);
  }
};
enfocus.core.flatten_nodes_coll = function flatten_nodes_coll(values) {
  return cljs.core.mapcat.call(null, function(p1__11896_SHARP_) {
    if (typeof p1__11896_SHARP_ === "string") {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [goog.dom.createTextNode(p1__11896_SHARP_)], null);
    } else {
      return enfocus.core.nodes__GT_coll.call(null, p1__11896_SHARP_);
    }
  }, values);
};
enfocus.core.style_set = function style_set(obj, values) {
  var seq__11903_11909 = cljs.core.seq.call(null, cljs.core.apply.call(null, cljs.core.hash_map, values));
  var chunk__11904_11910 = null;
  var count__11905_11911 = 0;
  var i__11906_11912 = 0;
  while (true) {
    if (i__11906_11912 < count__11905_11911) {
      var vec__11907_11913 = cljs.core._nth.call(null, chunk__11904_11910, i__11906_11912);
      var attr_11914 = cljs.core.nth.call(null, vec__11907_11913, 0, null);
      var value_11915 = cljs.core.nth.call(null, vec__11907_11913, 1, null);
      goog.style.setStyle(obj, cljs.core.name.call(null, attr_11914), value_11915);
      var G__11916 = seq__11903_11909;
      var G__11917 = chunk__11904_11910;
      var G__11918 = count__11905_11911;
      var G__11919 = i__11906_11912 + 1;
      seq__11903_11909 = G__11916;
      chunk__11904_11910 = G__11917;
      count__11905_11911 = G__11918;
      i__11906_11912 = G__11919;
      continue;
    } else {
      var temp__4126__auto___11920 = cljs.core.seq.call(null, seq__11903_11909);
      if (temp__4126__auto___11920) {
        var seq__11903_11921__$1 = temp__4126__auto___11920;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11903_11921__$1)) {
          var c__4584__auto___11922 = cljs.core.chunk_first.call(null, seq__11903_11921__$1);
          var G__11923 = cljs.core.chunk_rest.call(null, seq__11903_11921__$1);
          var G__11924 = c__4584__auto___11922;
          var G__11925 = cljs.core.count.call(null, c__4584__auto___11922);
          var G__11926 = 0;
          seq__11903_11909 = G__11923;
          chunk__11904_11910 = G__11924;
          count__11905_11911 = G__11925;
          i__11906_11912 = G__11926;
          continue;
        } else {
          var vec__11908_11927 = cljs.core.first.call(null, seq__11903_11921__$1);
          var attr_11928 = cljs.core.nth.call(null, vec__11908_11927, 0, null);
          var value_11929 = cljs.core.nth.call(null, vec__11908_11927, 1, null);
          goog.style.setStyle(obj, cljs.core.name.call(null, attr_11928), value_11929);
          var G__11930 = cljs.core.next.call(null, seq__11903_11921__$1);
          var G__11931 = null;
          var G__11932 = 0;
          var G__11933 = 0;
          seq__11903_11909 = G__11930;
          chunk__11904_11910 = G__11931;
          count__11905_11911 = G__11932;
          i__11906_11912 = G__11933;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
enfocus.core.style_remove = function style_remove(obj, values) {
  var seq__11938 = cljs.core.seq.call(null, values);
  var chunk__11939 = null;
  var count__11940 = 0;
  var i__11941 = 0;
  while (true) {
    if (i__11941 < count__11940) {
      var attr = cljs.core._nth.call(null, chunk__11939, i__11941);
      if (cljs.core.truth_(goog.userAgent.IE)) {
        goog.style.setStyle(obj, cljs.core.name.call(null, attr), "");
      } else {
        obj.style.removeProperty(cljs.core.name.call(null, attr));
      }
      var G__11942 = seq__11938;
      var G__11943 = chunk__11939;
      var G__11944 = count__11940;
      var G__11945 = i__11941 + 1;
      seq__11938 = G__11942;
      chunk__11939 = G__11943;
      count__11940 = G__11944;
      i__11941 = G__11945;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__11938);
      if (temp__4126__auto__) {
        var seq__11938__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11938__$1)) {
          var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__11938__$1);
          var G__11946 = cljs.core.chunk_rest.call(null, seq__11938__$1);
          var G__11947 = c__4584__auto__;
          var G__11948 = cljs.core.count.call(null, c__4584__auto__);
          var G__11949 = 0;
          seq__11938 = G__11946;
          chunk__11939 = G__11947;
          count__11940 = G__11948;
          i__11941 = G__11949;
          continue;
        } else {
          var attr = cljs.core.first.call(null, seq__11938__$1);
          if (cljs.core.truth_(goog.userAgent.IE)) {
            goog.style.setStyle(obj, cljs.core.name.call(null, attr), "");
          } else {
            obj.style.removeProperty(cljs.core.name.call(null, attr));
          }
          var G__11950 = cljs.core.next.call(null, seq__11938__$1);
          var G__11951 = null;
          var G__11952 = 0;
          var G__11953 = 0;
          seq__11938 = G__11950;
          chunk__11939 = G__11951;
          count__11940 = G__11952;
          i__11941 = G__11953;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
enfocus.core.get_eff_prop_name = function get_eff_prop_name(etype) {
  return[cljs.core.str("__ef_effect_"), cljs.core.str(etype)].join("");
};
enfocus.core.get_mills = function get_mills() {
  return(new Date).getMilliseconds();
};
enfocus.core.pix_round = function pix_round(step) {
  if (step < 0) {
    return Math.floor.call(null, step);
  } else {
    return Math.ceil.call(null, step);
  }
};
enfocus.core.add_map_attrs = function() {
  var add_map_attrs = null;
  var add_map_attrs__2 = function(elem, ats) {
    if (cljs.core.truth_(elem)) {
      if (cljs.core.map_QMARK_.call(null, ats)) {
        var seq__11960_11966 = cljs.core.seq.call(null, ats);
        var chunk__11961_11967 = null;
        var count__11962_11968 = 0;
        var i__11963_11969 = 0;
        while (true) {
          if (i__11963_11969 < count__11962_11968) {
            var vec__11964_11970 = cljs.core._nth.call(null, chunk__11961_11967, i__11963_11969);
            var k_11971 = cljs.core.nth.call(null, vec__11964_11970, 0, null);
            var v_11972 = cljs.core.nth.call(null, vec__11964_11970, 1, null);
            add_map_attrs.call(null, elem, k_11971, v_11972);
            var G__11973 = seq__11960_11966;
            var G__11974 = chunk__11961_11967;
            var G__11975 = count__11962_11968;
            var G__11976 = i__11963_11969 + 1;
            seq__11960_11966 = G__11973;
            chunk__11961_11967 = G__11974;
            count__11962_11968 = G__11975;
            i__11963_11969 = G__11976;
            continue;
          } else {
            var temp__4126__auto___11977 = cljs.core.seq.call(null, seq__11960_11966);
            if (temp__4126__auto___11977) {
              var seq__11960_11978__$1 = temp__4126__auto___11977;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11960_11978__$1)) {
                var c__4584__auto___11979 = cljs.core.chunk_first.call(null, seq__11960_11978__$1);
                var G__11980 = cljs.core.chunk_rest.call(null, seq__11960_11978__$1);
                var G__11981 = c__4584__auto___11979;
                var G__11982 = cljs.core.count.call(null, c__4584__auto___11979);
                var G__11983 = 0;
                seq__11960_11966 = G__11980;
                chunk__11961_11967 = G__11981;
                count__11962_11968 = G__11982;
                i__11963_11969 = G__11983;
                continue;
              } else {
                var vec__11965_11984 = cljs.core.first.call(null, seq__11960_11978__$1);
                var k_11985 = cljs.core.nth.call(null, vec__11965_11984, 0, null);
                var v_11986 = cljs.core.nth.call(null, vec__11965_11984, 1, null);
                add_map_attrs.call(null, elem, k_11985, v_11986);
                var G__11987 = cljs.core.next.call(null, seq__11960_11978__$1);
                var G__11988 = null;
                var G__11989 = 0;
                var G__11990 = 0;
                seq__11960_11966 = G__11987;
                chunk__11961_11967 = G__11988;
                count__11962_11968 = G__11989;
                i__11963_11969 = G__11990;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return elem;
      } else {
        return null;
      }
    } else {
      return null;
    }
  };
  var add_map_attrs__3 = function(elem, k, v) {
    elem.setAttribute(cljs.core.name.call(null, k), v);
    return elem;
  };
  add_map_attrs = function(elem, k, v) {
    switch(arguments.length) {
      case 2:
        return add_map_attrs__2.call(this, elem, k);
      case 3:
        return add_map_attrs__3.call(this, elem, k, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_map_attrs.cljs$core$IFn$_invoke$arity$2 = add_map_attrs__2;
  add_map_attrs.cljs$core$IFn$_invoke$arity$3 = add_map_attrs__3;
  return add_map_attrs;
}();
enfocus.core.tpl_load_cnt = cljs.core.atom.call(null, 0);
enfocus.core.tpl_cache = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
enfocus.core.hide_style = (new cljs.core.PersistentArrayMap(null, 1, ["style", "display: none; width: 0px; height: 0px"], null)).strobj;
enfocus.core.create_hidden_dom = function create_hidden_dom(child) {
  var div = goog.dom.createDom("div", enfocus.core.hide_style);
  if (cljs.core._EQ_.call(null, child.nodeType, 11)) {
    goog.dom.appendChild(div, child);
  } else {
    enfocus.core.log_debug.call(null, cljs.core.count.call(null, domina.nodes.call(null, child)));
    var seq__11995_11999 = cljs.core.seq.call(null, domina.nodes.call(null, child));
    var chunk__11996_12000 = null;
    var count__11997_12001 = 0;
    var i__11998_12002 = 0;
    while (true) {
      if (i__11998_12002 < count__11997_12001) {
        var node_12003 = cljs.core._nth.call(null, chunk__11996_12000, i__11998_12002);
        goog.dom.appendChild(div, node_12003);
        var G__12004 = seq__11995_11999;
        var G__12005 = chunk__11996_12000;
        var G__12006 = count__11997_12001;
        var G__12007 = i__11998_12002 + 1;
        seq__11995_11999 = G__12004;
        chunk__11996_12000 = G__12005;
        count__11997_12001 = G__12006;
        i__11998_12002 = G__12007;
        continue;
      } else {
        var temp__4126__auto___12008 = cljs.core.seq.call(null, seq__11995_11999);
        if (temp__4126__auto___12008) {
          var seq__11995_12009__$1 = temp__4126__auto___12008;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11995_12009__$1)) {
            var c__4584__auto___12010 = cljs.core.chunk_first.call(null, seq__11995_12009__$1);
            var G__12011 = cljs.core.chunk_rest.call(null, seq__11995_12009__$1);
            var G__12012 = c__4584__auto___12010;
            var G__12013 = cljs.core.count.call(null, c__4584__auto___12010);
            var G__12014 = 0;
            seq__11995_11999 = G__12011;
            chunk__11996_12000 = G__12012;
            count__11997_12001 = G__12013;
            i__11998_12002 = G__12014;
            continue;
          } else {
            var node_12015 = cljs.core.first.call(null, seq__11995_12009__$1);
            goog.dom.appendChild(div, node_12015);
            var G__12016 = cljs.core.next.call(null, seq__11995_12009__$1);
            var G__12017 = null;
            var G__12018 = 0;
            var G__12019 = 0;
            seq__11995_11999 = G__12016;
            chunk__11996_12000 = G__12017;
            count__11997_12001 = G__12018;
            i__11998_12002 = G__12019;
            continue;
          }
        } else {
        }
      }
      break;
    }
  }
  goog.dom.appendChild(goog.dom.getDocument().documentElement, div);
  return div;
};
enfocus.core.remove_node_return_child = function remove_node_return_child(div) {
  var child = div.childNodes;
  var frag = document.createDocumentFragment();
  goog.dom.append(frag, child);
  goog.dom.removeNode(div);
  return frag;
};
enfocus.core.last_element_child = function last_element_child(node) {
  return goog.dom.getLastElementChild(node);
};
enfocus.core.replace_ids = function() {
  var replace_ids = null;
  var replace_ids__1 = function(text) {
    return replace_ids.call(null, [cljs.core.str(cljs.core.name.call(null, cljs.core.gensym.call(null, "id"))), cljs.core.str("_")].join(""), text);
  };
  var replace_ids__2 = function(id_mask, text) {
    var re = new RegExp("(\x3c.*?\\sid\x3d['\"])(.*?)(['\"].*?\x3e)", "g");
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id_mask, text.replace(re, function(re) {
      return function(a, b, c, d) {
        return[cljs.core.str(b), cljs.core.str(id_mask), cljs.core.str(c), cljs.core.str(d)].join("");
      };
    }(re))], null);
  };
  replace_ids = function(id_mask, text) {
    switch(arguments.length) {
      case 1:
        return replace_ids__1.call(this, id_mask);
      case 2:
        return replace_ids__2.call(this, id_mask, text);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace_ids.cljs$core$IFn$_invoke$arity$1 = replace_ids__1;
  replace_ids.cljs$core$IFn$_invoke$arity$2 = replace_ids__2;
  return replace_ids;
}();
enfocus.core.reset_ids = function reset_ids(sym, nod) {
  var id_nodes = enfocus.core.css_select.call(null, nod, "*[id]");
  var nod_col = enfocus.core.nodes__GT_coll.call(null, id_nodes);
  return cljs.core.doall.call(null, cljs.core.map.call(null, function(id_nodes, nod_col) {
    return function(p1__12020_SHARP_) {
      var id = p1__12020_SHARP_.getAttribute("id");
      var rid = id.replace(sym, "");
      return p1__12020_SHARP_.setAttribute("id", rid);
    };
  }(id_nodes, nod_col), nod_col));
};
enfocus.core.load_remote_dom = function load_remote_dom(uri, dom_key, id_mask) {
  if (cljs.core.deref.call(null, enfocus.core.tpl_cache).call(null, dom_key) == null) {
    cljs.core.swap_BANG_.call(null, enfocus.core.tpl_load_cnt, cljs.core.inc);
    var req = new goog.net.XhrIo;
    var callback = function(req) {
      return function(req__$1) {
        var text = req__$1.getResponseText();
        var vec__12022 = enfocus.core.replace_ids.call(null, id_mask, text);
        var sym = cljs.core.nth.call(null, vec__12022, 0, null);
        var txt = cljs.core.nth.call(null, vec__12022, 1, null);
        return cljs.core.swap_BANG_.call(null, enfocus.core.tpl_cache, cljs.core.assoc, dom_key, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym, txt], null));
      };
    }(req);
    goog.events.listen(req, goog.net.EventType.COMPLETE, function(req, callback) {
      return function() {
        callback.call(null, req);
        return cljs.core.swap_BANG_.call(null, enfocus.core.tpl_load_cnt, cljs.core.dec);
      };
    }(req, callback));
    return req.send(uri, "GET");
  } else {
    return null;
  }
};
enfocus.core.html_to_dom = function html_to_dom(html) {
  var dfa = enfocus.core.nodes__GT_coll.call(null, domina.html_to_dom.call(null, html));
  var frag = document.createDocumentFragment();
  enfocus.core.log_debug.call(null, cljs.core.count.call(null, dfa));
  var seq__12027_12031 = cljs.core.seq.call(null, dfa);
  var chunk__12028_12032 = null;
  var count__12029_12033 = 0;
  var i__12030_12034 = 0;
  while (true) {
    if (i__12030_12034 < count__12029_12033) {
      var df_12035 = cljs.core._nth.call(null, chunk__12028_12032, i__12030_12034);
      goog.dom.append(frag, df_12035);
      var G__12036 = seq__12027_12031;
      var G__12037 = chunk__12028_12032;
      var G__12038 = count__12029_12033;
      var G__12039 = i__12030_12034 + 1;
      seq__12027_12031 = G__12036;
      chunk__12028_12032 = G__12037;
      count__12029_12033 = G__12038;
      i__12030_12034 = G__12039;
      continue;
    } else {
      var temp__4126__auto___12040 = cljs.core.seq.call(null, seq__12027_12031);
      if (temp__4126__auto___12040) {
        var seq__12027_12041__$1 = temp__4126__auto___12040;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12027_12041__$1)) {
          var c__4584__auto___12042 = cljs.core.chunk_first.call(null, seq__12027_12041__$1);
          var G__12043 = cljs.core.chunk_rest.call(null, seq__12027_12041__$1);
          var G__12044 = c__4584__auto___12042;
          var G__12045 = cljs.core.count.call(null, c__4584__auto___12042);
          var G__12046 = 0;
          seq__12027_12031 = G__12043;
          chunk__12028_12032 = G__12044;
          count__12029_12033 = G__12045;
          i__12030_12034 = G__12046;
          continue;
        } else {
          var df_12047 = cljs.core.first.call(null, seq__12027_12041__$1);
          goog.dom.append(frag, df_12047);
          var G__12048 = cljs.core.next.call(null, seq__12027_12041__$1);
          var G__12049 = null;
          var G__12050 = 0;
          var G__12051 = 0;
          seq__12027_12031 = G__12048;
          chunk__12028_12032 = G__12049;
          count__12029_12033 = G__12050;
          i__12030_12034 = G__12051;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return frag;
};
enfocus.core.get_cached_dom = function get_cached_dom(uri) {
  var nod = cljs.core.deref.call(null, enfocus.core.tpl_cache).call(null, uri);
  if (cljs.core.truth_(nod)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, nod), enfocus.core.html_to_dom.call(null, cljs.core.second.call(null, nod))], null);
  } else {
    return null;
  }
};
enfocus.core.get_cached_snippet = function get_cached_snippet(uri, sel) {
  var sel_str = enfocus.core.create_sel_str.call(null, sel);
  var cache = cljs.core.deref.call(null, enfocus.core.tpl_cache).call(null, [cljs.core.str(uri), cljs.core.str(sel_str)].join(""));
  if (cljs.core.truth_(cache)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, cache), enfocus.core.html_to_dom.call(null, cljs.core.second.call(null, cache))], null);
  } else {
    var vec__12054 = enfocus.core.get_cached_dom.call(null, uri);
    var sym = cljs.core.nth.call(null, vec__12054, 0, null);
    var tdom = cljs.core.nth.call(null, vec__12054, 1, null);
    var dom = enfocus.core.create_hidden_dom.call(null, tdom);
    var tsnip = domina.nodes.call(null, enfocus.core.css_select.call(null, sym, dom, sel));
    var html_snip = cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(vec__12054, sym, tdom, dom, tsnip, sel_str, cache) {
      return function(p1__12052_SHARP_) {
        return p1__12052_SHARP_.outerHTML;
      };
    }(vec__12054, sym, tdom, dom, tsnip, sel_str, cache), tsnip));
    enfocus.core.remove_node_return_child.call(null, dom);
    cljs.core.swap_BANG_.call(null, enfocus.core.tpl_cache, cljs.core.assoc, [cljs.core.str(uri), cljs.core.str(sel_str)].join(""), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym, html_snip], null));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym, enfocus.core.html_to_dom.call(null, html_snip)], null);
  }
};
enfocus.core.extr_multi_node = function() {
  var extr_multi_node = null;
  var extr_multi_node__1 = function(func) {
    return extr_multi_node.call(null, func, null);
  };
  var extr_multi_node__2 = function(func, filt) {
    var trans = function trans(pnodes, chain) {
      var pnod_col = enfocus.core.nodes__GT_coll.call(null, pnodes);
      var result = cljs.core.map.call(null, func, pnod_col);
      var result__$1 = cljs.core.truth_(filt) ? cljs.core.filter.call(null, filt, result) : result;
      if (cljs.core.count.call(null, result__$1) <= 1) {
        return cljs.core.first.call(null, result__$1);
      } else {
        return result__$1;
      }
    };
    if (typeof enfocus.core.t12059 !== "undefined") {
    } else {
      enfocus.core.t12059 = function(trans, filt, func, extr_multi_node, meta12060) {
        this.trans = trans;
        this.filt = filt;
        this.func = func;
        this.extr_multi_node = extr_multi_node;
        this.meta12060 = meta12060;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393217;
      };
      enfocus.core.t12059.prototype.call = function(trans) {
        return function() {
          var G__12063 = null;
          var G__12063__2 = function(self__, nodes) {
            var self__ = this;
            var self____$1 = this;
            var _ = self____$1;
            return self__.trans.call(null, nodes, null);
          };
          var G__12063__3 = function(self__, nodes, chain) {
            var self__ = this;
            var self____$1 = this;
            var _ = self____$1;
            return self__.trans.call(null, nodes, chain);
          };
          G__12063 = function(self__, nodes, chain) {
            switch(arguments.length) {
              case 2:
                return G__12063__2.call(this, self__, nodes);
              case 3:
                return G__12063__3.call(this, self__, nodes, chain);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12063.cljs$core$IFn$_invoke$arity$2 = G__12063__2;
          G__12063.cljs$core$IFn$_invoke$arity$3 = G__12063__3;
          return G__12063;
        }();
      }(trans);
      enfocus.core.t12059.prototype.apply = function(trans) {
        return function(self__, args12062) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12062)));
        };
      }(trans);
      enfocus.core.t12059.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
        return function(nodes) {
          var self__ = this;
          var _ = this;
          return self__.trans.call(null, nodes, null);
        };
      }(trans);
      enfocus.core.t12059.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
        return function(nodes, chain) {
          var self__ = this;
          var _ = this;
          return self__.trans.call(null, nodes, chain);
        };
      }(trans);
      enfocus.core.t12059.prototype.enfocus$core$ITransform$ = true;
      enfocus.core.t12059.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
        return function(_, nodes) {
          var self__ = this;
          var ___$1 = this;
          return self__.trans.call(null, nodes, null);
        };
      }(trans);
      enfocus.core.t12059.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
        return function(_, nodes, chain) {
          var self__ = this;
          var ___$1 = this;
          return self__.trans.call(null, nodes, chain);
        };
      }(trans);
      enfocus.core.t12059.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
        return function(_12061) {
          var self__ = this;
          var _12061__$1 = this;
          return self__.meta12060;
        };
      }(trans);
      enfocus.core.t12059.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
        return function(_12061, meta12060__$1) {
          var self__ = this;
          var _12061__$1 = this;
          return new enfocus.core.t12059(self__.trans, self__.filt, self__.func, self__.extr_multi_node, meta12060__$1);
        };
      }(trans);
      enfocus.core.t12059.cljs$lang$type = true;
      enfocus.core.t12059.cljs$lang$ctorStr = "enfocus.core/t12059";
      enfocus.core.t12059.cljs$lang$ctorPrWriter = function(trans) {
        return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
          return cljs.core._write.call(null, writer__4385__auto__, "enfocus.core/t12059");
        };
      }(trans);
      enfocus.core.__GT_t12059 = function(trans) {
        return function __GT_t12059(trans__$1, filt__$1, func__$1, extr_multi_node__$1, meta12060) {
          return new enfocus.core.t12059(trans__$1, filt__$1, func__$1, extr_multi_node__$1, meta12060);
        };
      }(trans);
    }
    return new enfocus.core.t12059(trans, filt, func, extr_multi_node, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 56, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 237, new cljs.core.Keyword(null, "column", "column", 2078222095), 8, new cljs.core.Keyword(null, "line", "line", 212345235), 231, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/enfocus/core.cljs"], 
    null));
  };
  extr_multi_node = function(func, filt) {
    switch(arguments.length) {
      case 1:
        return extr_multi_node__1.call(this, func);
      case 2:
        return extr_multi_node__2.call(this, func, filt);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  extr_multi_node.cljs$core$IFn$_invoke$arity$1 = extr_multi_node__1;
  extr_multi_node.cljs$core$IFn$_invoke$arity$2 = extr_multi_node__2;
  return extr_multi_node;
}();
enfocus.core.multi_node_chain = function() {
  var multi_node_chain = null;
  var multi_node_chain__1 = function(func) {
    var trans = function(nodes, chain) {
      var val = func.call(null, nodes);
      if (cljs.core.truth_(chain)) {
        return enfocus.core.apply_transform.call(null, chain, nodes);
      } else {
        return val;
      }
    };
    if (typeof enfocus.core.t12073 !== "undefined") {
    } else {
      enfocus.core.t12073 = function(trans, func, multi_node_chain, meta12074) {
        this.trans = trans;
        this.func = func;
        this.multi_node_chain = multi_node_chain;
        this.meta12074 = meta12074;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393217;
      };
      enfocus.core.t12073.prototype.call = function(trans) {
        return function() {
          var G__12081 = null;
          var G__12081__2 = function(self__, nodes) {
            var self__ = this;
            var self____$1 = this;
            var _ = self____$1;
            return self__.trans.call(null, nodes, null);
          };
          var G__12081__3 = function(self__, nodes, chain) {
            var self__ = this;
            var self____$1 = this;
            var _ = self____$1;
            return self__.trans.call(null, nodes, chain);
          };
          G__12081 = function(self__, nodes, chain) {
            switch(arguments.length) {
              case 2:
                return G__12081__2.call(this, self__, nodes);
              case 3:
                return G__12081__3.call(this, self__, nodes, chain);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12081.cljs$core$IFn$_invoke$arity$2 = G__12081__2;
          G__12081.cljs$core$IFn$_invoke$arity$3 = G__12081__3;
          return G__12081;
        }();
      }(trans);
      enfocus.core.t12073.prototype.apply = function(trans) {
        return function(self__, args12076) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12076)));
        };
      }(trans);
      enfocus.core.t12073.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
        return function(nodes) {
          var self__ = this;
          var _ = this;
          return self__.trans.call(null, nodes, null);
        };
      }(trans);
      enfocus.core.t12073.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
        return function(nodes, chain) {
          var self__ = this;
          var _ = this;
          return self__.trans.call(null, nodes, chain);
        };
      }(trans);
      enfocus.core.t12073.prototype.enfocus$core$ITransform$ = true;
      enfocus.core.t12073.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
        return function(_, nodes) {
          var self__ = this;
          var ___$1 = this;
          return self__.trans.call(null, nodes, null);
        };
      }(trans);
      enfocus.core.t12073.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
        return function(_, nodes, chain) {
          var self__ = this;
          var ___$1 = this;
          return self__.trans.call(null, nodes, chain);
        };
      }(trans);
      enfocus.core.t12073.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
        return function(_12075) {
          var self__ = this;
          var _12075__$1 = this;
          return self__.meta12074;
        };
      }(trans);
      enfocus.core.t12073.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
        return function(_12075, meta12074__$1) {
          var self__ = this;
          var _12075__$1 = this;
          return new enfocus.core.t12073(self__.trans, self__.func, self__.multi_node_chain, meta12074__$1);
        };
      }(trans);
      enfocus.core.t12073.cljs$lang$type = true;
      enfocus.core.t12073.cljs$lang$ctorStr = "enfocus.core/t12073";
      enfocus.core.t12073.cljs$lang$ctorPrWriter = function(trans) {
        return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
          return cljs.core._write.call(null, writer__4385__auto__, "enfocus.core/t12073");
        };
      }(trans);
      enfocus.core.__GT_t12073 = function(trans) {
        return function __GT_t12073(trans__$1, func__$1, multi_node_chain__$1, meta12074) {
          return new enfocus.core.t12073(trans__$1, func__$1, multi_node_chain__$1, meta12074);
        };
      }(trans);
    }
    return new enfocus.core.t12073(trans, func, multi_node_chain, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 56, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 252, new cljs.core.Keyword(null, "column", "column", 2078222095), 8, new cljs.core.Keyword(null, "line", "line", 212345235), 246, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/enfocus/core.cljs"], 
    null));
  };
  var multi_node_chain__2 = function(values, func) {
    var trans = function(nodes, chain) {
      var vnodes = cljs.core.mapcat.call(null, function(p1__12064_SHARP_) {
        return domina.nodes.call(null, p1__12064_SHARP_);
      }, values);
      var val = func.call(null, nodes, vnodes);
      if (cljs.core.truth_(chain)) {
        return enfocus.core.apply_transform.call(null, chain, nodes);
      } else {
        return val;
      }
    };
    if (typeof enfocus.core.t12077 !== "undefined") {
    } else {
      enfocus.core.t12077 = function(trans, func, values, multi_node_chain, meta12078) {
        this.trans = trans;
        this.func = func;
        this.values = values;
        this.multi_node_chain = multi_node_chain;
        this.meta12078 = meta12078;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393217;
      };
      enfocus.core.t12077.prototype.call = function(trans) {
        return function() {
          var G__12082 = null;
          var G__12082__2 = function(self__, nodes) {
            var self__ = this;
            var self____$1 = this;
            var _ = self____$1;
            return self__.trans.call(null, nodes, null);
          };
          var G__12082__3 = function(self__, nodes, chain) {
            var self__ = this;
            var self____$1 = this;
            var _ = self____$1;
            return self__.trans.call(null, nodes, chain);
          };
          G__12082 = function(self__, nodes, chain) {
            switch(arguments.length) {
              case 2:
                return G__12082__2.call(this, self__, nodes);
              case 3:
                return G__12082__3.call(this, self__, nodes, chain);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12082.cljs$core$IFn$_invoke$arity$2 = G__12082__2;
          G__12082.cljs$core$IFn$_invoke$arity$3 = G__12082__3;
          return G__12082;
        }();
      }(trans);
      enfocus.core.t12077.prototype.apply = function(trans) {
        return function(self__, args12080) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12080)));
        };
      }(trans);
      enfocus.core.t12077.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
        return function(nodes) {
          var self__ = this;
          var _ = this;
          return self__.trans.call(null, nodes, null);
        };
      }(trans);
      enfocus.core.t12077.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
        return function(nodes, chain) {
          var self__ = this;
          var _ = this;
          return self__.trans.call(null, nodes, chain);
        };
      }(trans);
      enfocus.core.t12077.prototype.enfocus$core$ITransform$ = true;
      enfocus.core.t12077.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
        return function(_, nodes) {
          var self__ = this;
          var ___$1 = this;
          return self__.trans.call(null, nodes, null);
        };
      }(trans);
      enfocus.core.t12077.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
        return function(_, nodes, chain) {
          var self__ = this;
          var ___$1 = this;
          return self__.trans.call(null, nodes, chain);
        };
      }(trans);
      enfocus.core.t12077.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
        return function(_12079) {
          var self__ = this;
          var _12079__$1 = this;
          return self__.meta12078;
        };
      }(trans);
      enfocus.core.t12077.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
        return function(_12079, meta12078__$1) {
          var self__ = this;
          var _12079__$1 = this;
          return new enfocus.core.t12077(self__.trans, self__.func, self__.values, self__.multi_node_chain, meta12078__$1);
        };
      }(trans);
      enfocus.core.t12077.cljs$lang$type = true;
      enfocus.core.t12077.cljs$lang$ctorStr = "enfocus.core/t12077";
      enfocus.core.t12077.cljs$lang$ctorPrWriter = function(trans) {
        return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
          return cljs.core._write.call(null, writer__4385__auto__, "enfocus.core/t12077");
        };
      }(trans);
      enfocus.core.__GT_t12077 = function(trans) {
        return function __GT_t12077(trans__$1, func__$1, values__$1, multi_node_chain__$1, meta12078) {
          return new enfocus.core.t12077(trans__$1, func__$1, values__$1, multi_node_chain__$1, meta12078);
        };
      }(trans);
    }
    return new enfocus.core.t12077(trans, func, values, multi_node_chain, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 56, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 264, new cljs.core.Keyword(null, "column", "column", 2078222095), 8, new cljs.core.Keyword(null, "line", "line", 212345235), 258, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/enfocus/core.cljs"], 
    null));
  };
  multi_node_chain = function(values, func) {
    switch(arguments.length) {
      case 1:
        return multi_node_chain__1.call(this, values);
      case 2:
        return multi_node_chain__2.call(this, values, func);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_node_chain.cljs$core$IFn$_invoke$arity$1 = multi_node_chain__1;
  multi_node_chain.cljs$core$IFn$_invoke$arity$2 = multi_node_chain__2;
  return multi_node_chain;
}();
enfocus.core.content = function() {
  var content__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, values, function(p1__12083_SHARP_, p2__12084_SHARP_) {
      domina.destroy_children_BANG_.call(null, p1__12083_SHARP_);
      return domina.append_BANG_.call(null, p1__12083_SHARP_, p2__12084_SHARP_);
    });
  };
  var content = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12085__i = 0, G__12085__a = new Array(arguments.length - 0);
      while (G__12085__i < G__12085__a.length) {
        G__12085__a[G__12085__i] = arguments[G__12085__i + 0];
        ++G__12085__i;
      }
      values = new cljs.core.IndexedSeq(G__12085__a, 0);
    }
    return content__delegate.call(this, values);
  };
  content.cljs$lang$maxFixedArity = 0;
  content.cljs$lang$applyTo = function(arglist__12086) {
    var values = cljs.core.seq(arglist__12086);
    return content__delegate(values);
  };
  content.cljs$core$IFn$_invoke$arity$variadic = content__delegate;
  return content;
}();
enfocus.core.html_content = function html_content(txt) {
  return enfocus.core.multi_node_chain.call(null, function(p1__12087_SHARP_) {
    return domina.set_html_BANG_.call(null, p1__12087_SHARP_, txt);
  });
};
enfocus.core.set_attr = function() {
  var set_attr__delegate = function(values) {
    var pairs = cljs.core.partition.call(null, 2, values);
    return enfocus.core.multi_node_chain.call(null, function(pairs) {
      return function(p1__12088_SHARP_) {
        var seq__12095 = cljs.core.seq.call(null, pairs);
        var chunk__12096 = null;
        var count__12097 = 0;
        var i__12098 = 0;
        while (true) {
          if (i__12098 < count__12097) {
            var vec__12099 = cljs.core._nth.call(null, chunk__12096, i__12098);
            var name = cljs.core.nth.call(null, vec__12099, 0, null);
            var value = cljs.core.nth.call(null, vec__12099, 1, null);
            domina.set_attr_BANG_.call(null, p1__12088_SHARP_, name, value);
            var G__12101 = seq__12095;
            var G__12102 = chunk__12096;
            var G__12103 = count__12097;
            var G__12104 = i__12098 + 1;
            seq__12095 = G__12101;
            chunk__12096 = G__12102;
            count__12097 = G__12103;
            i__12098 = G__12104;
            continue;
          } else {
            var temp__4126__auto__ = cljs.core.seq.call(null, seq__12095);
            if (temp__4126__auto__) {
              var seq__12095__$1 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__12095__$1)) {
                var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12095__$1);
                var G__12105 = cljs.core.chunk_rest.call(null, seq__12095__$1);
                var G__12106 = c__4584__auto__;
                var G__12107 = cljs.core.count.call(null, c__4584__auto__);
                var G__12108 = 0;
                seq__12095 = G__12105;
                chunk__12096 = G__12106;
                count__12097 = G__12107;
                i__12098 = G__12108;
                continue;
              } else {
                var vec__12100 = cljs.core.first.call(null, seq__12095__$1);
                var name = cljs.core.nth.call(null, vec__12100, 0, null);
                var value = cljs.core.nth.call(null, vec__12100, 1, null);
                domina.set_attr_BANG_.call(null, p1__12088_SHARP_, name, value);
                var G__12109 = cljs.core.next.call(null, seq__12095__$1);
                var G__12110 = null;
                var G__12111 = 0;
                var G__12112 = 0;
                seq__12095 = G__12109;
                chunk__12096 = G__12110;
                count__12097 = G__12111;
                i__12098 = G__12112;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(pairs));
  };
  var set_attr = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12113__i = 0, G__12113__a = new Array(arguments.length - 0);
      while (G__12113__i < G__12113__a.length) {
        G__12113__a[G__12113__i] = arguments[G__12113__i + 0];
        ++G__12113__i;
      }
      values = new cljs.core.IndexedSeq(G__12113__a, 0);
    }
    return set_attr__delegate.call(this, values);
  };
  set_attr.cljs$lang$maxFixedArity = 0;
  set_attr.cljs$lang$applyTo = function(arglist__12114) {
    var values = cljs.core.seq(arglist__12114);
    return set_attr__delegate(values);
  };
  set_attr.cljs$core$IFn$_invoke$arity$variadic = set_attr__delegate;
  return set_attr;
}();
enfocus.core.remove_attr = function() {
  var remove_attr__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, function(p1__12115_SHARP_) {
      var seq__12120 = cljs.core.seq.call(null, values);
      var chunk__12121 = null;
      var count__12122 = 0;
      var i__12123 = 0;
      while (true) {
        if (i__12123 < count__12122) {
          var name = cljs.core._nth.call(null, chunk__12121, i__12123);
          domina.remove_attr_BANG_.call(null, p1__12115_SHARP_, name);
          var G__12124 = seq__12120;
          var G__12125 = chunk__12121;
          var G__12126 = count__12122;
          var G__12127 = i__12123 + 1;
          seq__12120 = G__12124;
          chunk__12121 = G__12125;
          count__12122 = G__12126;
          i__12123 = G__12127;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__12120);
          if (temp__4126__auto__) {
            var seq__12120__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12120__$1)) {
              var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12120__$1);
              var G__12128 = cljs.core.chunk_rest.call(null, seq__12120__$1);
              var G__12129 = c__4584__auto__;
              var G__12130 = cljs.core.count.call(null, c__4584__auto__);
              var G__12131 = 0;
              seq__12120 = G__12128;
              chunk__12121 = G__12129;
              count__12122 = G__12130;
              i__12123 = G__12131;
              continue;
            } else {
              var name = cljs.core.first.call(null, seq__12120__$1);
              domina.remove_attr_BANG_.call(null, p1__12115_SHARP_, name);
              var G__12132 = cljs.core.next.call(null, seq__12120__$1);
              var G__12133 = null;
              var G__12134 = 0;
              var G__12135 = 0;
              seq__12120 = G__12132;
              chunk__12121 = G__12133;
              count__12122 = G__12134;
              i__12123 = G__12135;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    });
  };
  var remove_attr = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12136__i = 0, G__12136__a = new Array(arguments.length - 0);
      while (G__12136__i < G__12136__a.length) {
        G__12136__a[G__12136__i] = arguments[G__12136__i + 0];
        ++G__12136__i;
      }
      values = new cljs.core.IndexedSeq(G__12136__a, 0);
    }
    return remove_attr__delegate.call(this, values);
  };
  remove_attr.cljs$lang$maxFixedArity = 0;
  remove_attr.cljs$lang$applyTo = function(arglist__12137) {
    var values = cljs.core.seq(arglist__12137);
    return remove_attr__delegate(values);
  };
  remove_attr.cljs$core$IFn$_invoke$arity$variadic = remove_attr__delegate;
  return remove_attr;
}();
enfocus.core.set_prop = function() {
  var set_prop__delegate = function(forms) {
    return function(node) {
      var h = cljs.core.mapcat.call(null, function(p__12140) {
        var vec__12141 = p__12140;
        var n = cljs.core.nth.call(null, vec__12141, 0, null);
        var v = cljs.core.nth.call(null, vec__12141, 1, null);
        return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core.name.call(null, n));
      }, cljs.core.partition.call(null, 2, forms));
      return goog.dom.setProperties(node, cljs.core.apply.call(null, cljs.core.js_obj, h));
    };
  };
  var set_prop = function(var_args) {
    var forms = null;
    if (arguments.length > 0) {
      var G__12142__i = 0, G__12142__a = new Array(arguments.length - 0);
      while (G__12142__i < G__12142__a.length) {
        G__12142__a[G__12142__i] = arguments[G__12142__i + 0];
        ++G__12142__i;
      }
      forms = new cljs.core.IndexedSeq(G__12142__a, 0);
    }
    return set_prop__delegate.call(this, forms);
  };
  set_prop.cljs$lang$maxFixedArity = 0;
  set_prop.cljs$lang$applyTo = function(arglist__12143) {
    var forms = cljs.core.seq(arglist__12143);
    return set_prop__delegate(forms);
  };
  set_prop.cljs$core$IFn$_invoke$arity$variadic = set_prop__delegate;
  return set_prop;
}();
enfocus.core.has_class = function has_class(el, cls) {
  return goog.dom.classes.hasClass(el, cls);
};
enfocus.core.add_class = function() {
  var add_class__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, function(p1__12144_SHARP_) {
      var seq__12149 = cljs.core.seq.call(null, values);
      var chunk__12150 = null;
      var count__12151 = 0;
      var i__12152 = 0;
      while (true) {
        if (i__12152 < count__12151) {
          var val = cljs.core._nth.call(null, chunk__12150, i__12152);
          domina.add_class_BANG_.call(null, p1__12144_SHARP_, val);
          var G__12153 = seq__12149;
          var G__12154 = chunk__12150;
          var G__12155 = count__12151;
          var G__12156 = i__12152 + 1;
          seq__12149 = G__12153;
          chunk__12150 = G__12154;
          count__12151 = G__12155;
          i__12152 = G__12156;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__12149);
          if (temp__4126__auto__) {
            var seq__12149__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12149__$1)) {
              var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12149__$1);
              var G__12157 = cljs.core.chunk_rest.call(null, seq__12149__$1);
              var G__12158 = c__4584__auto__;
              var G__12159 = cljs.core.count.call(null, c__4584__auto__);
              var G__12160 = 0;
              seq__12149 = G__12157;
              chunk__12150 = G__12158;
              count__12151 = G__12159;
              i__12152 = G__12160;
              continue;
            } else {
              var val = cljs.core.first.call(null, seq__12149__$1);
              domina.add_class_BANG_.call(null, p1__12144_SHARP_, val);
              var G__12161 = cljs.core.next.call(null, seq__12149__$1);
              var G__12162 = null;
              var G__12163 = 0;
              var G__12164 = 0;
              seq__12149 = G__12161;
              chunk__12150 = G__12162;
              count__12151 = G__12163;
              i__12152 = G__12164;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    });
  };
  var add_class = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12165__i = 0, G__12165__a = new Array(arguments.length - 0);
      while (G__12165__i < G__12165__a.length) {
        G__12165__a[G__12165__i] = arguments[G__12165__i + 0];
        ++G__12165__i;
      }
      values = new cljs.core.IndexedSeq(G__12165__a, 0);
    }
    return add_class__delegate.call(this, values);
  };
  add_class.cljs$lang$maxFixedArity = 0;
  add_class.cljs$lang$applyTo = function(arglist__12166) {
    var values = cljs.core.seq(arglist__12166);
    return add_class__delegate(values);
  };
  add_class.cljs$core$IFn$_invoke$arity$variadic = add_class__delegate;
  return add_class;
}();
enfocus.core.remove_class = function() {
  var remove_class__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, function(p1__12167_SHARP_) {
      var seq__12172 = cljs.core.seq.call(null, values);
      var chunk__12173 = null;
      var count__12174 = 0;
      var i__12175 = 0;
      while (true) {
        if (i__12175 < count__12174) {
          var val = cljs.core._nth.call(null, chunk__12173, i__12175);
          domina.remove_class_BANG_.call(null, p1__12167_SHARP_, val);
          var G__12176 = seq__12172;
          var G__12177 = chunk__12173;
          var G__12178 = count__12174;
          var G__12179 = i__12175 + 1;
          seq__12172 = G__12176;
          chunk__12173 = G__12177;
          count__12174 = G__12178;
          i__12175 = G__12179;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__12172);
          if (temp__4126__auto__) {
            var seq__12172__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12172__$1)) {
              var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12172__$1);
              var G__12180 = cljs.core.chunk_rest.call(null, seq__12172__$1);
              var G__12181 = c__4584__auto__;
              var G__12182 = cljs.core.count.call(null, c__4584__auto__);
              var G__12183 = 0;
              seq__12172 = G__12180;
              chunk__12173 = G__12181;
              count__12174 = G__12182;
              i__12175 = G__12183;
              continue;
            } else {
              var val = cljs.core.first.call(null, seq__12172__$1);
              domina.remove_class_BANG_.call(null, p1__12167_SHARP_, val);
              var G__12184 = cljs.core.next.call(null, seq__12172__$1);
              var G__12185 = null;
              var G__12186 = 0;
              var G__12187 = 0;
              seq__12172 = G__12184;
              chunk__12173 = G__12185;
              count__12174 = G__12186;
              i__12175 = G__12187;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    });
  };
  var remove_class = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12188__i = 0, G__12188__a = new Array(arguments.length - 0);
      while (G__12188__i < G__12188__a.length) {
        G__12188__a[G__12188__i] = arguments[G__12188__i + 0];
        ++G__12188__i;
      }
      values = new cljs.core.IndexedSeq(G__12188__a, 0);
    }
    return remove_class__delegate.call(this, values);
  };
  remove_class.cljs$lang$maxFixedArity = 0;
  remove_class.cljs$lang$applyTo = function(arglist__12189) {
    var values = cljs.core.seq(arglist__12189);
    return remove_class__delegate(values);
  };
  remove_class.cljs$core$IFn$_invoke$arity$variadic = remove_class__delegate;
  return remove_class;
}();
enfocus.core.set_class = function() {
  var set_class__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, function(p1__12190_SHARP_) {
      return domina.set_classes_BANG_.call(null, p1__12190_SHARP_, values);
    });
  };
  var set_class = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12191__i = 0, G__12191__a = new Array(arguments.length - 0);
      while (G__12191__i < G__12191__a.length) {
        G__12191__a[G__12191__i] = arguments[G__12191__i + 0];
        ++G__12191__i;
      }
      values = new cljs.core.IndexedSeq(G__12191__a, 0);
    }
    return set_class__delegate.call(this, values);
  };
  set_class.cljs$lang$maxFixedArity = 0;
  set_class.cljs$lang$applyTo = function(arglist__12192) {
    var values = cljs.core.seq(arglist__12192);
    return set_class__delegate(values);
  };
  set_class.cljs$core$IFn$_invoke$arity$variadic = set_class__delegate;
  return set_class;
}();
enfocus.core.do__GT_ = function() {
  var do__GT___delegate = function(forms) {
    return function(pnod) {
      var seq__12197 = cljs.core.seq.call(null, forms);
      var chunk__12198 = null;
      var count__12199 = 0;
      var i__12200 = 0;
      while (true) {
        if (i__12200 < count__12199) {
          var fun = cljs.core._nth.call(null, chunk__12198, i__12200);
          enfocus.core.apply_transform.call(null, fun, pnod);
          var G__12201 = seq__12197;
          var G__12202 = chunk__12198;
          var G__12203 = count__12199;
          var G__12204 = i__12200 + 1;
          seq__12197 = G__12201;
          chunk__12198 = G__12202;
          count__12199 = G__12203;
          i__12200 = G__12204;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__12197);
          if (temp__4126__auto__) {
            var seq__12197__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12197__$1)) {
              var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12197__$1);
              var G__12205 = cljs.core.chunk_rest.call(null, seq__12197__$1);
              var G__12206 = c__4584__auto__;
              var G__12207 = cljs.core.count.call(null, c__4584__auto__);
              var G__12208 = 0;
              seq__12197 = G__12205;
              chunk__12198 = G__12206;
              count__12199 = G__12207;
              i__12200 = G__12208;
              continue;
            } else {
              var fun = cljs.core.first.call(null, seq__12197__$1);
              enfocus.core.apply_transform.call(null, fun, pnod);
              var G__12209 = cljs.core.next.call(null, seq__12197__$1);
              var G__12210 = null;
              var G__12211 = 0;
              var G__12212 = 0;
              seq__12197 = G__12209;
              chunk__12198 = G__12210;
              count__12199 = G__12211;
              i__12200 = G__12212;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  };
  var do__GT_ = function(var_args) {
    var forms = null;
    if (arguments.length > 0) {
      var G__12213__i = 0, G__12213__a = new Array(arguments.length - 0);
      while (G__12213__i < G__12213__a.length) {
        G__12213__a[G__12213__i] = arguments[G__12213__i + 0];
        ++G__12213__i;
      }
      forms = new cljs.core.IndexedSeq(G__12213__a, 0);
    }
    return do__GT___delegate.call(this, forms);
  };
  do__GT_.cljs$lang$maxFixedArity = 0;
  do__GT_.cljs$lang$applyTo = function(arglist__12214) {
    var forms = cljs.core.seq(arglist__12214);
    return do__GT___delegate(forms);
  };
  do__GT_.cljs$core$IFn$_invoke$arity$variadic = do__GT___delegate;
  return do__GT_;
}();
enfocus.core.append = function() {
  var append__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, values, function(p1__12215_SHARP_, p2__12216_SHARP_) {
      return domina.append_BANG_.call(null, p1__12215_SHARP_, p2__12216_SHARP_);
    });
  };
  var append = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12217__i = 0, G__12217__a = new Array(arguments.length - 0);
      while (G__12217__i < G__12217__a.length) {
        G__12217__a[G__12217__i] = arguments[G__12217__i + 0];
        ++G__12217__i;
      }
      values = new cljs.core.IndexedSeq(G__12217__a, 0);
    }
    return append__delegate.call(this, values);
  };
  append.cljs$lang$maxFixedArity = 0;
  append.cljs$lang$applyTo = function(arglist__12218) {
    var values = cljs.core.seq(arglist__12218);
    return append__delegate(values);
  };
  append.cljs$core$IFn$_invoke$arity$variadic = append__delegate;
  return append;
}();
enfocus.core.prepend = function() {
  var prepend__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, values, function(p1__12219_SHARP_, p2__12220_SHARP_) {
      return domina.prepend_BANG_.call(null, p1__12219_SHARP_, p2__12220_SHARP_);
    });
  };
  var prepend = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12221__i = 0, G__12221__a = new Array(arguments.length - 0);
      while (G__12221__i < G__12221__a.length) {
        G__12221__a[G__12221__i] = arguments[G__12221__i + 0];
        ++G__12221__i;
      }
      values = new cljs.core.IndexedSeq(G__12221__a, 0);
    }
    return prepend__delegate.call(this, values);
  };
  prepend.cljs$lang$maxFixedArity = 0;
  prepend.cljs$lang$applyTo = function(arglist__12222) {
    var values = cljs.core.seq(arglist__12222);
    return prepend__delegate(values);
  };
  prepend.cljs$core$IFn$_invoke$arity$variadic = prepend__delegate;
  return prepend;
}();
enfocus.core.before = function() {
  var before__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, values, function(p1__12223_SHARP_, p2__12224_SHARP_) {
      return domina.insert_before_BANG_.call(null, p1__12223_SHARP_, p2__12224_SHARP_);
    });
  };
  var before = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12225__i = 0, G__12225__a = new Array(arguments.length - 0);
      while (G__12225__i < G__12225__a.length) {
        G__12225__a[G__12225__i] = arguments[G__12225__i + 0];
        ++G__12225__i;
      }
      values = new cljs.core.IndexedSeq(G__12225__a, 0);
    }
    return before__delegate.call(this, values);
  };
  before.cljs$lang$maxFixedArity = 0;
  before.cljs$lang$applyTo = function(arglist__12226) {
    var values = cljs.core.seq(arglist__12226);
    return before__delegate(values);
  };
  before.cljs$core$IFn$_invoke$arity$variadic = before__delegate;
  return before;
}();
enfocus.core.after = function() {
  var after__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, values, function(p1__12227_SHARP_, p2__12228_SHARP_) {
      return domina.insert_after_BANG_.call(null, p1__12227_SHARP_, p2__12228_SHARP_);
    });
  };
  var after = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12229__i = 0, G__12229__a = new Array(arguments.length - 0);
      while (G__12229__i < G__12229__a.length) {
        G__12229__a[G__12229__i] = arguments[G__12229__i + 0];
        ++G__12229__i;
      }
      values = new cljs.core.IndexedSeq(G__12229__a, 0);
    }
    return after__delegate.call(this, values);
  };
  after.cljs$lang$maxFixedArity = 0;
  after.cljs$lang$applyTo = function(arglist__12230) {
    var values = cljs.core.seq(arglist__12230);
    return after__delegate(values);
  };
  after.cljs$core$IFn$_invoke$arity$variadic = after__delegate;
  return after;
}();
enfocus.core.substitute = function() {
  var substitute__delegate = function(values) {
    return enfocus.core.multi_node_chain.call(null, values, function(p1__12231_SHARP_, p2__12232_SHARP_) {
      return domina.swap_content_BANG_.call(null, p1__12231_SHARP_, p2__12232_SHARP_);
    });
  };
  var substitute = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12233__i = 0, G__12233__a = new Array(arguments.length - 0);
      while (G__12233__i < G__12233__a.length) {
        G__12233__a[G__12233__i] = arguments[G__12233__i + 0];
        ++G__12233__i;
      }
      values = new cljs.core.IndexedSeq(G__12233__a, 0);
    }
    return substitute__delegate.call(this, values);
  };
  substitute.cljs$lang$maxFixedArity = 0;
  substitute.cljs$lang$applyTo = function(arglist__12234) {
    var values = cljs.core.seq(arglist__12234);
    return substitute__delegate(values);
  };
  substitute.cljs$core$IFn$_invoke$arity$variadic = substitute__delegate;
  return substitute;
}();
enfocus.core.remove_node = function remove_node() {
  return enfocus.core.multi_node_chain.call(null, function(p1__12235_SHARP_) {
    return domina.detach_BANG_.call(null, p1__12235_SHARP_);
  });
};
enfocus.core.wrap = function wrap(elm, mattr) {
  return function(pnod) {
    var elem = goog.dom.createElement(cljs.core.name.call(null, elm));
    enfocus.core.add_map_attrs.call(null, elem, mattr);
    enfocus.core.at.call(null, elem, enfocus.core.content.call(null, pnod.cloneNode(true)));
    return enfocus.core.at.call(null, pnod, enfocus.core.do__GT_.call(null, enfocus.core.after.call(null, elem), enfocus.core.remove_node.call(null)));
  };
};
enfocus.core.unwrap = function unwrap() {
  return function(pnod) {
    var frag = document.createDocumentFragment();
    goog.dom.append(frag, pnod.childNodes);
    return goog.dom.replaceNode(frag, pnod);
  };
};
enfocus.core.set_style = function() {
  var set_style__delegate = function(values) {
    var pairs = cljs.core.partition.call(null, 2, values);
    return enfocus.core.multi_node_chain.call(null, function(pairs) {
      return function(p1__12236_SHARP_) {
        var seq__12243 = cljs.core.seq.call(null, pairs);
        var chunk__12244 = null;
        var count__12245 = 0;
        var i__12246 = 0;
        while (true) {
          if (i__12246 < count__12245) {
            var vec__12247 = cljs.core._nth.call(null, chunk__12244, i__12246);
            var name = cljs.core.nth.call(null, vec__12247, 0, null);
            var value = cljs.core.nth.call(null, vec__12247, 1, null);
            domina.set_style_BANG_.call(null, p1__12236_SHARP_, name, value);
            var G__12249 = seq__12243;
            var G__12250 = chunk__12244;
            var G__12251 = count__12245;
            var G__12252 = i__12246 + 1;
            seq__12243 = G__12249;
            chunk__12244 = G__12250;
            count__12245 = G__12251;
            i__12246 = G__12252;
            continue;
          } else {
            var temp__4126__auto__ = cljs.core.seq.call(null, seq__12243);
            if (temp__4126__auto__) {
              var seq__12243__$1 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__12243__$1)) {
                var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12243__$1);
                var G__12253 = cljs.core.chunk_rest.call(null, seq__12243__$1);
                var G__12254 = c__4584__auto__;
                var G__12255 = cljs.core.count.call(null, c__4584__auto__);
                var G__12256 = 0;
                seq__12243 = G__12253;
                chunk__12244 = G__12254;
                count__12245 = G__12255;
                i__12246 = G__12256;
                continue;
              } else {
                var vec__12248 = cljs.core.first.call(null, seq__12243__$1);
                var name = cljs.core.nth.call(null, vec__12248, 0, null);
                var value = cljs.core.nth.call(null, vec__12248, 1, null);
                domina.set_style_BANG_.call(null, p1__12236_SHARP_, name, value);
                var G__12257 = cljs.core.next.call(null, seq__12243__$1);
                var G__12258 = null;
                var G__12259 = 0;
                var G__12260 = 0;
                seq__12243 = G__12257;
                chunk__12244 = G__12258;
                count__12245 = G__12259;
                i__12246 = G__12260;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(pairs));
  };
  var set_style = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12261__i = 0, G__12261__a = new Array(arguments.length - 0);
      while (G__12261__i < G__12261__a.length) {
        G__12261__a[G__12261__i] = arguments[G__12261__i + 0];
        ++G__12261__i;
      }
      values = new cljs.core.IndexedSeq(G__12261__a, 0);
    }
    return set_style__delegate.call(this, values);
  };
  set_style.cljs$lang$maxFixedArity = 0;
  set_style.cljs$lang$applyTo = function(arglist__12262) {
    var values = cljs.core.seq(arglist__12262);
    return set_style__delegate(values);
  };
  set_style.cljs$core$IFn$_invoke$arity$variadic = set_style__delegate;
  return set_style;
}();
enfocus.core.remove_style = function() {
  var remove_style__delegate = function(values) {
    return function(pnod) {
      return enfocus.core.style_remove.call(null, pnod, values);
    };
  };
  var remove_style = function(var_args) {
    var values = null;
    if (arguments.length > 0) {
      var G__12263__i = 0, G__12263__a = new Array(arguments.length - 0);
      while (G__12263__i < G__12263__a.length) {
        G__12263__a[G__12263__i] = arguments[G__12263__i + 0];
        ++G__12263__i;
      }
      values = new cljs.core.IndexedSeq(G__12263__a, 0);
    }
    return remove_style__delegate.call(this, values);
  };
  remove_style.cljs$lang$maxFixedArity = 0;
  remove_style.cljs$lang$applyTo = function(arglist__12264) {
    var values = cljs.core.seq(arglist__12264);
    return remove_style__delegate(values);
  };
  remove_style.cljs$core$IFn$_invoke$arity$variadic = remove_style__delegate;
  return remove_style;
}();
enfocus.core.focus = function focus() {
  return function(node) {
    return node.focus();
  };
};
enfocus.core.blur = function blur() {
  return function(node) {
    return node.blur();
  };
};
enfocus.core.set_data = function set_data(ky, val) {
  return enfocus.core.multi_node_chain.call(null, function(p1__12265_SHARP_) {
    return domina.set_data_BANG_.call(null, p1__12265_SHARP_, ky, val);
  });
};
enfocus.core.delay = function() {
  var delay__delegate = function(ttime, funcs) {
    return function(pnod) {
      return enfocus.core.setTimeout.call(null, function() {
        return cljs.core.apply.call(null, enfocus.core.at, pnod, funcs);
      }, ttime);
    };
  };
  var delay = function(ttime, var_args) {
    var funcs = null;
    if (arguments.length > 1) {
      var G__12266__i = 0, G__12266__a = new Array(arguments.length - 1);
      while (G__12266__i < G__12266__a.length) {
        G__12266__a[G__12266__i] = arguments[G__12266__i + 1];
        ++G__12266__i;
      }
      funcs = new cljs.core.IndexedSeq(G__12266__a, 0);
    }
    return delay__delegate.call(this, ttime, funcs);
  };
  delay.cljs$lang$maxFixedArity = 1;
  delay.cljs$lang$applyTo = function(arglist__12267) {
    var ttime = cljs.core.first(arglist__12267);
    var funcs = cljs.core.rest(arglist__12267);
    return delay__delegate(ttime, funcs);
  };
  delay.cljs$core$IFn$_invoke$arity$variadic = delay__delegate;
  return delay;
}();
enfocus.core.replace_vars = function replace_vars(vars) {
  var rep_str = function rep_str(text) {
    return clojure.string.replace.call(null, text, /\$\{\s*(\S+)\s*}/, function(p1__12269_SHARP_, p2__12268_SHARP_) {
      return vars.call(null, cljs.core.keyword.call(null, p2__12268_SHARP_));
    });
  };
  return function rep_node(pnod) {
    if (cljs.core.truth_(pnod.attributes)) {
      var seq__12294_12302 = cljs.core.seq.call(null, cljs.core.range.call(null, pnod.attributes.length));
      var chunk__12295_12303 = null;
      var count__12296_12304 = 0;
      var i__12297_12305 = 0;
      while (true) {
        if (i__12297_12305 < count__12296_12304) {
          var idx_12306 = cljs.core._nth.call(null, chunk__12295_12303, i__12297_12305);
          var attr_12307 = pnod.attributes.item(idx_12306);
          if (cljs.core.truth_(attr_12307.specified)) {
            attr_12307.value = rep_str.call(null, attr_12307.value);
          } else {
          }
          var G__12308 = seq__12294_12302;
          var G__12309 = chunk__12295_12303;
          var G__12310 = count__12296_12304;
          var G__12311 = i__12297_12305 + 1;
          seq__12294_12302 = G__12308;
          chunk__12295_12303 = G__12309;
          count__12296_12304 = G__12310;
          i__12297_12305 = G__12311;
          continue;
        } else {
          var temp__4126__auto___12312 = cljs.core.seq.call(null, seq__12294_12302);
          if (temp__4126__auto___12312) {
            var seq__12294_12313__$1 = temp__4126__auto___12312;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12294_12313__$1)) {
              var c__4584__auto___12314 = cljs.core.chunk_first.call(null, seq__12294_12313__$1);
              var G__12315 = cljs.core.chunk_rest.call(null, seq__12294_12313__$1);
              var G__12316 = c__4584__auto___12314;
              var G__12317 = cljs.core.count.call(null, c__4584__auto___12314);
              var G__12318 = 0;
              seq__12294_12302 = G__12315;
              chunk__12295_12303 = G__12316;
              count__12296_12304 = G__12317;
              i__12297_12305 = G__12318;
              continue;
            } else {
              var idx_12319 = cljs.core.first.call(null, seq__12294_12313__$1);
              var attr_12320 = pnod.attributes.item(idx_12319);
              if (cljs.core.truth_(attr_12320.specified)) {
                attr_12320.value = rep_str.call(null, attr_12320.value);
              } else {
              }
              var G__12321 = cljs.core.next.call(null, seq__12294_12313__$1);
              var G__12322 = null;
              var G__12323 = 0;
              var G__12324 = 0;
              seq__12294_12302 = G__12321;
              chunk__12295_12303 = G__12322;
              count__12296_12304 = G__12323;
              i__12297_12305 = G__12324;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
    }
    if (cljs.core._EQ_.call(null, pnod.nodeType, 3)) {
      return pnod.nodeValue = rep_str.call(null, pnod.nodeValue);
    } else {
      var seq__12298 = cljs.core.seq.call(null, enfocus.core.nodes__GT_coll.call(null, pnod.childNodes));
      var chunk__12299 = null;
      var count__12300 = 0;
      var i__12301 = 0;
      while (true) {
        if (i__12301 < count__12300) {
          var cnode = cljs.core._nth.call(null, chunk__12299, i__12301);
          rep_node.call(null, cnode);
          var G__12325 = seq__12298;
          var G__12326 = chunk__12299;
          var G__12327 = count__12300;
          var G__12328 = i__12301 + 1;
          seq__12298 = G__12325;
          chunk__12299 = G__12326;
          count__12300 = G__12327;
          i__12301 = G__12328;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__12298);
          if (temp__4126__auto__) {
            var seq__12298__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12298__$1)) {
              var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12298__$1);
              var G__12329 = cljs.core.chunk_rest.call(null, seq__12298__$1);
              var G__12330 = c__4584__auto__;
              var G__12331 = cljs.core.count.call(null, c__4584__auto__);
              var G__12332 = 0;
              seq__12298 = G__12329;
              chunk__12299 = G__12330;
              count__12300 = G__12331;
              i__12301 = G__12332;
              continue;
            } else {
              var cnode = cljs.core.first.call(null, seq__12298__$1);
              rep_node.call(null, cnode);
              var G__12333 = cljs.core.next.call(null, seq__12298__$1);
              var G__12334 = null;
              var G__12335 = 0;
              var G__12336 = 0;
              seq__12298 = G__12333;
              chunk__12299 = G__12334;
              count__12300 = G__12335;
              i__12301 = G__12336;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    }
  };
};
enfocus.core.exists_in_QMARK_ = function exists_in_QMARK_(col_or_val, val) {
  if (cljs.core.coll_QMARK_.call(null, col_or_val)) {
    return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([val], true), col_or_val);
  } else {
    return cljs.core._EQ_.call(null, col_or_val, val);
  }
};
enfocus.core.set_form_input = function set_form_input(val) {
  return function(el) {
    if (cljs.core._EQ_.call(null, el.type, "checkbox") || cljs.core._EQ_.call(null, el.type, "radio")) {
      return el.checked = enfocus.core.exists_in_QMARK_.call(null, val, el.value);
    } else {
      var nval = cljs.core.coll_QMARK_.call(null, val) && !(typeof val === "string") ? cljs.core.vec.call(null, val) : cljs.core._EQ_.call(null, el.type, "select-multiple") ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [val], null) : val;
      return goog.dom.forms.setValue(el, cljs.core.clj__GT_js.call(null, nval));
    }
  };
};
enfocus.core.set_form = function set_form(value_map) {
  return function(form_node) {
    if (cljs.core._EQ_.call(null, form_node.nodeName, "FORM")) {
      var seq__12341 = cljs.core.seq.call(null, cljs.core.range.call(null, form_node.length));
      var chunk__12342 = null;
      var count__12343 = 0;
      var i__12344 = 0;
      while (true) {
        if (i__12344 < count__12343) {
          var idx = cljs.core._nth.call(null, chunk__12342, i__12344);
          var el_12345 = form_node.elements[idx];
          var ky_12346 = cljs.core.keyword.call(null, el_12345.name);
          var val_12347 = ky_12346.call(null, value_map);
          if (cljs.core.contains_QMARK_.call(null, value_map, ky_12346)) {
            var val_12348__$1 = cljs.core.truth_(val_12347) ? val_12347 : "";
            enfocus.core.set_form_input.call(null, val_12348__$1).call(null, el_12345);
          } else {
          }
          var G__12349 = seq__12341;
          var G__12350 = chunk__12342;
          var G__12351 = count__12343;
          var G__12352 = i__12344 + 1;
          seq__12341 = G__12349;
          chunk__12342 = G__12350;
          count__12343 = G__12351;
          i__12344 = G__12352;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__12341);
          if (temp__4126__auto__) {
            var seq__12341__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12341__$1)) {
              var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12341__$1);
              var G__12353 = cljs.core.chunk_rest.call(null, seq__12341__$1);
              var G__12354 = c__4584__auto__;
              var G__12355 = cljs.core.count.call(null, c__4584__auto__);
              var G__12356 = 0;
              seq__12341 = G__12353;
              chunk__12342 = G__12354;
              count__12343 = G__12355;
              i__12344 = G__12356;
              continue;
            } else {
              var idx = cljs.core.first.call(null, seq__12341__$1);
              var el_12357 = form_node.elements[idx];
              var ky_12358 = cljs.core.keyword.call(null, el_12357.name);
              var val_12359 = ky_12358.call(null, value_map);
              if (cljs.core.contains_QMARK_.call(null, value_map, ky_12358)) {
                var val_12360__$1 = cljs.core.truth_(val_12359) ? val_12359 : "";
                enfocus.core.set_form_input.call(null, val_12360__$1).call(null, el_12357);
              } else {
              }
              var G__12361 = cljs.core.next.call(null, seq__12341__$1);
              var G__12362 = null;
              var G__12363 = 0;
              var G__12364 = 0;
              seq__12341 = G__12361;
              chunk__12342 = G__12362;
              count__12343 = G__12363;
              i__12344 = G__12364;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  };
};
enfocus.core.html = function html(node_spec) {
  if (typeof node_spec === "string") {
    return document.createTextNode(node_spec);
  } else {
    if (cljs.core.vector_QMARK_.call(null, node_spec)) {
      var vec__12374 = node_spec;
      var tag = cljs.core.nth.call(null, vec__12374, 0, null);
      var vec__12375 = cljs.core.nthnext.call(null, vec__12374, 1);
      var m = cljs.core.nth.call(null, vec__12375, 0, null);
      var ms = cljs.core.nthnext.call(null, vec__12375, 1);
      var more = vec__12375;
      var vec__12376 = cljs.core.name.call(null, tag).split(/(?=[#.])/);
      var tag_name = cljs.core.nth.call(null, vec__12376, 0, null);
      var segments = cljs.core.nthnext.call(null, vec__12376, 1);
      var id = cljs.core.some.call(null, function(vec__12374, tag, vec__12375, m, ms, more, vec__12376, tag_name, segments) {
        return function(seg) {
          if (cljs.core._EQ_.call(null, "#", seg.charAt(0))) {
            return cljs.core.subs.call(null, seg, 1);
          } else {
            return null;
          }
        };
      }(vec__12374, tag, vec__12375, m, ms, more, vec__12376, tag_name, segments), segments);
      var classes = cljs.core.keep.call(null, function(vec__12374, tag, vec__12375, m, ms, more, vec__12376, tag_name, segments, id) {
        return function(seg) {
          if (cljs.core._EQ_.call(null, ".", seg.charAt(0))) {
            return cljs.core.subs.call(null, seg, 1);
          } else {
            return null;
          }
        };
      }(vec__12374, tag, vec__12375, m, ms, more, vec__12376, tag_name, segments, id), segments);
      var attrs = cljs.core.map_QMARK_.call(null, m) ? m : cljs.core.PersistentArrayMap.EMPTY;
      var attrs__$1 = cljs.core.truth_(id) ? cljs.core.assoc.call(null, attrs, new cljs.core.Keyword(null, "id", "id", -1388402092), id) : attrs;
      var attrs__$2 = !cljs.core.empty_QMARK_.call(null, classes) ? cljs.core.assoc.call(null, attrs__$1, new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", classes))) : attrs__$1;
      var content = cljs.core.flatten.call(null, cljs.core.map.call(null, html, cljs.core.map_QMARK_.call(null, m) ? ms : more));
      var node = document.createElement(tag_name);
      var seq__12377_12383 = cljs.core.seq.call(null, attrs__$2);
      var chunk__12378_12384 = null;
      var count__12379_12385 = 0;
      var i__12380_12386 = 0;
      while (true) {
        if (i__12380_12386 < count__12379_12385) {
          var vec__12381_12387 = cljs.core._nth.call(null, chunk__12378_12384, i__12380_12386);
          var key_12388 = cljs.core.nth.call(null, vec__12381_12387, 0, null);
          var val_12389 = cljs.core.nth.call(null, vec__12381_12387, 1, null);
          node.setAttribute(cljs.core.name.call(null, key_12388), val_12389);
          var G__12390 = seq__12377_12383;
          var G__12391 = chunk__12378_12384;
          var G__12392 = count__12379_12385;
          var G__12393 = i__12380_12386 + 1;
          seq__12377_12383 = G__12390;
          chunk__12378_12384 = G__12391;
          count__12379_12385 = G__12392;
          i__12380_12386 = G__12393;
          continue;
        } else {
          var temp__4126__auto___12394 = cljs.core.seq.call(null, seq__12377_12383);
          if (temp__4126__auto___12394) {
            var seq__12377_12395__$1 = temp__4126__auto___12394;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12377_12395__$1)) {
              var c__4584__auto___12396 = cljs.core.chunk_first.call(null, seq__12377_12395__$1);
              var G__12397 = cljs.core.chunk_rest.call(null, seq__12377_12395__$1);
              var G__12398 = c__4584__auto___12396;
              var G__12399 = cljs.core.count.call(null, c__4584__auto___12396);
              var G__12400 = 0;
              seq__12377_12383 = G__12397;
              chunk__12378_12384 = G__12398;
              count__12379_12385 = G__12399;
              i__12380_12386 = G__12400;
              continue;
            } else {
              var vec__12382_12401 = cljs.core.first.call(null, seq__12377_12395__$1);
              var key_12402 = cljs.core.nth.call(null, vec__12382_12401, 0, null);
              var val_12403 = cljs.core.nth.call(null, vec__12382_12401, 1, null);
              node.setAttribute(cljs.core.name.call(null, key_12402), val_12403);
              var G__12404 = cljs.core.next.call(null, seq__12377_12395__$1);
              var G__12405 = null;
              var G__12406 = 0;
              var G__12407 = 0;
              seq__12377_12383 = G__12404;
              chunk__12378_12384 = G__12405;
              count__12379_12385 = G__12406;
              i__12380_12386 = G__12407;
              continue;
            }
          } else {
          }
        }
        break;
      }
      if (cljs.core.truth_(content)) {
        return domina.append_BANG_.call(null, node, content);
      } else {
        return null;
      }
    } else {
      if (cljs.core.sequential_QMARK_.call(null, node_spec)) {
        return cljs.core.flatten.call(null, cljs.core.map.call(null, html, node_spec));
      } else {
        return document.createTextNode([cljs.core.str(node_spec)].join(""));
      }
    }
  }
};
enfocus.core.get_attr = function get_attr(attr) {
  return enfocus.core.extr_multi_node.call(null, function(pnod) {
    return pnod.getAttribute(cljs.core.name.call(null, attr));
  });
};
enfocus.core.get_text = function get_text() {
  return enfocus.core.extr_multi_node.call(null, function(pnod) {
    return goog.dom.getTextContent(pnod);
  });
};
enfocus.core.get_data = function() {
  var get_data = null;
  var get_data__1 = function(ky) {
    return get_data.call(null, ky, false);
  };
  var get_data__2 = function(ky, bubble) {
    return enfocus.core.extr_multi_node.call(null, function(node) {
      return domina.get_data.call(null, node, ky, bubble);
    });
  };
  get_data = function(ky, bubble) {
    switch(arguments.length) {
      case 1:
        return get_data__1.call(this, ky);
      case 2:
        return get_data__2.call(this, ky, bubble);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_data.cljs$core$IFn$_invoke$arity$1 = get_data__1;
  get_data.cljs$core$IFn$_invoke$arity$2 = get_data__2;
  return get_data;
}();
enfocus.core.get_prop = function get_prop(prop) {
  return enfocus.core.extr_multi_node.call(null, function(pnod) {
    return pnod[cljs.core.name.call(null, prop)];
  });
};
enfocus.core.merge_form_val = function merge_form_val(form_map, ky, val) {
  var mval = form_map.call(null, ky);
  if (cljs.core.truth_(val)) {
    if (cljs.core.coll_QMARK_.call(null, mval) && cljs.core.coll_QMARK_.call(null, val)) {
      return cljs.core.assoc.call(null, form_map, ky, cljs.core.into.call(null, mval, val));
    } else {
      if (cljs.core.coll_QMARK_.call(null, mval)) {
        return cljs.core.assoc.call(null, form_map, ky, cljs.core.conj.call(null, mval, val));
      } else {
        if (cljs.core.truth_(mval)) {
          return cljs.core.assoc.call(null, form_map, ky, cljs.core.PersistentHashSet.fromArray([mval, val], true));
        } else {
          return cljs.core.assoc.call(null, form_map, ky, val);
        }
      }
    }
  } else {
    return form_map;
  }
};
enfocus.core.read_form_input = function read_form_input() {
  var trans = function(nodes, chain) {
    var nod_col = enfocus.core.nodes__GT_coll.call(null, nodes);
    var result = cljs.core.reduce.call(null, function(nod_col) {
      return function(p1__12409_SHARP_, p2__12408_SHARP_) {
        var vals = cljs.core.js__GT_clj.call(null, goog.dom.forms.getValue(p2__12408_SHARP_));
        if (!(typeof vals === "string") && cljs.core.coll_QMARK_.call(null, vals)) {
          return cljs.core.into.call(null, p1__12409_SHARP_, vals);
        } else {
          if (cljs.core.truth_(vals)) {
            return cljs.core.conj.call(null, p1__12409_SHARP_, vals);
          } else {
            return p1__12409_SHARP_;
          }
        }
      };
    }(nod_col), cljs.core.PersistentHashSet.EMPTY, nod_col);
    if (cljs.core.empty_QMARK_.call(null, result)) {
      return null;
    } else {
      if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, result)) && cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["checkbox", null, "select-multiple", null], null), null)).call(null, cljs.core.first.call(null, nod_col).type))) {
        return cljs.core.first.call(null, result);
      } else {
        return result;
      }
    }
  };
  if (typeof enfocus.core.t12414 !== "undefined") {
  } else {
    enfocus.core.t12414 = function(trans, read_form_input, meta12415) {
      this.trans = trans;
      this.read_form_input = read_form_input;
      this.meta12415 = meta12415;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393217;
    };
    enfocus.core.t12414.prototype.call = function(trans) {
      return function() {
        var G__12418 = null;
        var G__12418__2 = function(self__, nodes) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, null);
        };
        var G__12418__3 = function(self__, nodes, chain) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, chain);
        };
        G__12418 = function(self__, nodes, chain) {
          switch(arguments.length) {
            case 2:
              return G__12418__2.call(this, self__, nodes);
            case 3:
              return G__12418__3.call(this, self__, nodes, chain);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__12418.cljs$core$IFn$_invoke$arity$2 = G__12418__2;
        G__12418.cljs$core$IFn$_invoke$arity$3 = G__12418__3;
        return G__12418;
      }();
    }(trans);
    enfocus.core.t12414.prototype.apply = function(trans) {
      return function(self__, args12417) {
        var self__ = this;
        var self____$1 = this;
        return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12417)));
      };
    }(trans);
    enfocus.core.t12414.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
      return function(nodes) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t12414.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
      return function(nodes, chain) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t12414.prototype.enfocus$core$ITransform$ = true;
    enfocus.core.t12414.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t12414.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t12414.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_12416) {
        var self__ = this;
        var _12416__$1 = this;
        return self__.meta12415;
      };
    }(trans);
    enfocus.core.t12414.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_12416, meta12415__$1) {
        var self__ = this;
        var _12416__$1 = this;
        return new enfocus.core.t12414(self__.trans, self__.read_form_input, meta12415__$1);
      };
    }(trans);
    enfocus.core.t12414.cljs$lang$type = true;
    enfocus.core.t12414.cljs$lang$ctorStr = "enfocus.core/t12414";
    enfocus.core.t12414.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
        return cljs.core._write.call(null, writer__4385__auto__, "enfocus.core/t12414");
      };
    }(trans);
    enfocus.core.__GT_t12414 = function(trans) {
      return function __GT_t12414(trans__$1, read_form_input__$1, meta12415) {
        return new enfocus.core.t12414(trans__$1, read_form_input__$1, meta12415);
      };
    }(trans);
  }
  return new enfocus.core.t12414(trans, read_form_input, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 53, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 590, new cljs.core.Keyword(null, "column", "column", 2078222095), 5, new cljs.core.Keyword(null, "line", "line", 212345235), 584, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/enfocus/core.cljs"], 
  null));
};
enfocus.core.read_form = function read_form() {
  return enfocus.core.extr_multi_node.call(null, function(node) {
    var inputs = node.elements;
    return cljs.core.reduce.call(null, function(inputs) {
      return function(p1__12420_SHARP_, p2__12419_SHARP_) {
        if (!cljs.core.empty_QMARK_.call(null, inputs.item(p2__12419_SHARP_).name)) {
          return enfocus.core.merge_form_val.call(null, p1__12420_SHARP_, cljs.core.keyword.call(null, inputs.item(p2__12419_SHARP_).name), enfocus.core.read_form_input.call(null).call(null, inputs.item(p2__12419_SHARP_)));
        } else {
          return p1__12420_SHARP_;
        }
      };
    }(inputs), cljs.core.PersistentArrayMap.EMPTY, cljs.core.range.call(null, inputs.length));
  });
};
enfocus.core.reg_filt = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
enfocus.core.filter = function filter(tst, trans) {
  return enfocus.core.multi_node_chain.call(null, function() {
    var filt = null;
    var filt__1 = function(pnodes) {
      return filt.call(null, pnodes, null);
    };
    var filt__2 = function(pnodes, chain) {
      var pnod_col = enfocus.core.nodes__GT_coll.call(null, pnodes);
      var ttest = tst instanceof cljs.core.Keyword ? cljs.core.deref.call(null, enfocus.core.reg_filt).call(null, tst) : tst;
      var res = cljs.core.filter.call(null, ttest, pnod_col);
      if (chain == null) {
        return enfocus.core.apply_transform.call(null, trans, res);
      } else {
        return enfocus.core.apply_transform.call(null, trans, res, chain);
      }
    };
    filt = function(pnodes, chain) {
      switch(arguments.length) {
        case 1:
          return filt__1.call(this, pnodes);
        case 2:
          return filt__2.call(this, pnodes, chain);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    filt.cljs$core$IFn$_invoke$arity$1 = filt__1;
    filt.cljs$core$IFn$_invoke$arity$2 = filt__2;
    return filt;
  }());
};
enfocus.core.register_filter = function register_filter(ky, func) {
  return cljs.core.swap_BANG_.call(null, enfocus.core.reg_filt, cljs.core.assoc, ky, func);
};
enfocus.core.selected_options = function selected_options(pnod) {
  return pnod.selected;
};
enfocus.core.checked_radio_checkbox = function checked_radio_checkbox(pnod) {
  return pnod.checked;
};
enfocus.core.register_filter.call(null, new cljs.core.Keyword(null, "selected", "selected", 574897764), enfocus.core.selected_options);
enfocus.core.register_filter.call(null, new cljs.core.Keyword(null, "checked", "checked", -50955819), enfocus.core.checked_radio_checkbox);
enfocus.core.match_QMARK_ = function match_QMARK_(selector) {
  return function(node) {
    if (cljs.core.truth_(node["matches"])) {
      return node.matches(selector);
    } else {
      if (cljs.core.truth_(node["matchesSelector"])) {
        return node.matchesSelector(selector);
      } else {
        if (cljs.core.truth_(node["msMatchesSelector"])) {
          return node.msMatchesSelector(selector);
        } else {
          if (cljs.core.truth_(node["mozMatchesSelector"])) {
            return node.mozMatchesSelector(selector);
          } else {
            if (cljs.core.truth_(node["webkitMatchesSelector"])) {
              return node.webkitMatchesSelector(selector);
            } else {
              return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([node], true), enfocus.core.nodes__GT_coll.call(null, enfocus.core.select.call(null, node)));
            }
          }
        }
      }
    }
  };
};
enfocus.core.create_sel_str = function() {
  var create_sel_str = null;
  var create_sel_str__1 = function(css_sel) {
    return create_sel_str.call(null, "", css_sel);
  };
  var create_sel_str__2 = function(id_mask_sym, css_sel) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(p1__12421_SHARP_) {
      if (p1__12421_SHARP_ instanceof cljs.core.Symbol) {
        return enfocus.core.css_syms.call(null, p1__12421_SHARP_);
      } else {
        if (p1__12421_SHARP_ instanceof cljs.core.Keyword) {
          return[cljs.core.str(" "), cljs.core.str(cljs.core.name.call(null, p1__12421_SHARP_).replace("#", [cljs.core.str("#"), cljs.core.str(id_mask_sym)].join("")))].join("");
        } else {
          if (cljs.core.vector_QMARK_.call(null, p1__12421_SHARP_)) {
            return create_sel_str.call(null, p1__12421_SHARP_);
          } else {
            if (typeof p1__12421_SHARP_ === "string") {
              return p1__12421_SHARP_.replace("#", [cljs.core.str("#"), cljs.core.str(id_mask_sym)].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }, css_sel));
  };
  create_sel_str = function(id_mask_sym, css_sel) {
    switch(arguments.length) {
      case 1:
        return create_sel_str__1.call(this, id_mask_sym);
      case 2:
        return create_sel_str__2.call(this, id_mask_sym, css_sel);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_sel_str.cljs$core$IFn$_invoke$arity$1 = create_sel_str__1;
  create_sel_str.cljs$core$IFn$_invoke$arity$2 = create_sel_str__2;
  return create_sel_str;
}();
enfocus.core.css_select = function() {
  var css_select = null;
  var css_select__1 = function(css_sel) {
    return css_select.call(null, "", document, css_sel);
  };
  var css_select__2 = function(dom_node, css_sel) {
    return css_select.call(null, "", dom_node, css_sel);
  };
  var css_select__3 = function(id_mask_sym, dom_node, css_sel) {
    var sel = clojure.string.trim.call(null, enfocus.enlive.syntax.convert.call(null, enfocus.core.create_sel_str.call(null, id_mask_sym, css_sel)));
    var ret = domina.css.sel.call(null, dom_node, sel);
    return ret;
  };
  css_select = function(id_mask_sym, dom_node, css_sel) {
    switch(arguments.length) {
      case 1:
        return css_select__1.call(this, id_mask_sym);
      case 2:
        return css_select__2.call(this, id_mask_sym, dom_node);
      case 3:
        return css_select__3.call(this, id_mask_sym, dom_node, css_sel);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  css_select.cljs$core$IFn$_invoke$arity$1 = css_select__1;
  css_select.cljs$core$IFn$_invoke$arity$2 = css_select__2;
  css_select.cljs$core$IFn$_invoke$arity$3 = css_select__3;
  return css_select;
}();
enfocus.core.nil_t = function nil_t(func) {
  var or__3797__auto__ = func;
  if (cljs.core.truth_(or__3797__auto__)) {
    return or__3797__auto__;
  } else {
    return enfocus.core.remove_node;
  }
};
enfocus.core.i_at = function() {
  var i_at__delegate = function(id_mask, node, trans) {
    var cnt = cljs.core.count.call(null, trans);
    var sel_QMARK_ = function() {
      var and__3785__auto__ = !(node == null);
      if (and__3785__auto__) {
        var G__12432 = node;
        if (G__12432) {
          var bit__4478__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3797__auto__ = bit__4478__auto__;
            if (cljs.core.truth_(or__3797__auto__)) {
              return or__3797__auto__;
            } else {
              return G__12432.enfocus$core$ISelector$;
            }
          }())) {
            return true;
          } else {
            if (!G__12432.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, G__12432);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, G__12432);
        }
      } else {
        return and__3785__auto__;
      }
    }();
    if (!sel_QMARK_ && cljs.core._EQ_.call(null, 1, cnt)) {
      return enfocus.core.apply_transform.call(null, cljs.core.first.call(null, trans), node);
    } else {
      var vec__12433 = sel_QMARK_ ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.conj.call(null, trans, node)), document) : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, trans), node);
      var node__$1 = cljs.core.nth.call(null, vec__12433, 0, null);
      var trans__$1 = cljs.core.nth.call(null, vec__12433, 1, null);
      var seq__12434 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, trans__$1));
      var chunk__12435 = null;
      var count__12436 = 0;
      var i__12437 = 0;
      while (true) {
        if (i__12437 < count__12436) {
          var vec__12438 = cljs.core._nth.call(null, chunk__12435, i__12437);
          var sel = cljs.core.nth.call(null, vec__12438, 0, null);
          var t = cljs.core.nth.call(null, vec__12438, 1, null);
          enfocus.core.apply_transform.call(null, enfocus.core.nil_t.call(null, t), enfocus.core.select.call(null, sel, node__$1, id_mask));
          var G__12440 = seq__12434;
          var G__12441 = chunk__12435;
          var G__12442 = count__12436;
          var G__12443 = i__12437 + 1;
          seq__12434 = G__12440;
          chunk__12435 = G__12441;
          count__12436 = G__12442;
          i__12437 = G__12443;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__12434);
          if (temp__4126__auto__) {
            var seq__12434__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12434__$1)) {
              var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__12434__$1);
              var G__12444 = cljs.core.chunk_rest.call(null, seq__12434__$1);
              var G__12445 = c__4584__auto__;
              var G__12446 = cljs.core.count.call(null, c__4584__auto__);
              var G__12447 = 0;
              seq__12434 = G__12444;
              chunk__12435 = G__12445;
              count__12436 = G__12446;
              i__12437 = G__12447;
              continue;
            } else {
              var vec__12439 = cljs.core.first.call(null, seq__12434__$1);
              var sel = cljs.core.nth.call(null, vec__12439, 0, null);
              var t = cljs.core.nth.call(null, vec__12439, 1, null);
              enfocus.core.apply_transform.call(null, enfocus.core.nil_t.call(null, t), enfocus.core.select.call(null, sel, node__$1, id_mask));
              var G__12448 = cljs.core.next.call(null, seq__12434__$1);
              var G__12449 = null;
              var G__12450 = 0;
              var G__12451 = 0;
              seq__12434 = G__12448;
              chunk__12435 = G__12449;
              count__12436 = G__12450;
              i__12437 = G__12451;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    }
  };
  var i_at = function(id_mask, node, var_args) {
    var trans = null;
    if (arguments.length > 2) {
      var G__12452__i = 0, G__12452__a = new Array(arguments.length - 2);
      while (G__12452__i < G__12452__a.length) {
        G__12452__a[G__12452__i] = arguments[G__12452__i + 2];
        ++G__12452__i;
      }
      trans = new cljs.core.IndexedSeq(G__12452__a, 0);
    }
    return i_at__delegate.call(this, id_mask, node, trans);
  };
  i_at.cljs$lang$maxFixedArity = 2;
  i_at.cljs$lang$applyTo = function(arglist__12453) {
    var id_mask = cljs.core.first(arglist__12453);
    arglist__12453 = cljs.core.next(arglist__12453);
    var node = cljs.core.first(arglist__12453);
    var trans = cljs.core.rest(arglist__12453);
    return i_at__delegate(id_mask, node, trans);
  };
  i_at.cljs$core$IFn$_invoke$arity$variadic = i_at__delegate;
  return i_at;
}();
enfocus.core.at = function() {
  var at__delegate = function(node, trans) {
    return cljs.core.apply.call(null, enfocus.core.i_at, "", node, trans);
  };
  var at = function(node, var_args) {
    var trans = null;
    if (arguments.length > 1) {
      var G__12454__i = 0, G__12454__a = new Array(arguments.length - 1);
      while (G__12454__i < G__12454__a.length) {
        G__12454__a[G__12454__i] = arguments[G__12454__i + 1];
        ++G__12454__i;
      }
      trans = new cljs.core.IndexedSeq(G__12454__a, 0);
    }
    return at__delegate.call(this, node, trans);
  };
  at.cljs$lang$maxFixedArity = 1;
  at.cljs$lang$applyTo = function(arglist__12455) {
    var node = cljs.core.first(arglist__12455);
    var trans = cljs.core.rest(arglist__12455);
    return at__delegate(node, trans);
  };
  at.cljs$core$IFn$_invoke$arity$variadic = at__delegate;
  return at;
}();
enfocus.core.from = function() {
  var from__delegate = function(node, trans) {
    var cnt = cljs.core.count.call(null, trans);
    var sel_QMARK_ = function() {
      var G__12460 = node;
      if (G__12460) {
        var bit__4478__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3797__auto__ = bit__4478__auto__;
          if (cljs.core.truth_(or__3797__auto__)) {
            return or__3797__auto__;
          } else {
            return G__12460.enfocus$core$ISelector$;
          }
        }())) {
          return true;
        } else {
          if (!G__12460.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, G__12460);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, G__12460);
      }
    }();
    if (sel_QMARK_ && cljs.core._EQ_.call(null, 1, cnt)) {
      return enfocus.core.apply_transform.call(null, cljs.core.first.call(null, trans), enfocus.core.select.call(null, node));
    } else {
      if (cljs.core._EQ_.call(null, 1, cnt)) {
        return enfocus.core.apply_transform.call(null, cljs.core.first.call(null, trans), node);
      } else {
        var vec__12461 = sel_QMARK_ ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.conj.call(null, trans, node)), document) : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, trans), node);
        var node__$1 = cljs.core.nth.call(null, vec__12461, 0, null);
        var trans__$1 = cljs.core.nth.call(null, vec__12461, 1, null);
        return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(vec__12461, node__$1, trans__$1, cnt, sel_QMARK_) {
          return function(p__12462) {
            var vec__12463 = p__12462;
            var ky = cljs.core.nth.call(null, vec__12463, 0, null);
            var sel = cljs.core.nth.call(null, vec__12463, 1, null);
            var ext = cljs.core.nth.call(null, vec__12463, 2, null);
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ky, enfocus.core.apply_transform.call(null, ext, enfocus.core.select.call(null, sel, node__$1, ""))], null);
          };
        }(vec__12461, node__$1, trans__$1, cnt, sel_QMARK_), cljs.core.partition.call(null, 3, trans__$1)));
      }
    }
  };
  var from = function(node, var_args) {
    var trans = null;
    if (arguments.length > 1) {
      var G__12464__i = 0, G__12464__a = new Array(arguments.length - 1);
      while (G__12464__i < G__12464__a.length) {
        G__12464__a[G__12464__i] = arguments[G__12464__i + 1];
        ++G__12464__i;
      }
      trans = new cljs.core.IndexedSeq(G__12464__a, 0);
    }
    return from__delegate.call(this, node, trans);
  };
  from.cljs$lang$maxFixedArity = 1;
  from.cljs$lang$applyTo = function(arglist__12465) {
    var node = cljs.core.first(arglist__12465);
    var trans = cljs.core.rest(arglist__12465);
    return from__delegate(node, trans);
  };
  from.cljs$core$IFn$_invoke$arity$variadic = from__delegate;
  return from;
}();
enfocus.core.xpath = function xpath(path) {
  return function(root, id_mask) {
    if (cljs.core.empty_QMARK_.call(null, id_mask)) {
      return domina.xpath.xpath.call(null, root, path);
    } else {
      var tmp = path.replace("@ID\x3d'", [cljs.core.str("@ID\x3d'"), cljs.core.str(id_mask)].join(""));
      var mpath = path.replace("@id\x3d'", [cljs.core.str("@id\x3d'"), cljs.core.str(id_mask)].join(""));
      return domina.xpath.xpath.call(null, root, mpath);
    }
  };
};
enfocus.core.this_node = function this_node(root, id_mask) {
  return root;
};
if (cljs.core.truth_(typeof Text != "undefined")) {
  Text.prototype.domina$DomContent$ = true;
  Text.prototype.domina$DomContent$nodes$arity$1 = function(content) {
    var content__$1 = this;
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content__$1], null);
  };
  Text.prototype.domina$DomContent$single_node$arity$1 = function(content) {
    var content__$1 = this;
    return content__$1;
  };
} else {
}
enfocus.core.ISelector["null"] = true;
enfocus.core.select["null"] = function() {
  var G__12466 = null;
  var G__12466__1 = function(this$) {
    return cljs.core.List.EMPTY;
  };
  var G__12466__2 = function(this$, root) {
    return cljs.core.List.EMPTY;
  };
  var G__12466__3 = function(this$, root, id_mask) {
    return cljs.core.List.EMPTY;
  };
  G__12466 = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return G__12466__1.call(this, this$);
      case 2:
        return G__12466__2.call(this, this$, root);
      case 3:
        return G__12466__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12466.cljs$core$IFn$_invoke$arity$1 = G__12466__1;
  G__12466.cljs$core$IFn$_invoke$arity$2 = G__12466__2;
  G__12466.cljs$core$IFn$_invoke$arity$3 = G__12466__3;
  return G__12466;
}();
enfocus.core.ISelector["string"] = true;
enfocus.core.select["string"] = function() {
  var G__12467 = null;
  var G__12467__1 = function(this$) {
    return enfocus.core.select.call(null, this$, document, "");
  };
  var G__12467__2 = function(this$, root) {
    return enfocus.core.select.call(null, this$, root, "");
  };
  var G__12467__3 = function(this$, root, id_mask) {
    return enfocus.core.css_select.call(null, id_mask, root, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$], null));
  };
  G__12467 = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return G__12467__1.call(this, this$);
      case 2:
        return G__12467__2.call(this, this$, root);
      case 3:
        return G__12467__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12467.cljs$core$IFn$_invoke$arity$1 = G__12467__1;
  G__12467.cljs$core$IFn$_invoke$arity$2 = G__12467__2;
  G__12467.cljs$core$IFn$_invoke$arity$3 = G__12467__3;
  return G__12467;
}();
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$ = true;
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$select$arity$1 = function(this$) {
  var this$__$1 = this;
  return enfocus.core.select.call(null, this$__$1, document, "");
};
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$select$arity$2 = function(this$, root) {
  var this$__$1 = this;
  return enfocus.core.select.call(null, this$__$1, root, "");
};
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$select$arity$3 = function(this$, root, id_mask) {
  var this$__$1 = this;
  return enfocus.core.css_select.call(null, id_mask, root, this$__$1);
};
enfocus.core.ISelector["function"] = true;
enfocus.core.select["function"] = function() {
  var G__12468 = null;
  var G__12468__1 = function(this$) {
    return enfocus.core.select.call(null, this$, document, "");
  };
  var G__12468__2 = function(this$, root) {
    return enfocus.core.select.call(null, this$, root, "");
  };
  var G__12468__3 = function(this$, root, id_mask) {
    return this$.call(null, root, id_mask);
  };
  G__12468 = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return G__12468__1.call(this, this$);
      case 2:
        return G__12468__2.call(this, this$, root);
      case 3:
        return G__12468__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12468.cljs$core$IFn$_invoke$arity$1 = G__12468__1;
  G__12468.cljs$core$IFn$_invoke$arity$2 = G__12468__2;
  G__12468.cljs$core$IFn$_invoke$arity$3 = G__12468__3;
  return G__12468;
}();
enfocus.core.ITransform["null"] = true;
enfocus.core.apply_transform["null"] = function() {
  var G__12469 = null;
  var G__12469__2 = function(trans, nodes) {
    return nodes;
  };
  var G__12469__3 = function(trans, nodes, chain) {
    return nodes;
  };
  G__12469 = function(trans, nodes, chain) {
    switch(arguments.length) {
      case 2:
        return G__12469__2.call(this, trans, nodes);
      case 3:
        return G__12469__3.call(this, trans, nodes, chain);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12469.cljs$core$IFn$_invoke$arity$2 = G__12469__2;
  G__12469.cljs$core$IFn$_invoke$arity$3 = G__12469__3;
  return G__12469;
}();
enfocus.core.ITransform["function"] = true;
enfocus.core.apply_transform["function"] = function() {
  var G__12470 = null;
  var G__12470__2 = function(trans, nodes) {
    return cljs.core.doall.call(null, cljs.core.map.call(null, trans, enfocus.core.nodes__GT_coll.call(null, nodes)));
  };
  var G__12470__3 = function(trans, nodes, chain) {
    var pnod_col = enfocus.core.nodes__GT_coll.call(null, nodes);
    var val = cljs.core.doall.call(null, cljs.core.map.call(null, trans, pnod_col));
    if (cljs.core.truth_(chain)) {
      return enfocus.core.apply_transform.call(null, chain, nodes);
    } else {
      return val;
    }
  };
  G__12470 = function(trans, nodes, chain) {
    switch(arguments.length) {
      case 2:
        return G__12470__2.call(this, trans, nodes);
      case 3:
        return G__12470__3.call(this, trans, nodes, chain);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12470.cljs$core$IFn$_invoke$arity$2 = G__12470__2;
  G__12470.cljs$core$IFn$_invoke$arity$3 = G__12470__3;
  return G__12470;
}();
goog.provide("enfocus.effects");
goog.require("cljs.core");
goog.require("goog.dom.query");
goog.require("enfocus.core");
goog.require("goog.fx");
goog.require("goog.fx.dom");
goog.require("goog.events");
goog.require("goog.style");
enfocus.effects.chainable_effect = function chainable_effect(func, callback) {
  var trans = function(pnodes, chain) {
    var pnod_col = enfocus.core.nodes__GT_coll.call(null, pnodes);
    var cnt = cljs.core.atom.call(null, cljs.core.count.call(null, pnod_col));
    var partial_cback = function(pnod_col, cnt) {
      return function() {
        cljs.core.swap_BANG_.call(null, cnt, cljs.core.dec);
        if (cljs.core._EQ_.call(null, 0, cljs.core.deref.call(null, cnt))) {
          if (cljs.core.truth_(callback)) {
            enfocus.core.apply_transform.call(null, callback, pnodes);
          } else {
          }
          if (cljs.core.truth_(chain)) {
            return enfocus.core.apply_transform.call(null, chain, pnodes);
          } else {
            return null;
          }
        } else {
          return null;
        }
      };
    }(pnod_col, cnt);
    var seq__11869 = cljs.core.seq.call(null, pnod_col);
    var chunk__11870 = null;
    var count__11871 = 0;
    var i__11872 = 0;
    while (true) {
      if (i__11872 < count__11871) {
        var pnod = cljs.core._nth.call(null, chunk__11870, i__11872);
        func.call(null, pnod, partial_cback);
        var G__11876 = seq__11869;
        var G__11877 = chunk__11870;
        var G__11878 = count__11871;
        var G__11879 = i__11872 + 1;
        seq__11869 = G__11876;
        chunk__11870 = G__11877;
        count__11871 = G__11878;
        i__11872 = G__11879;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__11869);
        if (temp__4126__auto__) {
          var seq__11869__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11869__$1)) {
            var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__11869__$1);
            var G__11880 = cljs.core.chunk_rest.call(null, seq__11869__$1);
            var G__11881 = c__4584__auto__;
            var G__11882 = cljs.core.count.call(null, c__4584__auto__);
            var G__11883 = 0;
            seq__11869 = G__11880;
            chunk__11870 = G__11881;
            count__11871 = G__11882;
            i__11872 = G__11883;
            continue;
          } else {
            var pnod = cljs.core.first.call(null, seq__11869__$1);
            func.call(null, pnod, partial_cback);
            var G__11884 = cljs.core.next.call(null, seq__11869__$1);
            var G__11885 = null;
            var G__11886 = 0;
            var G__11887 = 0;
            seq__11869 = G__11884;
            chunk__11870 = G__11885;
            count__11871 = G__11886;
            i__11872 = G__11887;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  if (typeof enfocus.effects.t11873 !== "undefined") {
  } else {
    enfocus.effects.t11873 = function(trans, callback, func, chainable_effect, meta11874) {
      this.trans = trans;
      this.callback = callback;
      this.func = func;
      this.chainable_effect = chainable_effect;
      this.meta11874 = meta11874;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    enfocus.effects.t11873.prototype.enfocus$core$ITransform$ = true;
    enfocus.effects.t11873.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.effects.t11873.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.effects.t11873.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_11875) {
        var self__ = this;
        var _11875__$1 = this;
        return self__.meta11874;
      };
    }(trans);
    enfocus.effects.t11873.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_11875, meta11874__$1) {
        var self__ = this;
        var _11875__$1 = this;
        return new enfocus.effects.t11873(self__.trans, self__.callback, self__.func, self__.chainable_effect, meta11874__$1);
      };
    }(trans);
    enfocus.effects.t11873.cljs$lang$type = true;
    enfocus.effects.t11873.cljs$lang$ctorStr = "enfocus.effects/t11873";
    enfocus.effects.t11873.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
        return cljs.core._write.call(null, writer__4385__auto__, "enfocus.effects/t11873");
      };
    }(trans);
    enfocus.effects.__GT_t11873 = function(trans) {
      return function __GT_t11873(trans__$1, callback__$1, func__$1, chainable_effect__$1, meta11874) {
        return new enfocus.effects.t11873(trans__$1, callback__$1, func__$1, chainable_effect__$1, meta11874);
      };
    }(trans);
  }
  return new enfocus.effects.t11873(trans, callback, func, chainable_effect, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 61, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 26, new cljs.core.Keyword(null, "column", "column", 2078222095), 5, new cljs.core.Keyword(null, "line", "line", 212345235), 24, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/target/base+system+user+dev/cljsbuild-compiler-0/enfocus/effects.cljs"], 
  null));
};
enfocus.effects.chain = function() {
  var chain__delegate = function(func, chains) {
    if (cljs.core.empty_QMARK_.call(null, chains)) {
      return function(pnod) {
        return enfocus.core.apply_transform.call(null, func, pnod);
      };
    } else {
      return function(pnod) {
        return enfocus.core.apply_transform.call(null, func, pnod, cljs.core.apply.call(null, chain, chains));
      };
    }
  };
  var chain = function(func, var_args) {
    var chains = null;
    if (arguments.length > 1) {
      var G__11888__i = 0, G__11888__a = new Array(arguments.length - 1);
      while (G__11888__i < G__11888__a.length) {
        G__11888__a[G__11888__i] = arguments[G__11888__i + 1];
        ++G__11888__i;
      }
      chains = new cljs.core.IndexedSeq(G__11888__a, 0);
    }
    return chain__delegate.call(this, func, chains);
  };
  chain.cljs$lang$maxFixedArity = 1;
  chain.cljs$lang$applyTo = function(arglist__11889) {
    var func = cljs.core.first(arglist__11889);
    var chains = cljs.core.rest(arglist__11889);
    return chain__delegate(func, chains);
  };
  chain.cljs$core$IFn$_invoke$arity$variadic = chain__delegate;
  return chain;
}();
enfocus.effects.fade_out = function() {
  var fade_out = null;
  var fade_out__1 = function(ttime) {
    return fade_out.call(null, ttime, null, null);
  };
  var fade_out__2 = function(ttime, callback) {
    return fade_out.call(null, ttime, callback, null);
  };
  var fade_out__3 = function(ttime, callback, accel) {
    return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
      var anim = new goog.fx.dom.FadeOut(pnod, ttime, accel);
      if (cljs.core.truth_(pcallback)) {
        goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
      } else {
      }
      return anim.play();
    }, callback);
  };
  fade_out = function(ttime, callback, accel) {
    switch(arguments.length) {
      case 1:
        return fade_out__1.call(this, ttime);
      case 2:
        return fade_out__2.call(this, ttime, callback);
      case 3:
        return fade_out__3.call(this, ttime, callback, accel);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fade_out.cljs$core$IFn$_invoke$arity$1 = fade_out__1;
  fade_out.cljs$core$IFn$_invoke$arity$2 = fade_out__2;
  fade_out.cljs$core$IFn$_invoke$arity$3 = fade_out__3;
  return fade_out;
}();
enfocus.effects.fade_in = function() {
  var fade_in = null;
  var fade_in__1 = function(ttime) {
    return fade_in.call(null, ttime, null, null);
  };
  var fade_in__2 = function(ttime, callback) {
    return fade_in.call(null, ttime, callback, null);
  };
  var fade_in__3 = function(ttime, callback, accel) {
    return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
      var anim = new goog.fx.dom.FadeIn(pnod, ttime, accel);
      if (cljs.core.truth_(pcallback)) {
        goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
      } else {
      }
      return anim.play();
    }, callback);
  };
  fade_in = function(ttime, callback, accel) {
    switch(arguments.length) {
      case 1:
        return fade_in__1.call(this, ttime);
      case 2:
        return fade_in__2.call(this, ttime, callback);
      case 3:
        return fade_in__3.call(this, ttime, callback, accel);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fade_in.cljs$core$IFn$_invoke$arity$1 = fade_in__1;
  fade_in.cljs$core$IFn$_invoke$arity$2 = fade_in__2;
  fade_in.cljs$core$IFn$_invoke$arity$3 = fade_in__3;
  return fade_in;
}();
enfocus.effects.resize = function() {
  var resize = null;
  var resize__2 = function(wth, hgt) {
    return resize.call(null, wth, hgt, 0, null, null);
  };
  var resize__3 = function(wth, hgt, ttime) {
    return resize.call(null, wth, hgt, ttime, null, null);
  };
  var resize__4 = function(wth, hgt, ttime, callback) {
    return resize.call(null, wth, hgt, ttime, callback, null);
  };
  var resize__5 = function(wth, hgt, ttime, callback, accel) {
    return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
      var csize = goog.style.getContentBoxSize(pnod);
      var start = [csize.width, csize.height];
      var wth__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curwidth", "curwidth", 1831107733), wth) ? csize.width : wth;
      var hgt__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curheight", "curheight", -119931765), hgt) ? csize.height : hgt;
      var end = [wth__$1, hgt__$1];
      var anim = new goog.fx.dom.Resize(pnod, start, end, ttime, accel);
      if (cljs.core.truth_(pcallback)) {
        goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
      } else {
      }
      return anim.play();
    }, callback);
  };
  resize = function(wth, hgt, ttime, callback, accel) {
    switch(arguments.length) {
      case 2:
        return resize__2.call(this, wth, hgt);
      case 3:
        return resize__3.call(this, wth, hgt, ttime);
      case 4:
        return resize__4.call(this, wth, hgt, ttime, callback);
      case 5:
        return resize__5.call(this, wth, hgt, ttime, callback, accel);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  resize.cljs$core$IFn$_invoke$arity$2 = resize__2;
  resize.cljs$core$IFn$_invoke$arity$3 = resize__3;
  resize.cljs$core$IFn$_invoke$arity$4 = resize__4;
  resize.cljs$core$IFn$_invoke$arity$5 = resize__5;
  return resize;
}();
enfocus.effects.move = function() {
  var move = null;
  var move__2 = function(xpos, ypos) {
    return move.call(null, xpos, ypos, 0, null, null);
  };
  var move__3 = function(xpos, ypos, ttime) {
    return move.call(null, xpos, ypos, ttime, null, null);
  };
  var move__4 = function(xpos, ypos, ttime, callback) {
    return move.call(null, xpos, ypos, ttime, callback, null);
  };
  var move__5 = function(xpos, ypos, ttime, callback, accel) {
    return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
      var cpos = goog.style.getPosition(pnod);
      var start = [cpos.x, cpos.y];
      var xpos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curx", "curx", -1922579418), xpos) ? cpos.x : xpos;
      var ypos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "cury", "cury", -230854218), ypos) ? cpos.y : ypos;
      var end = [xpos__$1, ypos__$1];
      var anim = new goog.fx.dom.Slide(pnod, start, end, ttime, accel);
      if (cljs.core.truth_(pcallback)) {
        goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
      } else {
      }
      return anim.play();
    }, callback);
  };
  move = function(xpos, ypos, ttime, callback, accel) {
    switch(arguments.length) {
      case 2:
        return move__2.call(this, xpos, ypos);
      case 3:
        return move__3.call(this, xpos, ypos, ttime);
      case 4:
        return move__4.call(this, xpos, ypos, ttime, callback);
      case 5:
        return move__5.call(this, xpos, ypos, ttime, callback, accel);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  move.cljs$core$IFn$_invoke$arity$2 = move__2;
  move.cljs$core$IFn$_invoke$arity$3 = move__3;
  move.cljs$core$IFn$_invoke$arity$4 = move__4;
  move.cljs$core$IFn$_invoke$arity$5 = move__5;
  return move;
}();
enfocus.effects.scroll = function() {
  var scroll = null;
  var scroll__2 = function(xpos, ypos) {
    return scroll.call(null, xpos, ypos, 0, null, null);
  };
  var scroll__3 = function(xpos, ypos, ttime) {
    return scroll.call(null, xpos, ypos, ttime, null, null);
  };
  var scroll__4 = function(xpos, ypos, ttime, callback) {
    return scroll.call(null, xpos, ypos, ttime, callback, null);
  };
  var scroll__5 = function(xpos, ypos, ttime, callback, accel) {
    return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
      var start = [pnod.scrollLeft, pnod.scrollTop];
      var xpos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curx", "curx", -1922579418), xpos) ? pnod.scrollLeft : xpos;
      var ypos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "cury", "cury", -230854218), ypos) ? pnod.scrollTop : ypos;
      var end = [xpos__$1, ypos__$1];
      var anim = new goog.fx.dom.Scroll(pnod, start, end, ttime, accel);
      if (cljs.core.truth_(pcallback)) {
        goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
      } else {
      }
      return anim.play();
    }, callback);
  };
  scroll = function(xpos, ypos, ttime, callback, accel) {
    switch(arguments.length) {
      case 2:
        return scroll__2.call(this, xpos, ypos);
      case 3:
        return scroll__3.call(this, xpos, ypos, ttime);
      case 4:
        return scroll__4.call(this, xpos, ypos, ttime, callback);
      case 5:
        return scroll__5.call(this, xpos, ypos, ttime, callback, accel);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scroll.cljs$core$IFn$_invoke$arity$2 = scroll__2;
  scroll.cljs$core$IFn$_invoke$arity$3 = scroll__3;
  scroll.cljs$core$IFn$_invoke$arity$4 = scroll__4;
  scroll.cljs$core$IFn$_invoke$arity$5 = scroll__5;
  return scroll;
}();
enfocus.effects.liner = function liner(t) {
  return t;
};
enfocus.effects.ease_in_quad = function ease_in_quad(t) {
  return t * t;
};
enfocus.effects.ease_out_quad = function ease_out_quad(t) {
  return-1 * (t * (t - 2));
};
enfocus.effects.ease_in_out_quad = function ease_in_out_quad(t) {
  var nt = t * 2;
  if (nt < 1) {
    return.5 * nt * nt;
  } else {
    return-.5 * ((nt - 1) * (nt - 2) - 1);
  }
};
enfocus.effects.ease_in_cubic = function ease_in_cubic(t) {
  return t * t * t;
};
enfocus.effects.ease_out_cubic = function ease_out_cubic(t) {
  var nt = t - 1;
  return nt * nt * nt + 1;
};
enfocus.effects.ease_in_out_cubic = function ease_in_out_cubic(t) {
  var nt = t * 2;
  if (nt < 1) {
    return.5 * nt * nt * nt;
  } else {
    var mt = nt - 2;
    return.5 * (2 + mt * mt * mt);
  }
};
enfocus.effects.ease_in_quart = function ease_in_quart(t) {
  return t * t * t * t;
};
enfocus.effects.ease_out_quart = function ease_out_quart(t) {
  var nt = t - 1;
  return-1 * (nt * nt * nt * nt - 1);
};
enfocus.effects.ease_in_out_quart = function ease_in_out_quart(t) {
  var nt = t * 2;
  if (nt < 1) {
    return.5 * nt * nt * nt * nt;
  } else {
    var mt = nt - 2;
    return.5 * (2 + mt * mt * mt * mt);
  }
};
enfocus.effects.ease_in_quint = function ease_in_quint(t) {
  return t * t * t * t;
};
enfocus.effects.ease_out_quint = function ease_out_quint(t) {
  var nt = t - 1;
  return nt * nt * nt * nt + 1;
};
enfocus.effects.ease_in_out_quint = function ease_in_out_quint(t) {
  var nt = t * 2;
  if (nt < 1) {
    return.5 * nt * nt * nt * nt * nt;
  } else {
    var mt = nt - 2;
    return.5 * (2 + mt * mt * mt * mt * mt);
  }
};
enfocus.effects.sign_in = function sign_in(t) {
  return-1 * Math.cos(.5 * Math.PI * t) + 1;
};
enfocus.effects.sign_out = function sign_out(t) {
  return Math.sin(t * Math.PI * .5);
};
enfocus.effects.sign_in_out = function sign_in_out(t) {
  return-.5 * (Math.cos(Math.PI * t) - 1);
};
enfocus.effects.expo_in = function expo_in(t) {
  if (cljs.core._EQ_.call(null, t, 0)) {
    return 0;
  } else {
    return Math.pow(2, 10 * (t - 1));
  }
};
enfocus.effects.expo_out = function expo_out(t) {
  if (cljs.core._EQ_.call(null, t, 0)) {
    return 1;
  } else {
    return-1 * Math.pow(2, -10 * t) + 1;
  }
};
enfocus.effects.expo_in_out = function expo_in_out(t) {
  if (cljs.core._EQ_.call(null, t, 0)) {
    return 0;
  } else {
    if (cljs.core._EQ_.call(null, t, 1)) {
      return 1;
    } else {
      if (t < 1) {
        return.5 * Math.pow(2, 10 * (t - 1));
      } else {
        return.5 * (-1 * Math.pow(2, -10 * (t - 1)) + 2);
      }
    }
  }
};
enfocus.effects.circular_in = function circular_in(t) {
  return-1 * (Math.sqrt(1 - Math.pow(t, 2)) - 1);
};
enfocus.effects.circular_out = function circular_out(t) {
  var nt = t - 1;
  return Math.sqrt(1 - Math.pow(nt, 2));
};
enfocus.effects.circular_in_out = function circular_in_out(t) {
  var nt = t * 2;
  if (t < 1) {
    return-.5 * (Math.sqrt(1 - Math.pow(nt, 2)) - 1);
  } else {
    var mt = nt - 2;
    return-.5 * (Math.sqrt(1 - Math.pow(nt, 2)) + 1);
  }
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("goog.ui.IdGenerator");
goog.require("goog.dom");
goog.require("om.dom");
om.core._STAR_parent_STAR_ = null;
om.core._STAR_instrument_STAR_ = null;
om.core._STAR_descriptor_STAR_ = null;
om.core._STAR_state_STAR_ = null;
om.core._STAR_root_key_STAR_ = null;
om.core.IDisplayName = function() {
  var obj11343 = {};
  return obj11343;
}();
om.core.display_name = function display_name(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IDisplayName$display_name$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IDisplayName$display_name$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.display_name[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.display_name["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisplayName.display-name", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IInitState = function() {
  var obj11345 = {};
  return obj11345;
}();
om.core.init_state = function init_state(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.init_state[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.init_state["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj11347 = {};
  return obj11347;
}();
om.core.should_update = function should_update(this$, next_props, next_state) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.should_update[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.should_update["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj11349 = {};
  return obj11349;
}();
om.core.will_mount = function will_mount(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.will_mount[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.will_mount["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj11351 = {};
  return obj11351;
}();
om.core.did_mount = function did_mount(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.did_mount[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.did_mount["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUnmount = function() {
  var obj11353 = {};
  return obj11353;
}();
om.core.will_unmount = function will_unmount(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.will_unmount[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.will_unmount["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj11355 = {};
  return obj11355;
}();
om.core.will_update = function will_update(this$, next_props, next_state) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.will_update[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.will_update["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj11357 = {};
  return obj11357;
}();
om.core.did_update = function did_update(this$, prev_props, prev_state) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$3(this$, prev_props, prev_state);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.did_update[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.did_update["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state);
  }
};
om.core.IWillReceiveProps = function() {
  var obj11359 = {};
  return obj11359;
}();
om.core.will_receive_props = function will_receive_props(this$, next_props) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IWillReceiveProps$will_receive_props$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IWillReceiveProps$will_receive_props$arity$2(this$, next_props);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.will_receive_props[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.will_receive_props["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillReceiveProps.will-receive-props", this$);
        }
      }
    }().call(null, this$, next_props);
  }
};
om.core.IRender = function() {
  var obj11361 = {};
  return obj11361;
}();
om.core.render = function render(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.render[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.render["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderProps = function() {
  var obj11363 = {};
  return obj11363;
}();
om.core.render_props = function render_props(this$, props, state) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRenderProps$render_props$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRenderProps$render_props$arity$3(this$, props, state);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.render_props[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.render_props["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderProps.render-props", this$);
        }
      }
    }().call(null, this$, props, state);
  }
};
om.core.IRenderState = function() {
  var obj11365 = {};
  return obj11365;
}();
om.core.render_state = function render_state(this$, state) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core.render_state[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core.render_state["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.ICheckState = function() {
  var obj11367 = {};
  return obj11367;
}();
om.core.IOmSwap = function() {
  var obj11369 = {};
  return obj11369;
}();
om.core._om_swap_BANG_ = function _om_swap_BANG_(this$, cursor, korks, f, tag) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5(this$, cursor, korks, f, tag);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._om_swap_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._om_swap_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmSwap.-om-swap!", this$);
        }
      }
    }().call(null, this$, cursor, korks, f, tag);
  }
};
om.core.IGetState = function() {
  var obj11371 = {};
  return obj11371;
}();
om.core._get_state = function() {
  var _get_state = null;
  var _get_state__1 = function(this$) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.om$core$IGetState$_get_state$arity$1;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$1(this$);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = om.core._get_state[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = om.core._get_state["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_state__2 = function(this$, ks) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.om$core$IGetState$_get_state$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$2(this$, ks);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = om.core._get_state[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = om.core._get_state["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_state__1.call(this, this$);
      case 2:
        return _get_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_state.cljs$core$IFn$_invoke$arity$1 = _get_state__1;
  _get_state.cljs$core$IFn$_invoke$arity$2 = _get_state__2;
  return _get_state;
}();
om.core.IGetRenderState = function() {
  var obj11373 = {};
  return obj11373;
}();
om.core._get_render_state = function() {
  var _get_render_state = null;
  var _get_render_state__1 = function(this$) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$1;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$1(this$);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = om.core._get_render_state[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = om.core._get_render_state["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_render_state__2 = function(this$, ks) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$2(this$, ks);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = om.core._get_render_state[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = om.core._get_render_state["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_render_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_render_state__1.call(this, this$);
      case 2:
        return _get_render_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_render_state.cljs$core$IFn$_invoke$arity$1 = _get_render_state__1;
  _get_render_state.cljs$core$IFn$_invoke$arity$2 = _get_render_state__2;
  return _get_render_state;
}();
om.core.ISetState = function() {
  var obj11375 = {};
  return obj11375;
}();
om.core._set_state_BANG_ = function() {
  var _set_state_BANG_ = null;
  var _set_state_BANG___3 = function(this$, val, render) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$3(this$, val, render);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, val, render);
    }
  };
  var _set_state_BANG___4 = function(this$, ks, val, render) {
    if (function() {
      var and__3785__auto__ = this$;
      if (and__3785__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$4;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$4(this$, ks, val, render);
    } else {
      var x__4441__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3797__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, ks, val, render);
    }
  };
  _set_state_BANG_ = function(this$, ks, val, render) {
    switch(arguments.length) {
      case 3:
        return _set_state_BANG___3.call(this, this$, ks, val);
      case 4:
        return _set_state_BANG___4.call(this, this$, ks, val, render);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = _set_state_BANG___3;
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$4 = _set_state_BANG___4;
  return _set_state_BANG_;
}();
om.core.IRenderQueue = function() {
  var obj11377 = {};
  return obj11377;
}();
om.core._get_queue = function _get_queue(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRenderQueue$_get_queue$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_get_queue$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._get_queue[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._get_queue["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-get-queue", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._queue_render_BANG_ = function _queue_render_BANG_(this$, c) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2(this$, c);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._queue_render_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._queue_render_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-queue-render!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._empty_queue_BANG_ = function _empty_queue_BANG_(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._empty_queue_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._empty_queue_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-empty-queue!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IValue = function() {
  var obj11379 = {};
  return obj11379;
}();
om.core._value = function _value(x) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = om.core._value[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._value["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj11381 = {};
  return obj11381;
}();
om.core._path = function _path(cursor) {
  if (function() {
    var and__3785__auto__ = cursor;
    if (and__3785__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__4441__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3797__auto__ = om.core._path[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._path["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function _state(cursor) {
  if (function() {
    var and__3785__auto__ = cursor;
    if (and__3785__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__4441__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3797__auto__ = om.core._state[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._state["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj11383 = {};
  return obj11383;
}();
om.core._to_cursor = function() {
  var _to_cursor = null;
  var _to_cursor__2 = function(value, state) {
    if (function() {
      var and__3785__auto__ = value;
      if (and__3785__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$2;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
    } else {
      var x__4441__auto__ = value == null ? null : value;
      return function() {
        var or__3797__auto__ = om.core._to_cursor[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = om.core._to_cursor["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state);
    }
  };
  var _to_cursor__3 = function(value, state, path) {
    if (function() {
      var and__3785__auto__ = value;
      if (and__3785__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$3;
      } else {
        return and__3785__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
    } else {
      var x__4441__auto__ = value == null ? null : value;
      return function() {
        var or__3797__auto__ = om.core._to_cursor[goog.typeOf(x__4441__auto__)];
        if (or__3797__auto__) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = om.core._to_cursor["_"];
          if (or__3797__auto____$1) {
            return or__3797__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state, path);
    }
  };
  _to_cursor = function(value, state, path) {
    switch(arguments.length) {
      case 2:
        return _to_cursor__2.call(this, value, state);
      case 3:
        return _to_cursor__3.call(this, value, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _to_cursor.cljs$core$IFn$_invoke$arity$2 = _to_cursor__2;
  _to_cursor.cljs$core$IFn$_invoke$arity$3 = _to_cursor__3;
  return _to_cursor;
}();
om.core.ICursorDerive = function() {
  var obj11385 = {};
  return obj11385;
}();
om.core._derive = function _derive(cursor, derived, state, path) {
  if (function() {
    var and__3785__auto__ = cursor;
    if (and__3785__auto__) {
      return cursor.om$core$ICursorDerive$_derive$arity$4;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return cursor.om$core$ICursorDerive$_derive$arity$4(cursor, derived, state, path);
  } else {
    var x__4441__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3797__auto__ = om.core._derive[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._derive["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursorDerive.-derive", cursor);
        }
      }
    }().call(null, cursor, derived, state, path);
  }
};
om.core.ICursorDerive["_"] = true;
om.core._derive["_"] = function(this$, derived, state, path) {
  return om.core.to_cursor.call(null, derived, state, path);
};
om.core.path = function path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.state = function state(cursor) {
  return om.core._state.call(null, cursor);
};
om.core.ITransact = function() {
  var obj11387 = {};
  return obj11387;
}();
om.core._transact_BANG_ = function _transact_BANG_(cursor, korks, f, tag) {
  if (function() {
    var and__3785__auto__ = cursor;
    if (and__3785__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$4;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$4(cursor, korks, f, tag);
  } else {
    var x__4441__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3797__auto__ = om.core._transact_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._transact_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, korks, f, tag);
  }
};
om.core.INotify = function() {
  var obj11389 = {};
  return obj11389;
}();
om.core._listen_BANG_ = function _listen_BANG_(x, key, tx_listen) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.om$core$INotify$_listen_BANG_$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.om$core$INotify$_listen_BANG_$arity$3(x, key, tx_listen);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = om.core._listen_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._listen_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-listen!", x);
        }
      }
    }().call(null, x, key, tx_listen);
  }
};
om.core._unlisten_BANG_ = function _unlisten_BANG_(x, key) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.om$core$INotify$_unlisten_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.om$core$INotify$_unlisten_BANG_$arity$2(x, key);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = om.core._unlisten_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._unlisten_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-unlisten!", x);
        }
      }
    }().call(null, x, key);
  }
};
om.core._notify_BANG_ = function _notify_BANG_(x, tx_data, root_cursor) {
  if (function() {
    var and__3785__auto__ = x;
    if (and__3785__auto__) {
      return x.om$core$INotify$_notify_BANG_$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return x.om$core$INotify$_notify_BANG_$arity$3(x, tx_data, root_cursor);
  } else {
    var x__4441__auto__ = x == null ? null : x;
    return function() {
      var or__3797__auto__ = om.core._notify_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._notify_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-notify!", x);
        }
      }
    }().call(null, x, tx_data, root_cursor);
  }
};
om.core.IRootProperties = function() {
  var obj11391 = {};
  return obj11391;
}();
om.core._set_property_BANG_ = function _set_property_BANG_(this$, id, p, val) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRootProperties$_set_property_BANG_$arity$4;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_set_property_BANG_$arity$4(this$, id, p, val);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._set_property_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._set_property_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-set-property!", this$);
        }
      }
    }().call(null, this$, id, p, val);
  }
};
om.core._remove_property_BANG_ = function _remove_property_BANG_(this$, id, p) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3(this$, id, p);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._remove_property_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._remove_property_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-property!", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core._remove_properties_BANG_ = function _remove_properties_BANG_(this$, id) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2(this$, id);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._remove_properties_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._remove_properties_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-properties!", this$);
        }
      }
    }().call(null, this$, id);
  }
};
om.core._get_property = function _get_property(this$, id, p) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IRootProperties$_get_property$arity$3;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_get_property$arity$3(this$, id, p);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._get_property[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._get_property["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-get-property", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core.IRootKey = function() {
  var obj11393 = {};
  return obj11393;
}();
om.core._root_key = function _root_key(cursor) {
  if (function() {
    var and__3785__auto__ = cursor;
    if (and__3785__auto__) {
      return cursor.om$core$IRootKey$_root_key$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return cursor.om$core$IRootKey$_root_key$arity$1(cursor);
  } else {
    var x__4441__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3797__auto__ = om.core._root_key[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._root_key["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootKey.-root-key", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IAdapt = function() {
  var obj11395 = {};
  return obj11395;
}();
om.core._adapt = function _adapt(this$, other) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IAdapt$_adapt$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IAdapt$_adapt$arity$2(this$, other);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._adapt[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._adapt["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAdapt.-adapt", this$);
        }
      }
    }().call(null, this$, other);
  }
};
om.core.IAdapt["_"] = true;
om.core._adapt["_"] = function(_, other) {
  return other;
};
om.core.adapt = function adapt(x, other) {
  return om.core._adapt.call(null, x, other);
};
om.core.IOmRef = function() {
  var obj11397 = {};
  return obj11397;
}();
om.core._add_dep_BANG_ = function _add_dep_BANG_(this$, c) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IOmRef$_add_dep_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_add_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._add_dep_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._add_dep_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-add-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._remove_dep_BANG_ = function _remove_dep_BANG_(this$, c) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._remove_dep_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._remove_dep_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-remove-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._refresh_deps_BANG_ = function _refresh_deps_BANG_(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._refresh_deps_BANG_[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._refresh_deps_BANG_["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-refresh-deps!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._get_deps = function _get_deps(this$) {
  if (function() {
    var and__3785__auto__ = this$;
    if (and__3785__auto__) {
      return this$.om$core$IOmRef$_get_deps$arity$1;
    } else {
      return and__3785__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_get_deps$arity$1(this$);
  } else {
    var x__4441__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3797__auto__ = om.core._get_deps[goog.typeOf(x__4441__auto__)];
      if (or__3797__auto__) {
        return or__3797__auto__;
      } else {
        var or__3797__auto____$1 = om.core._get_deps["_"];
        if (or__3797__auto____$1) {
          return or__3797__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-get-deps", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.transact_STAR_ = function transact_STAR_(state, cursor, korks, f, tag) {
  var old_state = cljs.core.deref.call(null, state);
  var path = cljs.core.into.call(null, om.core.path.call(null, cursor), korks);
  var ret = function() {
    var G__11399 = state;
    if (G__11399) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11399.om$core$IOmSwap$;
        }
      }())) {
        return true;
      } else {
        if (!G__11399.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__11399);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__11399);
    }
  }() ? om.core._om_swap_BANG_.call(null, state, cursor, korks, f, tag) : cljs.core.empty_QMARK_.call(null, path) ? cljs.core.swap_BANG_.call(null, state, f) : cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, path, f);
  if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "defer", "om.core/defer", -1038866178))) {
    return null;
  } else {
    var tx_data = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "old-value", "old-value", 862546795), cljs.core.get_in.call(null, old_state, path), new cljs.core.Keyword(null, "new-value", "new-value", 1087038368), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path), new cljs.core.Keyword(null, "old-state", "old-state", 1039580704), old_state, new cljs.core.Keyword(null, "new-state", "new-state", 
    -490349212), cljs.core.deref.call(null, state)], null);
    if (!(tag == null)) {
      return om.core.notify_STAR_.call(null, cursor, cljs.core.assoc.call(null, tx_data, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag));
    } else {
      return om.core.notify_STAR_.call(null, cursor, tx_data);
    }
  }
};
om.core.cursor_QMARK_ = function cursor_QMARK_(x) {
  var G__11401 = x;
  if (G__11401) {
    var bit__4478__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3797__auto__ = bit__4478__auto__;
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return G__11401.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__11401.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__11401);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__11401);
  }
};
om.core.component_QMARK_ = function component_QMARK_(x) {
  return x["isOmComponent"];
};
om.core.children = function children(node) {
  var c = node.props.children;
  if (cljs.core.ifn_QMARK_.call(null, c)) {
    return node.props.children = c.call(null, node);
  } else {
    return c;
  }
};
om.core.get_props = function() {
  var get_props = null;
  var get_props__1 = function(x) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
    }
    return x.props["__om_cursor"];
  };
  var get_props__2 = function(x, korks) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
    }
    var korks__$1 = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    var G__11403 = x.props["__om_cursor"];
    var G__11403__$1 = cljs.core.seq.call(null, korks__$1) ? cljs.core.get_in.call(null, G__11403, korks__$1) : G__11403;
    return G__11403__$1;
  };
  get_props = function(x, korks) {
    switch(arguments.length) {
      case 1:
        return get_props__1.call(this, x);
      case 2:
        return get_props__2.call(this, x, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_props.cljs$core$IFn$_invoke$arity$1 = get_props__1;
  get_props.cljs$core$IFn$_invoke$arity$2 = get_props__2;
  return get_props;
}();
om.core.get_state = function() {
  var get_state = null;
  var get_state__1 = function(owner) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._get_state.call(null, owner);
  };
  var get_state__2 = function(owner, korks) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_state.call(null, owner, ks);
  };
  get_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_state__1.call(this, owner);
      case 2:
        return get_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_state.cljs$core$IFn$_invoke$arity$1 = get_state__1;
  get_state.cljs$core$IFn$_invoke$arity$2 = get_state__2;
  return get_state;
}();
om.core.get_shared = function() {
  var get_shared = null;
  var get_shared__1 = function(owner) {
    if (owner == null) {
      return null;
    } else {
      return owner.props["__om_shared"];
    }
  };
  var get_shared__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_shared.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_shared.call(null, owner);
      } else {
        return cljs.core.get_in.call(null, get_shared.call(null, owner), korks);
      }
    }
  };
  get_shared = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_shared__1.call(this, owner);
      case 2:
        return get_shared__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_shared.cljs$core$IFn$_invoke$arity$1 = get_shared__1;
  get_shared.cljs$core$IFn$_invoke$arity$2 = get_shared__2;
  return get_shared;
}();
om.core.merge_pending_state = function merge_pending_state(owner) {
  var state = owner.state;
  var temp__4126__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var pending_state = temp__4126__auto__;
    var G__11405 = state;
    G__11405["__om_prev_state"] = state["__om_state"];
    G__11405["__om_state"] = pending_state;
    G__11405["__om_pending_state"] = null;
    return G__11405;
  } else {
    return null;
  }
};
om.core.merge_props_state = function() {
  var merge_props_state = null;
  var merge_props_state__1 = function(owner) {
    return merge_props_state.call(null, owner, null);
  };
  var merge_props_state__2 = function(owner, props) {
    var props__$1 = function() {
      var or__3797__auto__ = props;
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return owner.props;
      }
    }();
    var temp__4126__auto__ = props__$1["__om_state"];
    if (cljs.core.truth_(temp__4126__auto__)) {
      var props_state = temp__4126__auto__;
      var state = owner.state;
      state["__om_pending_state"] = cljs.core.merge.call(null, function() {
        var or__3797__auto__ = state["__om_pending_state"];
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return state["__om_state"];
        }
      }(), props_state);
      return props__$1["__om_state"] = null;
    } else {
      return null;
    }
  };
  merge_props_state = function(owner, props) {
    switch(arguments.length) {
      case 1:
        return merge_props_state__1.call(this, owner);
      case 2:
        return merge_props_state__2.call(this, owner, props);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge_props_state.cljs$core$IFn$_invoke$arity$1 = merge_props_state__1;
  merge_props_state.cljs$core$IFn$_invoke$arity$2 = merge_props_state__2;
  return merge_props_state;
}();
om.core.ref_changed_QMARK_ = function ref_changed_QMARK_(ref) {
  var val = om.core.value.call(null, ref);
  var val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.state.call(null, ref)), om.core.path.call(null, ref), new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  return cljs.core.not_EQ_.call(null, val, val_SINGLEQUOTE_);
};
om.core.update_refs = function update_refs(c) {
  var cstate = c.state;
  var refs = cstate["__om_refs"];
  if (cljs.core.count.call(null, refs) === 0) {
    return null;
  } else {
    return cstate["__om_refs"] = cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.filter.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(cstate, refs) {
      return function(ref) {
        var ref_val = om.core.value.call(null, ref);
        var ref_state = om.core.state.call(null, ref);
        var ref_path = om.core.path.call(null, ref);
        var ref_val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, ref_state), ref_path, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
        if (cljs.core.not_EQ_.call(null, ref_val, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
          if (cljs.core.not_EQ_.call(null, ref_val, ref_val_SINGLEQUOTE_)) {
            return om.core.adapt.call(null, ref, om.core.to_cursor.call(null, ref_val_SINGLEQUOTE_, ref_state, ref_path));
          } else {
            return ref;
          }
        } else {
          return null;
        }
      };
    }(cstate, refs), refs)));
  }
};
om.core.pure_methods = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), new cljs.core.Keyword(null, "isOmComponent", "isOmComponent", -2070015162), new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), new cljs.core.Keyword(null, "componentWillReceiveProps", "componentWillReceiveProps", 559988974), new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), 
new cljs.core.Keyword(null, "render", "render", -1408033454), new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), new cljs.core.Keyword(null, "componentDidMount", "componentDidMount", 955710936), new cljs.core.Keyword(null, "getDisplayName", "getDisplayName", 1324429466), new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619)], [function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__11407 = c;
    if (G__11407) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11407.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__11407.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__11407);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__11407);
    }
  }()) {
    var state_11428 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":prev_props}), function() {
      var or__3797__auto__ = state_11428["__om_prev_state"];
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return state_11428["__om_state"];
      }
    }());
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, true, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__11408 = c;
    if (G__11408) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11408.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__11408.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__11408);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__11408);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  var temp__4126__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4126__auto__) {
    var refs = temp__4126__auto__;
    var seq__11409 = cljs.core.seq.call(null, refs);
    var chunk__11410 = null;
    var count__11411 = 0;
    var i__11412 = 0;
    while (true) {
      if (i__11412 < count__11411) {
        var ref = cljs.core._nth.call(null, chunk__11410, i__11412);
        om.core.unobserve.call(null, this$, ref);
        var G__11429 = seq__11409;
        var G__11430 = chunk__11410;
        var G__11431 = count__11411;
        var G__11432 = i__11412 + 1;
        seq__11409 = G__11429;
        chunk__11410 = G__11430;
        count__11411 = G__11431;
        i__11412 = G__11432;
        continue;
      } else {
        var temp__4126__auto____$1 = cljs.core.seq.call(null, seq__11409);
        if (temp__4126__auto____$1) {
          var seq__11409__$1 = temp__4126__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11409__$1)) {
            var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__11409__$1);
            var G__11433 = cljs.core.chunk_rest.call(null, seq__11409__$1);
            var G__11434 = c__4584__auto__;
            var G__11435 = cljs.core.count.call(null, c__4584__auto__);
            var G__11436 = 0;
            seq__11409 = G__11433;
            chunk__11410 = G__11434;
            count__11411 = G__11435;
            i__11412 = G__11436;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__11409__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__11437 = cljs.core.next.call(null, seq__11409__$1);
            var G__11438 = null;
            var G__11439 = 0;
            var G__11440 = 0;
            seq__11409 = G__11437;
            chunk__11410 = G__11438;
            count__11411 = G__11439;
            i__11412 = G__11440;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, function(next_props) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__11413 = c;
    if (G__11413) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11413.om$core$IWillReceiveProps$;
        }
      }())) {
        return true;
      } else {
        if (!G__11413.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__11413);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__11413);
    }
  }()) {
    return om.core.will_receive_props.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}));
  } else {
    return null;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var props = this$.props;
  var state = this$.state;
  var c = om.core.children.call(null, this$);
  om.core.merge_props_state.call(null, this$, next_props);
  if (function() {
    var G__11414 = c;
    if (G__11414) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11414.om$core$IShouldUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__11414.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__11414);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__11414);
    }
  }()) {
    return om.core.should_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
    var cursor = props["__om_cursor"];
    var next_cursor = next_props["__om_cursor"];
    if (cljs.core.not_EQ_.call(null, om.core._value.call(null, cursor), om.core._value.call(null, next_cursor))) {
      return true;
    } else {
      if (om.core.cursor_QMARK_.call(null, cursor) && om.core.cursor_QMARK_.call(null, next_cursor) && cljs.core.not_EQ_.call(null, om.core._path.call(null, cursor), om.core._path.call(null, next_cursor))) {
        return true;
      } else {
        if (cljs.core.not_EQ_.call(null, om.core._get_state.call(null, this$), om.core._get_render_state.call(null, this$))) {
          return true;
        } else {
          if (cljs.core.truth_(function() {
            var and__3785__auto__ = !(cljs.core.count.call(null, state["__om_refs"]) === 0);
            if (and__3785__auto__) {
              return cljs.core.some.call(null, function(and__3785__auto__, cursor, next_cursor, props, state, c, this$) {
                return function(p1__11406_SHARP_) {
                  return om.core.ref_changed_QMARK_.call(null, p1__11406_SHARP_);
                };
              }(and__3785__auto__, cursor, next_cursor, props, state, c, this$), state["__om_refs"]);
            } else {
              return and__3785__auto__;
            }
          }())) {
            return true;
          } else {
            if (!(props["__om_index"] === next_props["__om_index"])) {
              return true;
            } else {
              return false;
            }
          }
        }
      }
    }
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var _STAR_parent_STAR_11415 = om.core._STAR_parent_STAR_;
  var _STAR_state_STAR_11416 = om.core._STAR_state_STAR_;
  var _STAR_instrument_STAR_11417 = om.core._STAR_instrument_STAR_;
  var _STAR_descriptor_STAR_11418 = om.core._STAR_descriptor_STAR_;
  var _STAR_root_key_STAR_11419 = om.core._STAR_root_key_STAR_;
  om.core._STAR_parent_STAR_ = this$;
  om.core._STAR_state_STAR_ = props["__om_app_state"];
  om.core._STAR_instrument_STAR_ = props["__om_instrument"];
  om.core._STAR_descriptor_STAR_ = props["__om_descriptor"];
  om.core._STAR_root_key_STAR_ = props["__om_root_key"];
  try {
    if (function() {
      var G__11420 = c;
      if (G__11420) {
        var bit__4478__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3797__auto__ = bit__4478__auto__;
          if (cljs.core.truth_(or__3797__auto__)) {
            return or__3797__auto__;
          } else {
            return G__11420.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__11420.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__11420);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__11420);
      }
    }()) {
      return om.core.render.call(null, c);
    } else {
      if (function() {
        var G__11421 = c;
        if (G__11421) {
          var bit__4478__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3797__auto__ = bit__4478__auto__;
            if (cljs.core.truth_(or__3797__auto__)) {
              return or__3797__auto__;
            } else {
              return G__11421.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__11421.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__11421);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__11421);
        }
      }()) {
        return om.core.render_props.call(null, c, props["__om_cursor"], om.core.get_state.call(null, this$));
      } else {
        if (function() {
          var G__11422 = c;
          if (G__11422) {
            var bit__4478__auto__ = null;
            if (cljs.core.truth_(function() {
              var or__3797__auto__ = bit__4478__auto__;
              if (cljs.core.truth_(or__3797__auto__)) {
                return or__3797__auto__;
              } else {
                return G__11422.om$core$IRenderState$;
              }
            }())) {
              return true;
            } else {
              if (!G__11422.cljs$lang$protocol_mask$partition$) {
                return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__11422);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__11422);
          }
        }()) {
          return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
        } else {
          return c;
        }
      }
    }
  } finally {
    om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_11419;
    om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_11418;
    om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_11417;
    om.core._STAR_state_STAR_ = _STAR_state_STAR_11416;
    om.core._STAR_parent_STAR_ = _STAR_parent_STAR_11415;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var c_11441 = om.core.children.call(null, this$);
  if (function() {
    var G__11423 = c_11441;
    if (G__11423) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11423.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__11423.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__11423);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__11423);
    }
  }()) {
    var state_11442 = this$.state;
    om.core.will_update.call(null, c_11441, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__3797__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var id = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
  var ret = {"__om_state":cljs.core.merge.call(null, function() {
    var G__11424 = c;
    if (G__11424) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11424.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__11424.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__11424);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__11424);
    }
  }() ? om.core.init_state.call(null, c) : null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693))), "__om_id":function() {
    var or__3797__auto__ = id;
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }()};
  props["__om_init_state"] = null;
  return ret;
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__11425 = c;
    if (G__11425) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11425.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__11425.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__11425);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__11425);
    }
  }()) {
    return om.core.did_mount.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__11426 = c;
    if (G__11426) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11426.om$core$IDisplayName$;
        }
      }())) {
        return true;
      } else {
        if (!G__11426.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__11426);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__11426);
    }
  }()) {
    return om.core.display_name.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_11443 = om.core.children.call(null, this$);
  if (function() {
    var G__11427 = c_11443;
    if (G__11427) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11427.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__11427.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__11427);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__11427);
    }
  }()) {
    om.core.will_mount.call(null, c_11443);
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}]);
om.core.specify_state_methods_BANG_ = function specify_state_methods_BANG_(obj) {
  var x11445 = obj;
  x11445.om$core$IGetState$ = true;
  x11445.om$core$IGetState$_get_state$arity$1 = function(x11445) {
    return function(this$) {
      var this$__$1 = this;
      var state = this$__$1.state;
      var or__3797__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return state["__om_state"];
      }
    };
  }(x11445);
  x11445.om$core$IGetState$_get_state$arity$2 = function(x11445) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x11445);
  x11445.om$core$IGetRenderState$ = true;
  x11445.om$core$IGetRenderState$_get_render_state$arity$1 = function(x11445) {
    return function(this$) {
      var this$__$1 = this;
      return this$__$1.state["__om_state"];
    };
  }(x11445);
  x11445.om$core$IGetRenderState$_get_render_state$arity$2 = function(x11445) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x11445);
  x11445.om$core$ISetState$ = true;
  x11445.om$core$ISetState$_set_state_BANG_$arity$3 = function(x11445) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var app_state = props["__om_app_state"];
      this$__$1.state["__om_pending_state"] = val;
      if (cljs.core.truth_(function() {
        var and__3785__auto__ = !(app_state == null);
        if (and__3785__auto__) {
          return render;
        } else {
          return and__3785__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x11445);
  x11445.om$core$ISetState$_set_state_BANG_$arity$4 = function(x11445) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var state = this$__$1.state;
      var pstate = om.core._get_state.call(null, this$__$1);
      var app_state = props["__om_app_state"];
      state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, ks, val);
      if (cljs.core.truth_(function() {
        var and__3785__auto__ = !(app_state == null);
        if (and__3785__auto__) {
          return render;
        } else {
          return and__3785__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x11445);
  return x11445;
};
om.core.pure_descriptor = om.core.specify_state_methods_BANG_.call(null, cljs.core.clj__GT_js.call(null, om.core.pure_methods));
om.core.react_id = function react_id(x) {
  var id = x["_rootNodeID"];
  if (cljs.core.truth_(id)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "id", "id", 252129435, null)))].join(""));
  }
  return id;
};
om.core.get_gstate = function get_gstate(owner) {
  return owner.props["__om_app_state"];
};
om.core.no_local_merge_pending_state = function no_local_merge_pending_state(owner) {
  var gstate = om.core.get_gstate.call(null, owner);
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, owner)], null);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), spath);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, function(gstate, spath, states) {
      return function(states__$1) {
        return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, states__$1, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923), (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1)), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1), 
        (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states__$1))), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973));
      };
    }(gstate, spath, states));
  } else {
    return null;
  }
};
om.core.no_local_state_methods = cljs.core.assoc.call(null, om.core.pure_methods, new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__3797__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var om_id = function() {
    var or__3797__auto__ = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }();
  var state = cljs.core.merge.call(null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)), function() {
    var G__11446 = c;
    if (G__11446) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11446.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__11446.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__11446);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__11446);
    }
  }() ? om.core.init_state.call(null, c) : null);
  var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
  props["__om_init_state"] = null;
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.assoc_in, spath, state);
  return{"__om_id":om_id};
}, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_11455 = om.core.children.call(null, this$);
  if (function() {
    var G__11447 = c_11455;
    if (G__11447) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11447.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__11447.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__11447);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__11447);
    }
  }()) {
    om.core.will_mount.call(null, c_11455);
  } else {
  }
  return om.core.no_local_merge_pending_state.call(null, this$);
}, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__11448 = c;
    if (G__11448) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11448.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__11448.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__11448);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__11448);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128)], null), cljs.core.dissoc, om.core.react_id.call(null, this$));
  var temp__4126__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4126__auto__) {
    var refs = temp__4126__auto__;
    var seq__11449 = cljs.core.seq.call(null, refs);
    var chunk__11450 = null;
    var count__11451 = 0;
    var i__11452 = 0;
    while (true) {
      if (i__11452 < count__11451) {
        var ref = cljs.core._nth.call(null, chunk__11450, i__11452);
        om.core.unobserve.call(null, this$, ref);
        var G__11456 = seq__11449;
        var G__11457 = chunk__11450;
        var G__11458 = count__11451;
        var G__11459 = i__11452 + 1;
        seq__11449 = G__11456;
        chunk__11450 = G__11457;
        count__11451 = G__11458;
        i__11452 = G__11459;
        continue;
      } else {
        var temp__4126__auto____$1 = cljs.core.seq.call(null, seq__11449);
        if (temp__4126__auto____$1) {
          var seq__11449__$1 = temp__4126__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11449__$1)) {
            var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__11449__$1);
            var G__11460 = cljs.core.chunk_rest.call(null, seq__11449__$1);
            var G__11461 = c__4584__auto__;
            var G__11462 = cljs.core.count.call(null, c__4584__auto__);
            var G__11463 = 0;
            seq__11449 = G__11460;
            chunk__11450 = G__11461;
            count__11451 = G__11462;
            i__11452 = G__11463;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__11449__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__11464 = cljs.core.next.call(null, seq__11449__$1);
            var G__11465 = null;
            var G__11466 = 0;
            var G__11467 = 0;
            seq__11449 = G__11464;
            chunk__11450 = G__11465;
            count__11451 = G__11466;
            i__11452 = G__11467;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), function(next_props, next_state) {
  var this$ = this;
  var props_11468 = this$.props;
  var c_11469 = om.core.children.call(null, this$);
  if (function() {
    var G__11453 = c_11469;
    if (G__11453) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11453.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__11453.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__11453);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__11453);
    }
  }()) {
    var state_11470 = this$.state;
    om.core.will_update.call(null, c_11469, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.no_local_merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var gstate = om.core.get_gstate.call(null, this$);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null));
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null);
  if (function() {
    var G__11454 = c;
    if (G__11454) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11454.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__11454.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__11454);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__11454);
    }
  }()) {
    var state_11471 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":prev_props}), function() {
      var or__3797__auto__ = (new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return(new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    }());
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, cljs.core.dissoc, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923));
  } else {
    return null;
  }
});
om.core.no_local_descriptor = function no_local_descriptor(methods$) {
  var x11473 = cljs.core.clj__GT_js.call(null, methods$);
  x11473.om$core$IGetState$ = true;
  x11473.om$core$IGetState$_get_state$arity$1 = function(x11473) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1)], null);
      var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
      var or__3797__auto__ = (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return(new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    };
  }(x11473);
  x11473.om$core$IGetState$_get_state$arity$2 = function(x11473) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x11473);
  x11473.om$core$IGetRenderState$ = true;
  x11473.om$core$IGetRenderState$_get_render_state$arity$1 = function(x11473) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
    };
  }(x11473);
  x11473.om$core$IGetRenderState$_get_render_state$arity$2 = function(x11473) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x11473);
  x11473.om$core$ISetState$ = true;
  x11473.om$core$ISetState$_set_state_BANG_$arity$3 = function(x11473) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var gstate = om.core.get_gstate.call(null, this$__$1);
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)], null);
      cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$__$1), cljs.core.assoc_in, spath, val);
      if (cljs.core.truth_(function() {
        var and__3785__auto__ = !(gstate == null);
        if (and__3785__auto__) {
          return render;
        } else {
          return and__3785__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, gstate, this$__$1);
      } else {
        return null;
      }
    };
  }(x11473);
  x11473.om$core$ISetState$_set_state_BANG_$arity$4 = function(x11473) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      return om.core._set_state_BANG_.call(null, this$__$1, cljs.core.assoc_in.call(null, om.core._get_state.call(null, this$__$1), ks, val), render);
    };
  }(x11473);
  return x11473;
};
om.core.valid_QMARK_ = function valid_QMARK_(x) {
  if (function() {
    var G__11475 = x;
    if (G__11475) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11475.om$core$ICursor$;
        }
      }())) {
        return true;
      } else {
        if (!G__11475.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__11475);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__11475);
    }
  }()) {
    return!cljs.core.keyword_identical_QMARK_.call(null, cljs.core.deref.call(null, x), new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
  } else {
    return true;
  }
};
om.core.MapCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2163640079;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var v = cljs.core._lookup.call(null, self__.value, k, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  if (!cljs.core._EQ_.call(null, v, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
    return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k));
  } else {
    return not_found;
  }
};
om.core.MapCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core.cursor_QMARK_.call(null, other)) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.MapCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path);
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(p__11477) {
        var vec__11478 = p__11477;
        var k = cljs.core.nth.call(null, vec__11478, 0, null);
        var v = cljs.core.nth.call(null, vec__11478, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k))], null);
      };
    }(this$__$1), self__.value);
  } else {
    return null;
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.MapCursor.prototype.call = function() {
  var G__11479 = null;
  var G__11479__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__11479__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__11479 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11479__2.call(this, self__, k);
      case 3:
        return G__11479__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11479.cljs$core$IFn$_invoke$arity$2 = G__11479__2;
  G__11479.cljs$core$IFn$_invoke$arity$3 = G__11479__3;
  return G__11479;
}();
om.core.MapCursor.prototype.apply = function(self__, args11476) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11476)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "om.core/MapCursor");
};
om.core.__GT_MapCursor = function __GT_MapCursor(value, state, path) {
  return new om.core.MapCursor(value, state, path);
};
om.core.IndexedCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2180424479;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, null);
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (n < cljs.core._count.call(null, self__.value)) {
    return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n, not_found), self__.state, cljs.core.conj.call(null, self__.path, n));
  } else {
    return not_found;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._peek.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._pop.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core.cursor_QMARK_.call(null, other)) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.IndexedCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, n, v) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(v, i) {
        return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, i));
      };
    }(this$__$1), self__.value, cljs.core.range.call(null));
  } else {
    return null;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.call = function() {
  var G__11481 = null;
  var G__11481__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__11481__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__11481 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11481__2.call(this, self__, k);
      case 3:
        return G__11481__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11481.cljs$core$IFn$_invoke$arity$2 = G__11481__2;
  G__11481.cljs$core$IFn$_invoke$arity$3 = G__11481__3;
  return G__11481;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args11480) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11480)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
  return cljs.core._write.call(null, writer__4385__auto__, "om.core/IndexedCursor");
};
om.core.__GT_IndexedCursor = function __GT_IndexedCursor(value, state, path) {
  return new om.core.IndexedCursor(value, state, path);
};
om.core.to_cursor_STAR_ = function to_cursor_STAR_(val, state, path) {
  var x11483 = cljs.core.clone.call(null, val);
  x11483.cljs$core$IEquiv$ = true;
  x11483.cljs$core$IEquiv$_equiv$arity$2 = function(x11483) {
    return function(_, other) {
      var ___$1 = this;
      if (om.core.cursor_QMARK_.call(null, other)) {
        return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
      } else {
        return cljs.core._EQ_.call(null, val, other);
      }
    };
  }(x11483);
  x11483.om$core$ITransact$ = true;
  x11483.om$core$ITransact$_transact_BANG_$arity$4 = function(x11483) {
    return function(this$, korks, f, tag) {
      var this$__$1 = this;
      return om.core.transact_STAR_.call(null, state, this$__$1, korks, f, tag);
    };
  }(x11483);
  x11483.om$core$ICursor$ = true;
  x11483.om$core$ICursor$_path$arity$1 = function(x11483) {
    return function(_) {
      var ___$1 = this;
      return path;
    };
  }(x11483);
  x11483.om$core$ICursor$_state$arity$1 = function(x11483) {
    return function(_) {
      var ___$1 = this;
      return state;
    };
  }(x11483);
  x11483.cljs$core$IDeref$ = true;
  x11483.cljs$core$IDeref$_deref$arity$1 = function(x11483) {
    return function(this$) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
    };
  }(x11483);
  return x11483;
};
om.core.to_cursor = function() {
  var to_cursor = null;
  var to_cursor__1 = function(val) {
    return to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__2 = function(val, state) {
    return to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__3 = function(val, state, path) {
    if (om.core.cursor_QMARK_.call(null, val)) {
      return val;
    } else {
      if (function() {
        var G__11486 = val;
        if (G__11486) {
          var bit__4478__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3797__auto__ = bit__4478__auto__;
            if (cljs.core.truth_(or__3797__auto__)) {
              return or__3797__auto__;
            } else {
              return G__11486.om$core$IToCursor$;
            }
          }())) {
            return true;
          } else {
            if (!G__11486.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__11486);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__11486);
        }
      }()) {
        return om.core._to_cursor.call(null, val, state, path);
      } else {
        if (cljs.core.indexed_QMARK_.call(null, val)) {
          return new om.core.IndexedCursor(val, state, path);
        } else {
          if (cljs.core.map_QMARK_.call(null, val)) {
            return new om.core.MapCursor(val, state, path);
          } else {
            if (function() {
              var G__11487 = val;
              if (G__11487) {
                var bit__4478__auto__ = G__11487.cljs$lang$protocol_mask$partition1$ & 8192;
                if (bit__4478__auto__ || G__11487.cljs$core$ICloneable$) {
                  return true;
                } else {
                  if (!G__11487.cljs$lang$protocol_mask$partition1$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__11487);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__11487);
              }
            }()) {
              return om.core.to_cursor_STAR_.call(null, val, state, path);
            } else {
              return val;
            }
          }
        }
      }
    }
  };
  to_cursor = function(val, state, path) {
    switch(arguments.length) {
      case 1:
        return to_cursor__1.call(this, val);
      case 2:
        return to_cursor__2.call(this, val, state);
      case 3:
        return to_cursor__3.call(this, val, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  to_cursor.cljs$core$IFn$_invoke$arity$1 = to_cursor__1;
  to_cursor.cljs$core$IFn$_invoke$arity$2 = to_cursor__2;
  to_cursor.cljs$core$IFn$_invoke$arity$3 = to_cursor__3;
  return to_cursor;
}();
om.core.notify_STAR_ = function notify_STAR_(cursor, tx_data) {
  var state = om.core._state.call(null, cursor);
  return om.core._notify_BANG_.call(null, state, tx_data, om.core.to_cursor.call(null, cljs.core.deref.call(null, state), state));
};
om.core.root_cursor = function root_cursor(atom) {
  if (function() {
    var G__11489 = atom;
    if (G__11489) {
      var bit__4478__auto__ = G__11489.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4478__auto__ || G__11489.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__11489.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11489);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11489);
    }
  }()) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "atom", "atom", 1243487874, null))))].join(""));
  }
  return om.core.to_cursor.call(null, cljs.core.deref.call(null, atom), atom, cljs.core.PersistentVector.EMPTY);
};
om.core._refs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.ref_sub_cursor = function ref_sub_cursor(x, parent) {
  var x11491 = cljs.core.clone.call(null, x);
  x11491.om$core$ITransact$ = true;
  x11491.om$core$ITransact$_transact_BANG_$arity$4 = function(x11491) {
    return function(cursor, korks, f, tag) {
      var cursor__$1 = this;
      om.core.commit_BANG_.call(null, cursor__$1, korks, f);
      return om.core._refresh_deps_BANG_.call(null, parent);
    };
  }(x11491);
  x11491.om$core$ICursorDerive$ = true;
  x11491.om$core$ICursorDerive$_derive$arity$4 = function(x11491) {
    return function(this$, derived, state, path) {
      var this$__$1 = this;
      var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path);
      if (om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_)) {
        return om.core.adapt.call(null, this$__$1, cursor_SINGLEQUOTE_);
      } else {
        return cursor_SINGLEQUOTE_;
      }
    };
  }(x11491);
  x11491.om$core$IAdapt$ = true;
  x11491.om$core$IAdapt$_adapt$arity$2 = function(x11491) {
    return function(this$, other) {
      var this$__$1 = this;
      return ref_sub_cursor.call(null, om.core.adapt.call(null, x, other), parent);
    };
  }(x11491);
  x11491.cljs$core$ICloneable$ = true;
  x11491.cljs$core$ICloneable$_clone$arity$1 = function(x11491) {
    return function(this$) {
      var this$__$1 = this;
      return ref_sub_cursor.call(null, cljs.core.clone.call(null, x), parent);
    };
  }(x11491);
  return x11491;
};
om.core.ref_cursor = function ref_cursor(cursor) {
  if (om.core.cursor_QMARK_.call(null, cursor)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (function() {
    var G__11498 = cursor;
    if (G__11498) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11498.om$core$IOmRef$;
        }
      }())) {
        return true;
      } else {
        if (!G__11498.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__11498);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__11498);
    }
  }()) {
    return cursor;
  } else {
    var path = om.core.path.call(null, cursor);
    var storage = cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null), cljs.core.fnil.call(null, cljs.core.identity, cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY))), path);
    var x11499 = cljs.core.clone.call(null, cursor);
    x11499.om$core$ITransact$ = true;
    x11499.om$core$ITransact$_transact_BANG_$arity$4 = function(x11499, path, storage) {
      return function(cursor__$1, korks, f, tag) {
        var cursor__$2 = this;
        om.core.commit_BANG_.call(null, cursor__$2, korks, f);
        return om.core._refresh_deps_BANG_.call(null, cursor__$2);
      };
    }(x11499, path, storage);
    x11499.om$core$IOmRef$ = true;
    x11499.om$core$IOmRef$_add_dep_BANG_$arity$2 = function(x11499, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, storage, cljs.core.assoc, om.core.id.call(null, c), c);
      };
    }(x11499, path, storage);
    x11499.om$core$IOmRef$_remove_dep_BANG_$arity$2 = function(x11499, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        var m = cljs.core.swap_BANG_.call(null, storage, cljs.core.dissoc, om.core.id.call(null, c));
        if (cljs.core.count.call(null, m) === 0) {
          return cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.dissoc, path);
        } else {
          return null;
        }
      };
    }(x11499, path, storage);
    x11499.om$core$IOmRef$_refresh_deps_BANG_$arity$1 = function(x11499, path, storage) {
      return function(_) {
        var ___$1 = this;
        var seq__11500 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, storage)));
        var chunk__11501 = null;
        var count__11502 = 0;
        var i__11503 = 0;
        while (true) {
          if (i__11503 < count__11502) {
            var c = cljs.core._nth.call(null, chunk__11501, i__11503);
            om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
            var G__11504 = seq__11500;
            var G__11505 = chunk__11501;
            var G__11506 = count__11502;
            var G__11507 = i__11503 + 1;
            seq__11500 = G__11504;
            chunk__11501 = G__11505;
            count__11502 = G__11506;
            i__11503 = G__11507;
            continue;
          } else {
            var temp__4126__auto__ = cljs.core.seq.call(null, seq__11500);
            if (temp__4126__auto__) {
              var seq__11500__$1 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11500__$1)) {
                var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__11500__$1);
                var G__11508 = cljs.core.chunk_rest.call(null, seq__11500__$1);
                var G__11509 = c__4584__auto__;
                var G__11510 = cljs.core.count.call(null, c__4584__auto__);
                var G__11511 = 0;
                seq__11500 = G__11508;
                chunk__11501 = G__11509;
                count__11502 = G__11510;
                i__11503 = G__11511;
                continue;
              } else {
                var c = cljs.core.first.call(null, seq__11500__$1);
                om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
                var G__11512 = cljs.core.next.call(null, seq__11500__$1);
                var G__11513 = null;
                var G__11514 = 0;
                var G__11515 = 0;
                seq__11500 = G__11512;
                chunk__11501 = G__11513;
                count__11502 = G__11514;
                i__11503 = G__11515;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x11499, path, storage);
    x11499.om$core$IOmRef$_get_deps$arity$1 = function(x11499, path, storage) {
      return function(_) {
        var ___$1 = this;
        return cljs.core.deref.call(null, storage);
      };
    }(x11499, path, storage);
    x11499.om$core$ICursorDerive$ = true;
    x11499.om$core$ICursorDerive$_derive$arity$4 = function(x11499, path, storage) {
      return function(this$, derived, state, path__$1) {
        var this$__$1 = this;
        var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path__$1);
        if (om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_)) {
          return om.core.ref_sub_cursor.call(null, cursor_SINGLEQUOTE_, this$__$1);
        } else {
          return cursor_SINGLEQUOTE_;
        }
      };
    }(x11499, path, storage);
    return x11499;
  }
};
om.core.add_ref_to_component_BANG_ = function add_ref_to_component_BANG_(c, ref) {
  var state = c.state;
  var refs = function() {
    var or__3797__auto__ = state["__om_refs"];
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  }();
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return null;
  } else {
    return state["__om_refs"] = cljs.core.conj.call(null, refs, ref);
  }
};
om.core.remove_ref_from_component_BANG_ = function remove_ref_from_component_BANG_(c, ref) {
  var state = c.state;
  var refs = state["__om_refs"];
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return state["__om_refs"] = cljs.core.disj.call(null, refs, ref);
  } else {
    return null;
  }
};
om.core.observe = function observe(c, ref) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  if (om.core.cursor_QMARK_.call(null, ref)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "ref", "ref", -1364538802, null))))].join(""));
  }
  om.core.add_ref_to_component_BANG_.call(null, c, ref);
  om.core._add_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.unobserve = function unobserve(c, ref) {
  om.core.remove_ref_from_component_BANG_.call(null, c, ref);
  om.core._remove_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.get_renderT = function get_renderT(state) {
  var or__3797__auto__ = state.om$render$T;
  if (cljs.core.truth_(or__3797__auto__)) {
    return or__3797__auto__;
  } else {
    return 0;
  }
};
om.core.render_all = function() {
  var render_all = null;
  var render_all__0 = function() {
    return render_all.call(null, null);
  };
  var render_all__1 = function(state) {
    om.core.refresh_queued = false;
    var seq__11520_11524 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
    var chunk__11521_11525 = null;
    var count__11522_11526 = 0;
    var i__11523_11527 = 0;
    while (true) {
      if (i__11523_11527 < count__11522_11526) {
        var f_11528 = cljs.core._nth.call(null, chunk__11521_11525, i__11523_11527);
        f_11528.call(null);
        var G__11529 = seq__11520_11524;
        var G__11530 = chunk__11521_11525;
        var G__11531 = count__11522_11526;
        var G__11532 = i__11523_11527 + 1;
        seq__11520_11524 = G__11529;
        chunk__11521_11525 = G__11530;
        count__11522_11526 = G__11531;
        i__11523_11527 = G__11532;
        continue;
      } else {
        var temp__4126__auto___11533 = cljs.core.seq.call(null, seq__11520_11524);
        if (temp__4126__auto___11533) {
          var seq__11520_11534__$1 = temp__4126__auto___11533;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11520_11534__$1)) {
            var c__4584__auto___11535 = cljs.core.chunk_first.call(null, seq__11520_11534__$1);
            var G__11536 = cljs.core.chunk_rest.call(null, seq__11520_11534__$1);
            var G__11537 = c__4584__auto___11535;
            var G__11538 = cljs.core.count.call(null, c__4584__auto___11535);
            var G__11539 = 0;
            seq__11520_11524 = G__11536;
            chunk__11521_11525 = G__11537;
            count__11522_11526 = G__11538;
            i__11523_11527 = G__11539;
            continue;
          } else {
            var f_11540 = cljs.core.first.call(null, seq__11520_11534__$1);
            f_11540.call(null);
            var G__11541 = cljs.core.next.call(null, seq__11520_11534__$1);
            var G__11542 = null;
            var G__11543 = 0;
            var G__11544 = 0;
            seq__11520_11524 = G__11541;
            chunk__11521_11525 = G__11542;
            count__11522_11526 = G__11543;
            i__11523_11527 = G__11544;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (state == null) {
      return null;
    } else {
      return state.om$render$T = om.core.get_renderT.call(null, state) + 1;
    }
  };
  render_all = function(state) {
    switch(arguments.length) {
      case 0:
        return render_all__0.call(this);
      case 1:
        return render_all__1.call(this, state);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  render_all.cljs$core$IFn$_invoke$arity$0 = render_all__0;
  render_all.cljs$core$IFn$_invoke$arity$1 = render_all__1;
  return render_all;
}();
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.valid_component_QMARK_ = function valid_component_QMARK_(x, f) {
  if (function() {
    var or__3797__auto__ = function() {
      var G__11551 = x;
      if (G__11551) {
        var bit__4478__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3797__auto__ = bit__4478__auto__;
          if (cljs.core.truth_(or__3797__auto__)) {
            return or__3797__auto__;
          } else {
            return G__11551.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__11551.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__11551);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__11551);
      }
    }();
    if (or__3797__auto__) {
      return or__3797__auto__;
    } else {
      var or__3797__auto____$1 = function() {
        var G__11553 = x;
        if (G__11553) {
          var bit__4478__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3797__auto____$1 = bit__4478__auto__;
            if (cljs.core.truth_(or__3797__auto____$1)) {
              return or__3797__auto____$1;
            } else {
              return G__11553.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__11553.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__11553);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__11553);
        }
      }();
      if (or__3797__auto____$1) {
        return or__3797__auto____$1;
      } else {
        var G__11554 = x;
        if (G__11554) {
          var bit__4478__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3797__auto____$2 = bit__4478__auto__;
            if (cljs.core.truth_(or__3797__auto____$2)) {
              return or__3797__auto____$2;
            } else {
              return G__11554.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__11554.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__11554);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__11554);
        }
      }
    }
  }()) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Om component fn, "), cljs.core.str(f.name), cljs.core.str(" does not return valid instance")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRender", "IRender", 590822196, null), new cljs.core.Symbol(null, 
    "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderProps", "IRenderProps", 2115139472, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderState", "IRenderState", -897673898, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)))))].join(""));
  }
};
om.core.valid_opts_QMARK_ = function valid_opts_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018), null, new cljs.core.Keyword(null, "fn", "fn", -1175266204), null, new cljs.core.Keyword(null, "instrument", "instrument", -960698844), null, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348), null, new cljs.core.Keyword(null, "key", "key", -1516042587), null, new cljs.core.Keyword(null, "init-state", 
  "init-state", 1450863212), null, new cljs.core.Keyword(null, "state", "state", -1988618099), null, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479), null, new cljs.core.Keyword(null, "opts", "opts", 155075701), null, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), null, new cljs.core.Keyword(null, "shared", "shared", -384145993), null], null), null), cljs.core.keys.call(null, m));
};
om.core.id = function id(owner) {
  return owner.state["__om_id"];
};
om.core.get_descriptor = function() {
  var get_descriptor = null;
  var get_descriptor__1 = function(f) {
    return get_descriptor.call(null, f, null);
  };
  var get_descriptor__2 = function(f, descriptor) {
    if (f["om$descriptor"] == null) {
      f["om$descriptor"] = React.createFactory(React.createClass(function() {
        var or__3797__auto__ = descriptor;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          var or__3797__auto____$1 = om.core._STAR_descriptor_STAR_;
          if (cljs.core.truth_(or__3797__auto____$1)) {
            return or__3797__auto____$1;
          } else {
            return om.core.pure_descriptor;
          }
        }
      }()));
    } else {
    }
    return f["om$descriptor"];
  };
  get_descriptor = function(f, descriptor) {
    switch(arguments.length) {
      case 1:
        return get_descriptor__1.call(this, f);
      case 2:
        return get_descriptor__2.call(this, f, descriptor);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_descriptor.cljs$core$IFn$_invoke$arity$1 = get_descriptor__1;
  get_descriptor.cljs$core$IFn$_invoke$arity$2 = get_descriptor__2;
  return get_descriptor;
}();
om.core.getf = function() {
  var getf = null;
  var getf__2 = function(f, cursor) {
    if (f instanceof cljs.core.MultiFn) {
      var dv = f.dispatch_fn.call(null, cursor, null);
      return cljs.core.get_method.call(null, f, dv);
    } else {
      return f;
    }
  };
  var getf__3 = function(f, cursor, opts) {
    if (f instanceof cljs.core.MultiFn) {
      var dv = f.dispatch_fn.call(null, cursor, null, opts);
      return cljs.core.get_method.call(null, f, dv);
    } else {
      return f;
    }
  };
  getf = function(f, cursor, opts) {
    switch(arguments.length) {
      case 2:
        return getf__2.call(this, f, cursor);
      case 3:
        return getf__3.call(this, f, cursor, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  getf.cljs$core$IFn$_invoke$arity$2 = getf__2;
  getf.cljs$core$IFn$_invoke$arity$3 = getf__3;
  return getf;
}();
om.core.build_STAR_ = function() {
  var build_STAR_ = null;
  var build_STAR___2 = function(f, cursor) {
    return build_STAR_.call(null, f, cursor, null);
  };
  var build_STAR___3 = function(f, cursor, m) {
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    if (m == null || cljs.core.map_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
    }
    if (om.core.valid_opts_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :key-fn :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-opts?", "valid-opts?", 1000038576, null), new cljs.core.Symbol(null, "m", "m", 
      -1021758608, null))))].join(""));
    }
    if (m == null) {
      var shared = om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
      var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor));
      return ctor.call(null, {"children":function(shared, ctor) {
        return function(this$) {
          var ret = f.call(null, cursor, this$);
          om.core.valid_component_QMARK_.call(null, ret, f);
          return ret;
        };
      }(shared, ctor), "__om_instrument":om.core._STAR_instrument_STAR_, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_app_state":om.core._STAR_state_STAR_, "__om_root_key":om.core._STAR_root_key_STAR_, "__om_shared":shared, "__om_cursor":cursor});
    } else {
      var map__11556 = m;
      var map__11556__$1 = cljs.core.seq_QMARK_.call(null, map__11556) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11556) : map__11556;
      var opts = cljs.core.get.call(null, map__11556__$1, new cljs.core.Keyword(null, "opts", "opts", 155075701));
      var init_state = cljs.core.get.call(null, map__11556__$1, new cljs.core.Keyword(null, "init-state", "init-state", 1450863212));
      var state = cljs.core.get.call(null, map__11556__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
      var key_fn = cljs.core.get.call(null, map__11556__$1, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479));
      var key = cljs.core.get.call(null, map__11556__$1, new cljs.core.Keyword(null, "key", "key", -1516042587));
      var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", -1175266204));
      var cursor_SINGLEQUOTE_ = !(dataf == null) ? function() {
        var temp__4124__auto__ = (new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var i = temp__4124__auto__;
          return dataf.call(null, cursor, i);
        } else {
          return dataf.call(null, cursor);
        }
      }() : cursor;
      var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : !(key_fn == null) ? key_fn.call(null, cursor_SINGLEQUOTE_) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348));
      var shared = function() {
        var or__3797__auto__ = (new cljs.core.Keyword(null, "shared", "shared", -384145993)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
        }
      }();
      var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor_SINGLEQUOTE_, opts), (new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018)).cljs$core$IFn$_invoke$arity$1(m));
      return ctor.call(null, {"__om_state":state, "__om_instrument":om.core._STAR_instrument_STAR_, "children":opts == null ? function(map__11556, map__11556__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
        return function(this$) {
          var ret = f.call(null, cursor_SINGLEQUOTE_, this$);
          om.core.valid_component_QMARK_.call(null, ret, f);
          return ret;
        };
      }(map__11556, map__11556__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) : function(map__11556, map__11556__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
        return function(this$) {
          var ret = f.call(null, cursor_SINGLEQUOTE_, this$, opts);
          om.core.valid_component_QMARK_.call(null, ret, f);
          return ret;
        };
      }(map__11556, map__11556__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor), "__om_init_state":init_state, "key":function() {
        var or__3797__auto__ = rkey;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return undefined;
        }
      }(), "__om_app_state":om.core._STAR_state_STAR_, "__om_cursor":cursor_SINGLEQUOTE_, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m), "__om_shared":shared, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_root_key":om.core._STAR_root_key_STAR_});
    }
  };
  build_STAR_ = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build_STAR___2.call(this, f, cursor);
      case 3:
        return build_STAR___3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_STAR_.cljs$core$IFn$_invoke$arity$2 = build_STAR___2;
  build_STAR_.cljs$core$IFn$_invoke$arity$3 = build_STAR___3;
  return build_STAR_;
}();
om.core.build = function() {
  var build = null;
  var build__2 = function(f, x) {
    return build.call(null, f, x, null);
  };
  var build__3 = function(f, x, m) {
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    if (m == null || cljs.core.map_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
    }
    if (!(om.core._STAR_instrument_STAR_ == null)) {
      var ret = om.core._STAR_instrument_STAR_.call(null, f, x, m);
      if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "pass", "om.core/pass", -1453289268))) {
        return om.core.build_STAR_.call(null, f, x, m);
      } else {
        return ret;
      }
    } else {
      return om.core.build_STAR_.call(null, f, x, m);
    }
  };
  build = function(f, x, m) {
    switch(arguments.length) {
      case 2:
        return build__2.call(this, f, x);
      case 3:
        return build__3.call(this, f, x, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build.cljs$core$IFn$_invoke$arity$2 = build__2;
  build.cljs$core$IFn$_invoke$arity$3 = build__3;
  return build;
}();
om.core.build_all = function() {
  var build_all = null;
  var build_all__2 = function(f, xs) {
    return build_all.call(null, f, xs, null);
  };
  var build_all__3 = function(f, xs, m) {
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    if (m == null || cljs.core.map_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
    }
    return cljs.core.map.call(null, function(x, i) {
      return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), i));
    }, xs, cljs.core.range.call(null));
  };
  build_all = function(f, xs, m) {
    switch(arguments.length) {
      case 2:
        return build_all__2.call(this, f, xs);
      case 3:
        return build_all__3.call(this, f, xs, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_all.cljs$core$IFn$_invoke$arity$2 = build_all__2;
  build_all.cljs$core$IFn$_invoke$arity$3 = build_all__3;
  return build_all;
}();
om.core.setup = function setup(state, key, tx_listen) {
  if (function() {
    var G__11565 = state;
    if (G__11565) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11565.om$core$INotify$;
        }
      }())) {
        return true;
      } else {
        if (!G__11565.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__11565);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__11565);
    }
  }()) {
  } else {
    var properties_11573 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var listeners_11574 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var render_queue_11575 = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
    var x11566_11576 = state;
    x11566_11576.om$core$IRenderQueue$ = true;
    x11566_11576.om$core$IRenderQueue$_get_queue$arity$1 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.deref.call(null, render_queue_11575);
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
    x11566_11576.om$core$IRenderQueue$_queue_render_BANG_$arity$2 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(this$, c) {
        var this$__$1 = this;
        if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, render_queue_11575), c)) {
          return null;
        } else {
          cljs.core.swap_BANG_.call(null, render_queue_11575, cljs.core.conj, c);
          return cljs.core.swap_BANG_.call(null, this$__$1, cljs.core.identity);
        }
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
    x11566_11576.om$core$IRenderQueue$_empty_queue_BANG_$arity$1 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.swap_BANG_.call(null, render_queue_11575, cljs.core.empty);
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
    x11566_11576.om$core$INotify$ = true;
    x11566_11576.om$core$INotify$_listen_BANG_$arity$3 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(this$, key__$1, tx_listen__$1) {
        var this$__$1 = this;
        if (tx_listen__$1 == null) {
        } else {
          cljs.core.swap_BANG_.call(null, listeners_11574, cljs.core.assoc, key__$1, tx_listen__$1);
        }
        return this$__$1;
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
    x11566_11576.om$core$INotify$_unlisten_BANG_$arity$2 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(this$, key__$1) {
        var this$__$1 = this;
        cljs.core.swap_BANG_.call(null, listeners_11574, cljs.core.dissoc, key__$1);
        return this$__$1;
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
    x11566_11576.om$core$INotify$_notify_BANG_$arity$3 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(this$, tx_data, root_cursor) {
        var this$__$1 = this;
        var seq__11567_11577 = cljs.core.seq.call(null, cljs.core.deref.call(null, listeners_11574));
        var chunk__11568_11578 = null;
        var count__11569_11579 = 0;
        var i__11570_11580 = 0;
        while (true) {
          if (i__11570_11580 < count__11569_11579) {
            var vec__11571_11581 = cljs.core._nth.call(null, chunk__11568_11578, i__11570_11580);
            var __11582 = cljs.core.nth.call(null, vec__11571_11581, 0, null);
            var f_11583 = cljs.core.nth.call(null, vec__11571_11581, 1, null);
            f_11583.call(null, tx_data, root_cursor);
            var G__11584 = seq__11567_11577;
            var G__11585 = chunk__11568_11578;
            var G__11586 = count__11569_11579;
            var G__11587 = i__11570_11580 + 1;
            seq__11567_11577 = G__11584;
            chunk__11568_11578 = G__11585;
            count__11569_11579 = G__11586;
            i__11570_11580 = G__11587;
            continue;
          } else {
            var temp__4126__auto___11588 = cljs.core.seq.call(null, seq__11567_11577);
            if (temp__4126__auto___11588) {
              var seq__11567_11589__$1 = temp__4126__auto___11588;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11567_11589__$1)) {
                var c__4584__auto___11590 = cljs.core.chunk_first.call(null, seq__11567_11589__$1);
                var G__11591 = cljs.core.chunk_rest.call(null, seq__11567_11589__$1);
                var G__11592 = c__4584__auto___11590;
                var G__11593 = cljs.core.count.call(null, c__4584__auto___11590);
                var G__11594 = 0;
                seq__11567_11577 = G__11591;
                chunk__11568_11578 = G__11592;
                count__11569_11579 = G__11593;
                i__11570_11580 = G__11594;
                continue;
              } else {
                var vec__11572_11595 = cljs.core.first.call(null, seq__11567_11589__$1);
                var __11596 = cljs.core.nth.call(null, vec__11572_11595, 0, null);
                var f_11597 = cljs.core.nth.call(null, vec__11572_11595, 1, null);
                f_11597.call(null, tx_data, root_cursor);
                var G__11598 = cljs.core.next.call(null, seq__11567_11589__$1);
                var G__11599 = null;
                var G__11600 = 0;
                var G__11601 = 0;
                seq__11567_11577 = G__11598;
                chunk__11568_11578 = G__11599;
                count__11569_11579 = G__11600;
                i__11570_11580 = G__11601;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return this$__$1;
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
    x11566_11576.om$core$IRootProperties$ = true;
    x11566_11576.om$core$IRootProperties$_set_property_BANG_$arity$4 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(_, id, k, v) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_11573, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null), v);
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
    x11566_11576.om$core$IRootProperties$_remove_property_BANG_$arity$3 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_11573, cljs.core.dissoc, id, k);
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
    x11566_11576.om$core$IRootProperties$_remove_properties_BANG_$arity$2 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(_, id) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_11573, cljs.core.dissoc, id);
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
    x11566_11576.om$core$IRootProperties$_get_property$arity$3 = function(x11566_11576, properties_11573, listeners_11574, render_queue_11575) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, properties_11573), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null));
      };
    }(x11566_11576, properties_11573, listeners_11574, render_queue_11575);
  }
  return om.core._listen_BANG_.call(null, state, key, tx_listen);
};
om.core.tear_down = function tear_down(state, key) {
  return om.core._unlisten_BANG_.call(null, state, key);
};
om.core.tag_root_key = function tag_root_key(cursor, root_key) {
  if (om.core.cursor_QMARK_.call(null, cursor)) {
    var x11603 = cljs.core.clone.call(null, cursor);
    x11603.om$core$IRootKey$ = true;
    x11603.om$core$IRootKey$_root_key$arity$1 = function(x11603) {
      return function(this$) {
        var this$__$1 = this;
        return root_key;
      };
    }(x11603);
    x11603.om$core$IAdapt$ = true;
    x11603.om$core$IAdapt$_adapt$arity$2 = function(x11603) {
      return function(this$, other) {
        var this$__$1 = this;
        return tag_root_key.call(null, om.core.adapt.call(null, cursor, other), root_key);
      };
    }(x11603);
    x11603.cljs$core$ICloneable$ = true;
    x11603.cljs$core$ICloneable$_clone$arity$1 = function(x11603) {
      return function(this$) {
        var this$__$1 = this;
        return tag_root_key.call(null, cljs.core.clone.call(null, cursor), root_key);
      };
    }(x11603);
    return x11603;
  } else {
    return cursor;
  }
};
om.core.root = function root(f, value, p__11604) {
  var map__11667 = p__11604;
  var map__11667__$1 = cljs.core.seq_QMARK_.call(null, map__11667) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11667) : map__11667;
  var options = map__11667__$1;
  var raf = cljs.core.get.call(null, map__11667__$1, new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  var adapt = cljs.core.get.call(null, map__11667__$1, new cljs.core.Keyword(null, "adapt", "adapt", -1817022327));
  var descriptor = cljs.core.get.call(null, map__11667__$1, new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018));
  var instrument = cljs.core.get.call(null, map__11667__$1, new cljs.core.Keyword(null, "instrument", "instrument", -960698844));
  var path = cljs.core.get.call(null, map__11667__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
  var tx_listen = cljs.core.get.call(null, map__11667__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367));
  var target = cljs.core.get.call(null, map__11667__$1, new cljs.core.Keyword(null, "target", "target", 253001721));
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First argument must be a function"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!(target == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No target specified to om.core/root"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null)))))].join(""));
  }
  var roots_SINGLEQUOTE__11729 = cljs.core.deref.call(null, om.core.roots);
  if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__11729, target)) {
    cljs.core.get.call(null, roots_SINGLEQUOTE__11729, target).call(null);
  } else {
  }
  var watch_key = cljs.core.gensym.call(null);
  var state = function() {
    var G__11668 = value;
    if (G__11668) {
      var bit__4478__auto__ = G__11668.cljs$lang$protocol_mask$partition1$ & 16384;
      if (bit__4478__auto__ || G__11668.cljs$core$IAtom$) {
        return true;
      } else {
        if (!G__11668.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__11668);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__11668);
    }
  }() ? value : cljs.core.atom.call(null, value);
  var state__$1 = om.core.setup.call(null, state, watch_key, tx_listen);
  var adapt__$1 = function() {
    var or__3797__auto__ = adapt;
    if (cljs.core.truth_(or__3797__auto__)) {
      return or__3797__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  var m = cljs.core.dissoc.call(null, options, new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367), new cljs.core.Keyword(null, "path", "path", -188191168), new cljs.core.Keyword(null, "adapt", "adapt", -1817022327), new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  var ret = cljs.core.atom.call(null, null);
  var rootf = function(watch_key, state, state__$1, adapt__$1, m, ret, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function rootf() {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      var value__$1 = cljs.core.deref.call(null, state__$1);
      var cursor = adapt__$1.call(null, om.core.tag_root_key.call(null, path == null ? om.core.to_cursor.call(null, value__$1, state__$1, cljs.core.PersistentVector.EMPTY) : om.core.to_cursor.call(null, cljs.core.get_in.call(null, value__$1, path), state__$1, path), watch_key));
      if (cljs.core.truth_(om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643)))) {
      } else {
        var c_11730 = om.dom.render.call(null, function() {
          var _STAR_descriptor_STAR_11699 = om.core._STAR_descriptor_STAR_;
          var _STAR_instrument_STAR_11700 = om.core._STAR_instrument_STAR_;
          var _STAR_state_STAR_11701 = om.core._STAR_state_STAR_;
          var _STAR_root_key_STAR_11702 = om.core._STAR_root_key_STAR_;
          om.core._STAR_descriptor_STAR_ = descriptor;
          om.core._STAR_instrument_STAR_ = instrument;
          om.core._STAR_state_STAR_ = state__$1;
          om.core._STAR_root_key_STAR_ = watch_key;
          try {
            return om.core.build.call(null, f, cursor, m);
          } finally {
            om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_11702;
            om.core._STAR_state_STAR_ = _STAR_state_STAR_11701;
            om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_11700;
            om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_11699;
          }
        }(), target);
        if (cljs.core.deref.call(null, ret) == null) {
          cljs.core.reset_BANG_.call(null, ret, c_11730);
        } else {
        }
      }
      var queue_11731 = om.core._get_queue.call(null, state__$1);
      om.core._empty_queue_BANG_.call(null, state__$1);
      if (cljs.core.empty_QMARK_.call(null, queue_11731)) {
      } else {
        var seq__11703_11732 = cljs.core.seq.call(null, queue_11731);
        var chunk__11704_11733 = null;
        var count__11705_11734 = 0;
        var i__11706_11735 = 0;
        while (true) {
          if (i__11706_11735 < count__11705_11734) {
            var c_11736 = cljs.core._nth.call(null, chunk__11704_11733, i__11706_11735);
            if (cljs.core.truth_(c_11736.isMounted())) {
              var temp__4126__auto___11737 = c_11736.state["__om_next_cursor"];
              if (cljs.core.truth_(temp__4126__auto___11737)) {
                var next_props_11738 = temp__4126__auto___11737;
                c_11736.props["__om_cursor"] = next_props_11738;
                c_11736.state["__om_next_cursor"] = null;
              } else {
              }
              if (cljs.core.truth_(function() {
                var or__3797__auto__ = !function() {
                  var G__11708 = om.core.children.call(null, c_11736);
                  if (G__11708) {
                    var bit__4478__auto__ = null;
                    if (cljs.core.truth_(function() {
                      var or__3797__auto__ = bit__4478__auto__;
                      if (cljs.core.truth_(or__3797__auto__)) {
                        return or__3797__auto__;
                      } else {
                        return G__11708.om$core$ICheckState$;
                      }
                    }())) {
                      return true;
                    } else {
                      if (!G__11708.cljs$lang$protocol_mask$partition$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__11708);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__11708);
                  }
                }();
                if (or__3797__auto__) {
                  return or__3797__auto__;
                } else {
                  return c_11736.shouldComponentUpdate(c_11736.props, c_11736.state);
                }
              }())) {
                c_11736.forceUpdate();
              } else {
              }
            } else {
            }
            var G__11739 = seq__11703_11732;
            var G__11740 = chunk__11704_11733;
            var G__11741 = count__11705_11734;
            var G__11742 = i__11706_11735 + 1;
            seq__11703_11732 = G__11739;
            chunk__11704_11733 = G__11740;
            count__11705_11734 = G__11741;
            i__11706_11735 = G__11742;
            continue;
          } else {
            var temp__4126__auto___11743 = cljs.core.seq.call(null, seq__11703_11732);
            if (temp__4126__auto___11743) {
              var seq__11703_11744__$1 = temp__4126__auto___11743;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11703_11744__$1)) {
                var c__4584__auto___11745 = cljs.core.chunk_first.call(null, seq__11703_11744__$1);
                var G__11746 = cljs.core.chunk_rest.call(null, seq__11703_11744__$1);
                var G__11747 = c__4584__auto___11745;
                var G__11748 = cljs.core.count.call(null, c__4584__auto___11745);
                var G__11749 = 0;
                seq__11703_11732 = G__11746;
                chunk__11704_11733 = G__11747;
                count__11705_11734 = G__11748;
                i__11706_11735 = G__11749;
                continue;
              } else {
                var c_11750 = cljs.core.first.call(null, seq__11703_11744__$1);
                if (cljs.core.truth_(c_11750.isMounted())) {
                  var temp__4126__auto___11751__$1 = c_11750.state["__om_next_cursor"];
                  if (cljs.core.truth_(temp__4126__auto___11751__$1)) {
                    var next_props_11752 = temp__4126__auto___11751__$1;
                    c_11750.props["__om_cursor"] = next_props_11752;
                    c_11750.state["__om_next_cursor"] = null;
                  } else {
                  }
                  if (cljs.core.truth_(function() {
                    var or__3797__auto__ = !function() {
                      var G__11710 = om.core.children.call(null, c_11750);
                      if (G__11710) {
                        var bit__4478__auto__ = null;
                        if (cljs.core.truth_(function() {
                          var or__3797__auto__ = bit__4478__auto__;
                          if (cljs.core.truth_(or__3797__auto__)) {
                            return or__3797__auto__;
                          } else {
                            return G__11710.om$core$ICheckState$;
                          }
                        }())) {
                          return true;
                        } else {
                          if (!G__11710.cljs$lang$protocol_mask$partition$) {
                            return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__11710);
                          } else {
                            return false;
                          }
                        }
                      } else {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__11710);
                      }
                    }();
                    if (or__3797__auto__) {
                      return or__3797__auto__;
                    } else {
                      return c_11750.shouldComponentUpdate(c_11750.props, c_11750.state);
                    }
                  }())) {
                    c_11750.forceUpdate();
                  } else {
                  }
                } else {
                }
                var G__11753 = cljs.core.next.call(null, seq__11703_11744__$1);
                var G__11754 = null;
                var G__11755 = 0;
                var G__11756 = 0;
                seq__11703_11732 = G__11753;
                chunk__11704_11733 = G__11754;
                count__11705_11734 = G__11755;
                i__11706_11735 = G__11756;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      var _refs_11757 = cljs.core.deref.call(null, om.core._refs);
      if (cljs.core.empty_QMARK_.call(null, _refs_11757)) {
      } else {
        var seq__11711_11758 = cljs.core.seq.call(null, _refs_11757);
        var chunk__11712_11759 = null;
        var count__11713_11760 = 0;
        var i__11714_11761 = 0;
        while (true) {
          if (i__11714_11761 < count__11713_11760) {
            var vec__11715_11762 = cljs.core._nth.call(null, chunk__11712_11759, i__11714_11761);
            var path_11763__$1 = cljs.core.nth.call(null, vec__11715_11762, 0, null);
            var cs_11764 = cljs.core.nth.call(null, vec__11715_11762, 1, null);
            var cs_11765__$1 = cljs.core.deref.call(null, cs_11764);
            var seq__11716_11766 = cljs.core.seq.call(null, cs_11765__$1);
            var chunk__11717_11767 = null;
            var count__11718_11768 = 0;
            var i__11719_11769 = 0;
            while (true) {
              if (i__11719_11769 < count__11718_11768) {
                var vec__11720_11770 = cljs.core._nth.call(null, chunk__11717_11767, i__11719_11769);
                var id_11771 = cljs.core.nth.call(null, vec__11720_11770, 0, null);
                var c_11772 = cljs.core.nth.call(null, vec__11720_11770, 1, null);
                if (cljs.core.truth_(c_11772.shouldComponentUpdate(c_11772.props, c_11772.state))) {
                  c_11772.forceUpdate();
                } else {
                }
                var G__11773 = seq__11716_11766;
                var G__11774 = chunk__11717_11767;
                var G__11775 = count__11718_11768;
                var G__11776 = i__11719_11769 + 1;
                seq__11716_11766 = G__11773;
                chunk__11717_11767 = G__11774;
                count__11718_11768 = G__11775;
                i__11719_11769 = G__11776;
                continue;
              } else {
                var temp__4126__auto___11777 = cljs.core.seq.call(null, seq__11716_11766);
                if (temp__4126__auto___11777) {
                  var seq__11716_11778__$1 = temp__4126__auto___11777;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__11716_11778__$1)) {
                    var c__4584__auto___11779 = cljs.core.chunk_first.call(null, seq__11716_11778__$1);
                    var G__11780 = cljs.core.chunk_rest.call(null, seq__11716_11778__$1);
                    var G__11781 = c__4584__auto___11779;
                    var G__11782 = cljs.core.count.call(null, c__4584__auto___11779);
                    var G__11783 = 0;
                    seq__11716_11766 = G__11780;
                    chunk__11717_11767 = G__11781;
                    count__11718_11768 = G__11782;
                    i__11719_11769 = G__11783;
                    continue;
                  } else {
                    var vec__11721_11784 = cljs.core.first.call(null, seq__11716_11778__$1);
                    var id_11785 = cljs.core.nth.call(null, vec__11721_11784, 0, null);
                    var c_11786 = cljs.core.nth.call(null, vec__11721_11784, 1, null);
                    if (cljs.core.truth_(c_11786.shouldComponentUpdate(c_11786.props, c_11786.state))) {
                      c_11786.forceUpdate();
                    } else {
                    }
                    var G__11787 = cljs.core.next.call(null, seq__11716_11778__$1);
                    var G__11788 = null;
                    var G__11789 = 0;
                    var G__11790 = 0;
                    seq__11716_11766 = G__11787;
                    chunk__11717_11767 = G__11788;
                    count__11718_11768 = G__11789;
                    i__11719_11769 = G__11790;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__11791 = seq__11711_11758;
            var G__11792 = chunk__11712_11759;
            var G__11793 = count__11713_11760;
            var G__11794 = i__11714_11761 + 1;
            seq__11711_11758 = G__11791;
            chunk__11712_11759 = G__11792;
            count__11713_11760 = G__11793;
            i__11714_11761 = G__11794;
            continue;
          } else {
            var temp__4126__auto___11795 = cljs.core.seq.call(null, seq__11711_11758);
            if (temp__4126__auto___11795) {
              var seq__11711_11796__$1 = temp__4126__auto___11795;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11711_11796__$1)) {
                var c__4584__auto___11797 = cljs.core.chunk_first.call(null, seq__11711_11796__$1);
                var G__11798 = cljs.core.chunk_rest.call(null, seq__11711_11796__$1);
                var G__11799 = c__4584__auto___11797;
                var G__11800 = cljs.core.count.call(null, c__4584__auto___11797);
                var G__11801 = 0;
                seq__11711_11758 = G__11798;
                chunk__11712_11759 = G__11799;
                count__11713_11760 = G__11800;
                i__11714_11761 = G__11801;
                continue;
              } else {
                var vec__11722_11802 = cljs.core.first.call(null, seq__11711_11796__$1);
                var path_11803__$1 = cljs.core.nth.call(null, vec__11722_11802, 0, null);
                var cs_11804 = cljs.core.nth.call(null, vec__11722_11802, 1, null);
                var cs_11805__$1 = cljs.core.deref.call(null, cs_11804);
                var seq__11723_11806 = cljs.core.seq.call(null, cs_11805__$1);
                var chunk__11724_11807 = null;
                var count__11725_11808 = 0;
                var i__11726_11809 = 0;
                while (true) {
                  if (i__11726_11809 < count__11725_11808) {
                    var vec__11727_11810 = cljs.core._nth.call(null, chunk__11724_11807, i__11726_11809);
                    var id_11811 = cljs.core.nth.call(null, vec__11727_11810, 0, null);
                    var c_11812 = cljs.core.nth.call(null, vec__11727_11810, 1, null);
                    if (cljs.core.truth_(c_11812.shouldComponentUpdate(c_11812.props, c_11812.state))) {
                      c_11812.forceUpdate();
                    } else {
                    }
                    var G__11813 = seq__11723_11806;
                    var G__11814 = chunk__11724_11807;
                    var G__11815 = count__11725_11808;
                    var G__11816 = i__11726_11809 + 1;
                    seq__11723_11806 = G__11813;
                    chunk__11724_11807 = G__11814;
                    count__11725_11808 = G__11815;
                    i__11726_11809 = G__11816;
                    continue;
                  } else {
                    var temp__4126__auto___11817__$1 = cljs.core.seq.call(null, seq__11723_11806);
                    if (temp__4126__auto___11817__$1) {
                      var seq__11723_11818__$1 = temp__4126__auto___11817__$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, seq__11723_11818__$1)) {
                        var c__4584__auto___11819 = cljs.core.chunk_first.call(null, seq__11723_11818__$1);
                        var G__11820 = cljs.core.chunk_rest.call(null, seq__11723_11818__$1);
                        var G__11821 = c__4584__auto___11819;
                        var G__11822 = cljs.core.count.call(null, c__4584__auto___11819);
                        var G__11823 = 0;
                        seq__11723_11806 = G__11820;
                        chunk__11724_11807 = G__11821;
                        count__11725_11808 = G__11822;
                        i__11726_11809 = G__11823;
                        continue;
                      } else {
                        var vec__11728_11824 = cljs.core.first.call(null, seq__11723_11818__$1);
                        var id_11825 = cljs.core.nth.call(null, vec__11728_11824, 0, null);
                        var c_11826 = cljs.core.nth.call(null, vec__11728_11824, 1, null);
                        if (cljs.core.truth_(c_11826.shouldComponentUpdate(c_11826.props, c_11826.state))) {
                          c_11826.forceUpdate();
                        } else {
                        }
                        var G__11827 = cljs.core.next.call(null, seq__11723_11818__$1);
                        var G__11828 = null;
                        var G__11829 = 0;
                        var G__11830 = 0;
                        seq__11723_11806 = G__11827;
                        chunk__11724_11807 = G__11828;
                        count__11725_11808 = G__11829;
                        i__11726_11809 = G__11830;
                        continue;
                      }
                    } else {
                    }
                  }
                  break;
                }
                var G__11831 = cljs.core.next.call(null, seq__11711_11796__$1);
                var G__11832 = null;
                var G__11833 = 0;
                var G__11834 = 0;
                seq__11711_11758 = G__11831;
                chunk__11712_11759 = G__11832;
                count__11713_11760 = G__11833;
                i__11714_11761 = G__11834;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), true);
      return cljs.core.deref.call(null, ret);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target);
  cljs.core.add_watch.call(null, state__$1, watch_key, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function(_, ___$1, o, n) {
      if (cljs.core.not.call(null, om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033))) && !(o === n)) {
        om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), false);
      } else {
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), false);
      if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
      } else {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
      }
      if (cljs.core.truth_(om.core.refresh_queued)) {
        return null;
      } else {
        om.core.refresh_queued = true;
        if (raf === false || !(typeof requestAnimationFrame !== "undefined")) {
          return setTimeout(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
            return function() {
              return om.core.render_all.call(null, state__$1);
            };
          }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target), 16);
        } else {
          if (cljs.core.fn_QMARK_.call(null, raf)) {
            return raf.call(null);
          } else {
            return requestAnimationFrame(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
              return function() {
                return om.core.render_all.call(null, state__$1);
              };
            }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
          }
        }
      }
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
  cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function() {
      om.core._remove_properties_BANG_.call(null, state__$1, watch_key);
      cljs.core.remove_watch.call(null, state__$1, watch_key);
      om.core.tear_down.call(null, state__$1, watch_key);
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
      return React.unmountComponentAtNode(target);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__11667, map__11667__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
  return rootf.call(null);
};
om.core.detach_root = function detach_root(target) {
  if (cljs.core.truth_(goog.dom.isElement(target))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("gdom", "isElement", "gdom/isElement", 465934354, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null))))].join(""));
  }
  var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, om.core.roots), target);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    return f.call(null);
  } else {
    return null;
  }
};
om.core.transactable_QMARK_ = function transactable_QMARK_(x) {
  var G__11836 = x;
  if (G__11836) {
    var bit__4478__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3797__auto__ = bit__4478__auto__;
      if (cljs.core.truth_(or__3797__auto__)) {
        return or__3797__auto__;
      } else {
        return G__11836.om$core$ITransact$;
      }
    }())) {
      return true;
    } else {
      if (!G__11836.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__11836);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__11836);
  }
};
om.core.transact_BANG_ = function() {
  var transact_BANG_ = null;
  var transact_BANG___2 = function(cursor, f) {
    return transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, f, null);
  };
  var transact_BANG___3 = function(cursor, korks, f) {
    return transact_BANG_.call(null, cursor, korks, f, null);
  };
  var transact_BANG___4 = function(cursor, korks, f, tag) {
    if (om.core.transactable_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "transactable?", "transactable?", 780536292, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._transact_BANG_.call(null, cursor, korks__$1, f, tag);
  };
  transact_BANG_ = function(cursor, korks, f, tag) {
    switch(arguments.length) {
      case 2:
        return transact_BANG___2.call(this, cursor, korks);
      case 3:
        return transact_BANG___3.call(this, cursor, korks, f);
      case 4:
        return transact_BANG___4.call(this, cursor, korks, f, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transact_BANG_.cljs$core$IFn$_invoke$arity$2 = transact_BANG___2;
  transact_BANG_.cljs$core$IFn$_invoke$arity$3 = transact_BANG___3;
  transact_BANG_.cljs$core$IFn$_invoke$arity$4 = transact_BANG___4;
  return transact_BANG_;
}();
om.core.update_BANG_ = function() {
  var update_BANG_ = null;
  var update_BANG___2 = function(cursor, v) {
    if (om.core.cursor_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, function(_) {
      return v;
    }, null);
  };
  var update_BANG___3 = function(cursor, korks, v) {
    if (om.core.cursor_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, null);
  };
  var update_BANG___4 = function(cursor, korks, v, tag) {
    if (om.core.cursor_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, tag);
  };
  update_BANG_ = function(cursor, korks, v, tag) {
    switch(arguments.length) {
      case 2:
        return update_BANG___2.call(this, cursor, korks);
      case 3:
        return update_BANG___3.call(this, cursor, korks, v);
      case 4:
        return update_BANG___4.call(this, cursor, korks, v, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_BANG_.cljs$core$IFn$_invoke$arity$2 = update_BANG___2;
  update_BANG_.cljs$core$IFn$_invoke$arity$3 = update_BANG___3;
  update_BANG_.cljs$core$IFn$_invoke$arity$4 = update_BANG___4;
  return update_BANG_;
}();
om.core.commit_BANG_ = function commit_BANG_(cursor, korks, f) {
  if (om.core.cursor_QMARK_.call(null, cursor)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  var key = function() {
    var G__11838 = cursor;
    if (G__11838) {
      var bit__4478__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3797__auto__ = bit__4478__auto__;
        if (cljs.core.truth_(or__3797__auto__)) {
          return or__3797__auto__;
        } else {
          return G__11838.om$core$IRootKey$;
        }
      }())) {
        return true;
      } else {
        if (!G__11838.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__11838);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__11838);
    }
  }() ? om.core._root_key.call(null, cursor) : null;
  var app_state = om.core.state.call(null, cursor);
  var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  var cpath = om.core.path.call(null, cursor);
  var rpath = cljs.core.into.call(null, cpath, korks__$1);
  if (cljs.core.truth_(key)) {
    om.core._set_property_BANG_.call(null, app_state, key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), true);
  } else {
  }
  if (cljs.core.empty_QMARK_.call(null, rpath)) {
    return cljs.core.swap_BANG_.call(null, app_state, f);
  } else {
    return cljs.core.swap_BANG_.call(null, app_state, cljs.core.update_in, rpath, f);
  }
};
om.core.get_node = function() {
  var get_node = null;
  var get_node__1 = function(owner) {
    return owner.getDOMNode();
  };
  var get_node__2 = function(owner, name) {
    if (typeof name === "string") {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "name", "name", -810760592, null))))].join(""));
    }
    var temp__4126__auto__ = owner.refs;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var refs = temp__4126__auto__;
      return refs[name].getDOMNode();
    } else {
      return null;
    }
  };
  get_node = function(owner, name) {
    switch(arguments.length) {
      case 1:
        return get_node__1.call(this, owner);
      case 2:
        return get_node__2.call(this, owner, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_node.cljs$core$IFn$_invoke$arity$1 = get_node__1;
  get_node.cljs$core$IFn$_invoke$arity$2 = get_node__2;
  return get_node;
}();
om.core.mounted_QMARK_ = function mounted_QMARK_(owner) {
  return owner.isMounted();
};
om.core.set_state_BANG_ = function() {
  var set_state_BANG_ = null;
  var set_state_BANG___2 = function(owner, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._set_state_BANG_.call(null, owner, v, true);
  };
  var set_state_BANG___3 = function(owner, korks, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._set_state_BANG_.call(null, owner, ks, v, true);
  };
  set_state_BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_BANG___2.call(this, owner, korks);
      case 3:
        return set_state_BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_BANG___2;
  set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_BANG___3;
  return set_state_BANG_;
}();
om.core.set_state_nr_BANG_ = function() {
  var set_state_nr_BANG_ = null;
  var set_state_nr_BANG___2 = function(owner, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._set_state_BANG_.call(null, owner, v, false);
  };
  var set_state_nr_BANG___3 = function(owner, korks, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._set_state_BANG_.call(null, owner, ks, v, false);
  };
  set_state_nr_BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_nr_BANG___2.call(this, owner, korks);
      case 3:
        return set_state_nr_BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_nr_BANG___2;
  set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_nr_BANG___3;
  return set_state_nr_BANG_;
}();
om.core.update_state_BANG_ = function() {
  var update_state_BANG_ = null;
  var update_state_BANG___2 = function(owner, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
  };
  var update_state_BANG___3 = function(owner, korks, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
  };
  update_state_BANG_ = function(owner, korks, f) {
    switch(arguments.length) {
      case 2:
        return update_state_BANG___2.call(this, owner, korks);
      case 3:
        return update_state_BANG___3.call(this, owner, korks, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = update_state_BANG___2;
  update_state_BANG_.cljs$core$IFn$_invoke$arity$3 = update_state_BANG___3;
  return update_state_BANG_;
}();
om.core.update_state_nr_BANG_ = function() {
  var update_state_nr_BANG_ = null;
  var update_state_nr_BANG___2 = function(owner, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_nr_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
  };
  var update_state_nr_BANG___3 = function(owner, korks, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_nr_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
  };
  update_state_nr_BANG_ = function(owner, korks, f) {
    switch(arguments.length) {
      case 2:
        return update_state_nr_BANG___2.call(this, owner, korks);
      case 3:
        return update_state_nr_BANG___3.call(this, owner, korks, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = update_state_nr_BANG___2;
  update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = update_state_nr_BANG___3;
  return update_state_nr_BANG_;
}();
om.core.refresh_BANG_ = function refresh_BANG_(owner) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core.update_state_BANG_.call(null, owner, cljs.core.identity);
};
om.core.get_render_state = function() {
  var get_render_state = null;
  var get_render_state__1 = function(owner) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._get_render_state.call(null, owner);
  };
  var get_render_state__2 = function(owner, korks) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_render_state.call(null, owner, ks);
  };
  get_render_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_render_state__1.call(this, owner);
      case 2:
        return get_render_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_render_state.cljs$core$IFn$_invoke$arity$1 = get_render_state__1;
  get_render_state.cljs$core$IFn$_invoke$arity$2 = get_render_state__2;
  return get_render_state;
}();
goog.provide("hoard.es_tweet_formatter");
goog.require("cljs.core");
hoard.es_tweet_formatter.fix_array = function fix_array(data) {
  return JSON.parse(JSON.stringify(data));
};
hoard.es_tweet_formatter.tweet_formatter = function tweet_formatter(tweet) {
  var idx = function() {
    var obj13317 = {"index":function() {
      var obj13319 = {"_index":"tweets", "_type":"tweets", "_id":tweet["id"]};
      return obj13319;
    }()};
    return obj13317;
  }();
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx, tweet], null);
};
hoard.es_tweet_formatter.format_bulk_data = function format_bulk_data(data) {
  var inserts = cljs.core.doall.call(null, cljs.core.map.call(null, hoard.es_tweet_formatter.tweet_formatter, hoard.es_tweet_formatter.fix_array.call(null, data)));
  var obj13323 = {"body":cljs.core.clj__GT_js.call(null, cljs.core.flatten.call(null, inserts))};
  return obj13323;
};
goog.provide("hoard.data_processing");
goog.require("cljs.core");
goog.require("hoard.es_tweet_formatter");
goog.require("hoard.elasticsearch");
goog.require("cljs.core.async");
hoard.data_processing.init = function init(p__18169, ch) {
  var vec__18171 = p__18169;
  var screen_name = cljs.core.nth.call(null, vec__18171, 0, null);
  var data = cljs.core.nth.call(null, vec__18171, 1, null);
  console.log("Initializing data processing");
  return hoard.elasticsearch.bulk_insert.call(null, hoard.es_tweet_formatter.format_bulk_data.call(null, data), function(vec__18171, screen_name, data) {
    return function(err, resp) {
      if (cljs.core.truth_(err)) {
        return console.log("Elasticsearch gave an error: ", err);
      } else {
        return cljs.core.async.put_BANG_.call(null, ch, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "user-indexed", "user-indexed", 1494954281), screen_name], null));
      }
    };
  }(vec__18171, screen_name, data));
};
goog.provide("enfocus.events");
goog.require("cljs.core");
goog.require("goog.object");
goog.require("enfocus.core");
goog.require("goog.dom");
goog.require("goog.events");
enfocus.events.view_port_monitor = cljs.core.atom.call(null, null);
enfocus.events.get_vp_monitor = function get_vp_monitor() {
  if (cljs.core.truth_(cljs.core.deref.call(null, enfocus.events.view_port_monitor))) {
    return cljs.core.deref.call(null, enfocus.events.view_port_monitor);
  } else {
    cljs.core.swap_BANG_.call(null, enfocus.events.view_port_monitor, function() {
      return new goog.dom.ViewportSizeMonitor;
    });
    return cljs.core.deref.call(null, enfocus.events.view_port_monitor);
  }
};
enfocus.events.gen_enter_leave_wrapper = function gen_enter_leave_wrapper(event) {
  var obj = new Object;
  obj.listen = function(obj) {
    return function(elm, func, opt_cap, opt_scope, opt_handler) {
      var callback = enfocus.events.mouse_enter_leave.call(null, func);
      callback.listen = func;
      callback.scope = opt_scope;
      if (cljs.core.truth_(opt_handler)) {
        return opt_handler.listen(elm, cljs.core.name.call(null, event), callback);
      } else {
        return goog.events.listen(elm, cljs.core.name.call(null, event), callback);
      }
    };
  }(obj);
  obj.unlisten = function(obj) {
    return function(elm, func, opt_cap, opt_scope, opt_handler) {
      var listeners = goog.events.getListeners(elm, cljs.core.name.call(null, event), false);
      var seq__13019_13023 = cljs.core.seq.call(null, listeners);
      var chunk__13020_13024 = null;
      var count__13021_13025 = 0;
      var i__13022_13026 = 0;
      while (true) {
        if (i__13022_13026 < count__13021_13025) {
          var obj_13027__$1 = cljs.core._nth.call(null, chunk__13020_13024, i__13022_13026);
          var listener_13028 = obj_13027__$1.listener;
          if ((cljs.core.not.call(null, func) || cljs.core._EQ_.call(null, listener_13028.listen, func)) && (cljs.core.not.call(null, opt_scope) || cljs.core._EQ_.call(null, listener_13028.scope, opt_scope))) {
            if (cljs.core.truth_(opt_handler)) {
              opt_handler.unlisten(elm, cljs.core.name.call(null, event), listener_13028);
            } else {
              goog.events.unlisten(elm, cljs.core.name.call(null, event), listener_13028);
            }
          } else {
          }
          var G__13029 = seq__13019_13023;
          var G__13030 = chunk__13020_13024;
          var G__13031 = count__13021_13025;
          var G__13032 = i__13022_13026 + 1;
          seq__13019_13023 = G__13029;
          chunk__13020_13024 = G__13030;
          count__13021_13025 = G__13031;
          i__13022_13026 = G__13032;
          continue;
        } else {
          var temp__4126__auto___13033 = cljs.core.seq.call(null, seq__13019_13023);
          if (temp__4126__auto___13033) {
            var seq__13019_13034__$1 = temp__4126__auto___13033;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__13019_13034__$1)) {
              var c__4584__auto___13035 = cljs.core.chunk_first.call(null, seq__13019_13034__$1);
              var G__13036 = cljs.core.chunk_rest.call(null, seq__13019_13034__$1);
              var G__13037 = c__4584__auto___13035;
              var G__13038 = cljs.core.count.call(null, c__4584__auto___13035);
              var G__13039 = 0;
              seq__13019_13023 = G__13036;
              chunk__13020_13024 = G__13037;
              count__13021_13025 = G__13038;
              i__13022_13026 = G__13039;
              continue;
            } else {
              var obj_13040__$1 = cljs.core.first.call(null, seq__13019_13034__$1);
              var listener_13041 = obj_13040__$1.listener;
              if ((cljs.core.not.call(null, func) || cljs.core._EQ_.call(null, listener_13041.listen, func)) && (cljs.core.not.call(null, opt_scope) || cljs.core._EQ_.call(null, listener_13041.scope, opt_scope))) {
                if (cljs.core.truth_(opt_handler)) {
                  opt_handler.unlisten(elm, cljs.core.name.call(null, event), listener_13041);
                } else {
                  goog.events.unlisten(elm, cljs.core.name.call(null, event), listener_13041);
                }
              } else {
              }
              var G__13042 = cljs.core.next.call(null, seq__13019_13034__$1);
              var G__13043 = null;
              var G__13044 = 0;
              var G__13045 = 0;
              seq__13019_13023 = G__13042;
              chunk__13020_13024 = G__13043;
              count__13021_13025 = G__13044;
              i__13022_13026 = G__13045;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return listeners;
    };
  }(obj);
  return obj;
};
enfocus.events.wrapper_register = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560), enfocus.events.gen_enter_leave_wrapper.call(null, new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303)), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580), enfocus.events.gen_enter_leave_wrapper.call(null, new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890))], null);
enfocus.events.listen = function listen(event, func) {
  var wrapper = enfocus.events.wrapper_register.call(null, event);
  return function(wrapper) {
    return function(pnod) {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "resize", "resize", 297367086), event) && window === pnod) {
        return goog.events.listen(enfocus.events.get_vp_monitor.call(null), "resize", func);
      } else {
        if (wrapper == null) {
          return goog.events.listen(pnod, cljs.core.name.call(null, event), func);
        } else {
          return goog.events.listenWithWrapper(pnod, wrapper, func);
        }
      }
    };
  }(wrapper);
};
enfocus.events.remove_listeners = function() {
  var remove_listeners__delegate = function(event_list) {
    var get_name = function(p1__13046_SHARP_) {
      return cljs.core.name.call(null, cljs.core._EQ_.call(null, p1__13046_SHARP_, new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560)) ? new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303) : cljs.core._EQ_.call(null, p1__13046_SHARP_, new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580)) ? new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890) : p1__13046_SHARP_);
    };
    return function(get_name) {
      return function(pnod) {
        var seq__13051 = cljs.core.seq.call(null, event_list);
        var chunk__13052 = null;
        var count__13053 = 0;
        var i__13054 = 0;
        while (true) {
          if (i__13054 < count__13053) {
            var ev = cljs.core._nth.call(null, chunk__13052, i__13054);
            goog.events.removeAll(pnod, get_name.call(null, ev));
            var G__13055 = seq__13051;
            var G__13056 = chunk__13052;
            var G__13057 = count__13053;
            var G__13058 = i__13054 + 1;
            seq__13051 = G__13055;
            chunk__13052 = G__13056;
            count__13053 = G__13057;
            i__13054 = G__13058;
            continue;
          } else {
            var temp__4126__auto__ = cljs.core.seq.call(null, seq__13051);
            if (temp__4126__auto__) {
              var seq__13051__$1 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__13051__$1)) {
                var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__13051__$1);
                var G__13059 = cljs.core.chunk_rest.call(null, seq__13051__$1);
                var G__13060 = c__4584__auto__;
                var G__13061 = cljs.core.count.call(null, c__4584__auto__);
                var G__13062 = 0;
                seq__13051 = G__13059;
                chunk__13052 = G__13060;
                count__13053 = G__13061;
                i__13054 = G__13062;
                continue;
              } else {
                var ev = cljs.core.first.call(null, seq__13051__$1);
                goog.events.removeAll(pnod, get_name.call(null, ev));
                var G__13063 = cljs.core.next.call(null, seq__13051__$1);
                var G__13064 = null;
                var G__13065 = 0;
                var G__13066 = 0;
                seq__13051 = G__13063;
                chunk__13052 = G__13064;
                count__13053 = G__13065;
                i__13054 = G__13066;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(get_name);
  };
  var remove_listeners = function(var_args) {
    var event_list = null;
    if (arguments.length > 0) {
      var G__13067__i = 0, G__13067__a = new Array(arguments.length - 0);
      while (G__13067__i < G__13067__a.length) {
        G__13067__a[G__13067__i] = arguments[G__13067__i + 0];
        ++G__13067__i;
      }
      event_list = new cljs.core.IndexedSeq(G__13067__a, 0);
    }
    return remove_listeners__delegate.call(this, event_list);
  };
  remove_listeners.cljs$lang$maxFixedArity = 0;
  remove_listeners.cljs$lang$applyTo = function(arglist__13068) {
    var event_list = cljs.core.seq(arglist__13068);
    return remove_listeners__delegate(event_list);
  };
  remove_listeners.cljs$core$IFn$_invoke$arity$variadic = remove_listeners__delegate;
  return remove_listeners;
}();
enfocus.events.unlisten = function() {
  var unlisten = null;
  var unlisten__1 = function(event) {
    return enfocus.events.remove_listeners.call(null, event);
  };
  var unlisten__2 = function(event, func) {
    var wrapper = enfocus.events.wrapper_register.call(null, event);
    return function(wrapper) {
      return function(pnod) {
        if (wrapper == null) {
          return goog.events.unlisten(pnod, cljs.core.name.call(null, event), func);
        } else {
          return goog.events.unlistenWithWrapper(pnod, wrapper, func);
        }
      };
    }(wrapper);
  };
  unlisten = function(event, func) {
    switch(arguments.length) {
      case 1:
        return unlisten__1.call(this, event);
      case 2:
        return unlisten__2.call(this, event, func);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten.cljs$core$IFn$_invoke$arity$1 = unlisten__1;
  unlisten.cljs$core$IFn$_invoke$arity$2 = unlisten__2;
  return unlisten;
}();
enfocus.events.get_node_chain = function get_node_chain(top, node) {
  if (node == null || cljs.core._EQ_.call(null, node, top)) {
    return cljs.core.List.EMPTY;
  } else {
    return cljs.core.conj.call(null, get_node_chain.call(null, top, node.parentNode), node);
  }
};
enfocus.events.create_event = function create_event(cur, cur_event) {
  var event = goog.object.clone(cur_event);
  event.currentTarget = cur;
  return event;
};
enfocus.events.listen_live = function listen_live(event, selector, func) {
  return function(node) {
    return enfocus.core.at.call(null, node, enfocus.events.listen.call(null, event, function(p1__13069_SHARP_) {
      var seq__13074 = cljs.core.seq.call(null, enfocus.events.get_node_chain.call(null, node, p1__13069_SHARP_.target));
      var chunk__13075 = null;
      var count__13076 = 0;
      var i__13077 = 0;
      while (true) {
        if (i__13077 < count__13076) {
          var el = cljs.core._nth.call(null, chunk__13075, i__13077);
          enfocus.core.at.call(null, el, enfocus.core.filter.call(null, enfocus.core.match_QMARK_.call(null, selector), function(seq__13074, chunk__13075, count__13076, i__13077, el) {
            return function(node__$1) {
              var event_copy = enfocus.events.create_event.call(null, el, p1__13069_SHARP_);
              func.call(null, event_copy);
              if (cljs.core.truth_(event_copy.defaultPrevented)) {
                p1__13069_SHARP_.preventDefault();
              } else {
              }
              if (cljs.core.truth_(event_copy.propagationStopped)) {
                return p1__13069_SHARP_.stopPropagation();
              } else {
                return null;
              }
            };
          }(seq__13074, chunk__13075, count__13076, i__13077, el)));
          var G__13078 = seq__13074;
          var G__13079 = chunk__13075;
          var G__13080 = count__13076;
          var G__13081 = i__13077 + 1;
          seq__13074 = G__13078;
          chunk__13075 = G__13079;
          count__13076 = G__13080;
          i__13077 = G__13081;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__13074);
          if (temp__4126__auto__) {
            var seq__13074__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__13074__$1)) {
              var c__4584__auto__ = cljs.core.chunk_first.call(null, seq__13074__$1);
              var G__13082 = cljs.core.chunk_rest.call(null, seq__13074__$1);
              var G__13083 = c__4584__auto__;
              var G__13084 = cljs.core.count.call(null, c__4584__auto__);
              var G__13085 = 0;
              seq__13074 = G__13082;
              chunk__13075 = G__13083;
              count__13076 = G__13084;
              i__13077 = G__13085;
              continue;
            } else {
              var el = cljs.core.first.call(null, seq__13074__$1);
              enfocus.core.at.call(null, el, enfocus.core.filter.call(null, enfocus.core.match_QMARK_.call(null, selector), function(seq__13074, chunk__13075, count__13076, i__13077, el, seq__13074__$1, temp__4126__auto__) {
                return function(node__$1) {
                  var event_copy = enfocus.events.create_event.call(null, el, p1__13069_SHARP_);
                  func.call(null, event_copy);
                  if (cljs.core.truth_(event_copy.defaultPrevented)) {
                    p1__13069_SHARP_.preventDefault();
                  } else {
                  }
                  if (cljs.core.truth_(event_copy.propagationStopped)) {
                    return p1__13069_SHARP_.stopPropagation();
                  } else {
                    return null;
                  }
                };
              }(seq__13074, chunk__13075, count__13076, i__13077, el, seq__13074__$1, temp__4126__auto__)));
              var G__13086 = cljs.core.next.call(null, seq__13074__$1);
              var G__13087 = null;
              var G__13088 = 0;
              var G__13089 = 0;
              seq__13074 = G__13086;
              chunk__13075 = G__13087;
              count__13076 = G__13088;
              i__13077 = G__13089;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    }));
  };
};
enfocus.events.child_of_QMARK_ = function child_of_QMARK_(parent, child) {
  while (true) {
    if (cljs.core.not.call(null, child)) {
      return false;
    } else {
      if (parent === child) {
        return false;
      } else {
        if (child.parentNode === parent) {
          return true;
        } else {
          var G__13090 = parent;
          var G__13091 = child.parentNode;
          parent = G__13090;
          child = G__13091;
          continue;
        }
      }
    }
    break;
  }
};
enfocus.events.mouse_enter_leave = function mouse_enter_leave(func) {
  return function(e) {
    var re = e.relatedTarget;
    var this$ = e.currentTarget;
    if (!(re === this$) && !enfocus.events.child_of_QMARK_.call(null, this$, re)) {
      return func.call(null, e);
    } else {
      return null;
    }
  };
};
goog.provide("hoard.core");
goog.require("cljs.core");
goog.require("hoard.acquire");
goog.require("enfocus.core");
goog.require("om.dom");
goog.require("weasel.repl");
goog.require("cljs.core.async");
goog.require("enfocus.effects");
goog.require("enfocus.events");
goog.require("hoard.util");
goog.require("om.core");
goog.require("hoard.data_processing");
if (typeof hoard.core.app_state !== "undefined") {
} else {
  hoard.core.app_state = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
hoard.core.user_being_indexed = function user_being_indexed(user, owner) {
  if (typeof hoard.core.t19236 !== "undefined") {
  } else {
    hoard.core.t19236 = function(owner, user, user_being_indexed, meta19237) {
      this.owner = owner;
      this.user = user;
      this.user_being_indexed = user_being_indexed;
      this.meta19237 = meta19237;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    hoard.core.t19236.prototype.om$core$IRender$ = true;
    hoard.core.t19236.prototype.om$core$IRender$render$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return React.DOM.li(null, self__.user);
    };
    hoard.core.t19236.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19238) {
      var self__ = this;
      var _19238__$1 = this;
      return self__.meta19237;
    };
    hoard.core.t19236.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19238, meta19237__$1) {
      var self__ = this;
      var _19238__$1 = this;
      return new hoard.core.t19236(self__.owner, self__.user, self__.user_being_indexed, meta19237__$1);
    };
    hoard.core.t19236.cljs$lang$type = true;
    hoard.core.t19236.cljs$lang$ctorStr = "hoard.core/t19236";
    hoard.core.t19236.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write.call(null, writer__4385__auto__, "hoard.core/t19236");
    };
    hoard.core.__GT_t19236 = function __GT_t19236(owner__$1, user__$1, user_being_indexed__$1, meta19237) {
      return new hoard.core.t19236(owner__$1, user__$1, user_being_indexed__$1, meta19237);
    };
  }
  return new hoard.core.t19236(owner, user, user_being_indexed, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 26, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 28, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 25, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/src/cljs/hoard/core.cljs"], null));
};
hoard.core.users_being_indexed = function users_being_indexed(_, p__19239) {
  var map__19241 = p__19239;
  var map__19241__$1 = cljs.core.seq_QMARK_.call(null, map__19241) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19241) : map__19241;
  var users = cljs.core.get.call(null, map__19241__$1, new cljs.core.Keyword(null, "users", "users", -713552705));
  return React.DOM.div({"style":hoard.util.hidden.call(null, cljs.core.empty_QMARK_.call(null, users))}, React.DOM.h2(null, "Indexing Users:"), cljs.core.apply.call(null, om.dom.ul, {"id":"indexing-users"}, om.core.build_all.call(null, hoard.core.user_being_indexed, users)));
};
hoard.core.handle_screen_name_change = function handle_screen_name_change(e, owner, p__19242) {
  var map__19244 = p__19242;
  var map__19244__$1 = cljs.core.seq_QMARK_.call(null, map__19244) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19244) : map__19244;
  var screen_name = cljs.core.get.call(null, map__19244__$1, new cljs.core.Keyword(null, "screen-name", "screen-name", 31129652));
  var value = e.target.value;
  om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "btn-disabled", "btn-disabled", 540927902), cljs.core._EQ_.call(null, value, ""));
  return om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "screen-name", "screen-name", 31129652), value);
};
hoard.core.user_to_index = function user_to_index(owner, state) {
  return om.dom.input.call(null, {"onChange":function(p1__19245_SHARP_) {
    return hoard.core.handle_screen_name_change.call(null, p1__19245_SHARP_, owner, state);
  }, "value":(new cljs.core.Keyword(null, "screen-name", "screen-name", 31129652)).cljs$core$IFn$_invoke$arity$1(state), "ref":"user-to-index", "placeholder":"User to Index", "type":"text"});
};
hoard.core.indexing_submit = function indexing_submit(owner, state, comm) {
  return React.DOM.button({"disabled":(new cljs.core.Keyword(null, "btn-disabled", "btn-disabled", 540927902)).cljs$core$IFn$_invoke$arity$1(state), "className":"btn btn-submit", "onClick":function() {
    return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index-user", "index-user", 1779303928), om.core.get_node.call(null, owner, "user-to-index").value], null));
  }}, "Index User");
};
hoard.core.index_user_BANG_ = function index_user_BANG_(owner, screen_name, comm) {
  console.log("the screen name is ", screen_name);
  om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "screen-name", "screen-name", 31129652), "");
  om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "users", "users", -713552705), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [screen_name], null));
  return hoard.acquire.data.call(null, screen_name, comm);
};
hoard.core.index_complete = function index_complete(owner, val) {
  console.log("user ", val, "has been indexed!");
  return om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "users", "users", -713552705), cljs.core.PersistentVector.EMPTY);
};
hoard.core.handle_event = function handle_event(type, owner, val, comm) {
  var G__19247 = type instanceof cljs.core.Keyword ? type.fqn : null;
  switch(G__19247) {
    case "user-indexed":
      return hoard.core.index_complete.call(null, owner, val);
      break;
    case "user-tweets":
      return hoard.data_processing.init.call(null, val, comm);
      break;
    case "index-user":
      return hoard.core.index_user_BANG_.call(null, owner, val, comm);
      break;
    default:
      return null;
  }
};
hoard.core.indexing_ui = function indexing_ui(data, owner) {
  if (typeof hoard.core.t19285 !== "undefined") {
  } else {
    hoard.core.t19285 = function(owner, data, indexing_ui, meta19286) {
      this.owner = owner;
      this.data = data;
      this.indexing_ui = indexing_ui;
      this.meta19286 = meta19286;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    hoard.core.t19285.prototype.om$core$IRenderState$ = true;
    hoard.core.t19285.prototype.om$core$IRenderState$render_state$arity$2 = function(this$, p__19288) {
      var self__ = this;
      var map__19289 = p__19288;
      var map__19289__$1 = cljs.core.seq_QMARK_.call(null, map__19289) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19289) : map__19289;
      var state = map__19289__$1;
      var comm = cljs.core.get.call(null, map__19289__$1, new cljs.core.Keyword(null, "comm", "comm", -1689770614));
      var this$__$1 = this;
      return React.DOM.div({"className":"container"}, React.DOM.h2(null, "Index User"), hoard.core.users_being_indexed.call(null, self__.owner, state), React.DOM.div({"id":"index-user"}, hoard.core.user_to_index.call(null, self__.owner, state), hoard.core.indexing_submit.call(null, self__.owner, state, comm)));
    };
    hoard.core.t19285.prototype.om$core$IInitState$ = true;
    hoard.core.t19285.prototype.om$core$IInitState$init_state$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "screen-name", "screen-name", 31129652), "", new cljs.core.Keyword(null, "btn-disabled", "btn-disabled", 540927902), true, new cljs.core.Keyword(null, "users", "users", -713552705), cljs.core.PersistentVector.EMPTY], null);
    };
    hoard.core.t19285.prototype.om$core$IWillMount$ = true;
    hoard.core.t19285.prototype.om$core$IWillMount$will_mount$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      var comm = cljs.core.async.chan.call(null);
      om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "comm", "comm", -1689770614), comm);
      var c__6581__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__6581__auto__, comm, ___$1) {
        return function() {
          var f__6582__auto__ = function() {
            var switch__6525__auto__ = function(c__6581__auto__, comm, ___$1) {
              return function(state_19305) {
                var state_val_19306 = state_19305[1];
                if (state_val_19306 === 7) {
                  var inst_19294 = state_19305[2];
                  var inst_19295 = cljs.core.nth.call(null, inst_19294, 0, null);
                  var inst_19296 = cljs.core.nth.call(null, inst_19294, 1, null);
                  var inst_19297 = hoard.core.handle_event.call(null, inst_19295, self__.owner, inst_19296, comm);
                  var state_19305__$1 = function() {
                    var statearr_19307 = state_19305;
                    statearr_19307[7] = inst_19297;
                    return statearr_19307;
                  }();
                  var statearr_19308_19321 = state_19305__$1;
                  statearr_19308_19321[2] = null;
                  statearr_19308_19321[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19306 === 6) {
                    var inst_19301 = state_19305[2];
                    var state_19305__$1 = state_19305;
                    var statearr_19309_19322 = state_19305__$1;
                    statearr_19309_19322[2] = inst_19301;
                    statearr_19309_19322[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19306 === 5) {
                      var state_19305__$1 = state_19305;
                      var statearr_19310_19323 = state_19305__$1;
                      statearr_19310_19323[2] = null;
                      statearr_19310_19323[1] = 6;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19306 === 4) {
                        var state_19305__$1 = state_19305;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19305__$1, 7, comm);
                      } else {
                        if (state_val_19306 === 3) {
                          var inst_19303 = state_19305[2];
                          var state_19305__$1 = state_19305;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19305__$1, inst_19303);
                        } else {
                          if (state_val_19306 === 2) {
                            var state_19305__$1 = state_19305;
                            var statearr_19311_19324 = state_19305__$1;
                            statearr_19311_19324[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19306 === 1) {
                              var state_19305__$1 = state_19305;
                              var statearr_19313_19325 = state_19305__$1;
                              statearr_19313_19325[2] = null;
                              statearr_19313_19325[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              };
            }(c__6581__auto__, comm, ___$1);
            return function(switch__6525__auto__, c__6581__auto__, comm, ___$1) {
              return function() {
                var state_machine__6526__auto__ = null;
                var state_machine__6526__auto____0 = function() {
                  var statearr_19317 = [null, null, null, null, null, null, null, null];
                  statearr_19317[0] = state_machine__6526__auto__;
                  statearr_19317[1] = 1;
                  return statearr_19317;
                };
                var state_machine__6526__auto____1 = function(state_19305) {
                  while (true) {
                    var ret_value__6527__auto__ = function() {
                      try {
                        while (true) {
                          var result__6528__auto__ = switch__6525__auto__.call(null, state_19305);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__6528__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__6528__auto__;
                          }
                          break;
                        }
                      } catch (e19318) {
                        if (e19318 instanceof Object) {
                          var ex__6529__auto__ = e19318;
                          var statearr_19319_19326 = state_19305;
                          statearr_19319_19326[5] = ex__6529__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19305);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e19318;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6527__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__19327 = state_19305;
                      state_19305 = G__19327;
                      continue;
                    } else {
                      return ret_value__6527__auto__;
                    }
                    break;
                  }
                };
                state_machine__6526__auto__ = function(state_19305) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__6526__auto____0.call(this);
                    case 1:
                      return state_machine__6526__auto____1.call(this, state_19305);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__6526__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6526__auto____0;
                state_machine__6526__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6526__auto____1;
                return state_machine__6526__auto__;
              }();
            }(switch__6525__auto__, c__6581__auto__, comm, ___$1);
          }();
          var state__6583__auto__ = function() {
            var statearr_19320 = f__6582__auto__.call(null);
            statearr_19320[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6581__auto__;
            return statearr_19320;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6583__auto__);
        };
      }(c__6581__auto__, comm, ___$1));
      return c__6581__auto__;
    };
    hoard.core.t19285.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19287) {
      var self__ = this;
      var _19287__$1 = this;
      return self__.meta19286;
    };
    hoard.core.t19285.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19287, meta19286__$1) {
      var self__ = this;
      var _19287__$1 = this;
      return new hoard.core.t19285(self__.owner, self__.data, self__.indexing_ui, meta19286__$1);
    };
    hoard.core.t19285.cljs$lang$type = true;
    hoard.core.t19285.cljs$lang$ctorStr = "hoard.core/t19285";
    hoard.core.t19285.cljs$lang$ctorPrWriter = function(this__4384__auto__, writer__4385__auto__, opt__4386__auto__) {
      return cljs.core._write.call(null, writer__4385__auto__, "hoard.core/t19285");
    };
    hoard.core.__GT_t19285 = function __GT_t19285(owner__$1, data__$1, indexing_ui__$1, meta19286) {
      return new hoard.core.t19285(owner__$1, data__$1, indexing_ui__$1, meta19286);
    };
  }
  return new hoard.core.t19285(owner, data, indexing_ui, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 63, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 107, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 87, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/blischalk/node-webkit-apps/hoard/src/cljs/hoard/core.cljs"], null));
};
om.core.root.call(null, hoard.core.indexing_ui, hoard.core.app_state, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "target", "target", 253001721), document.getElementById("my-app")], null));
